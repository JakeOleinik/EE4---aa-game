

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 21 12:09:31 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	idataBANK2,global,class=CODE,delta=1
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
    10                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataCOMRAM
    58  002632                     __pidataCOMRAM:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _randx
    62  002632  0001               	dw	1
    63  002634  0000               	dw	0
    64                           
    65                           	psect	idataBANK0
    66  00246E                     __pidataBANK0:
    67                           	opt stack 0
    68                           
    69                           ;initializer for _ImperialMarchNotes
    70  00246E  01B8               	dw	440
    71  002470  0000               	dw	0
    72  002472  01B8               	dw	440
    73  002474  0000               	dw	0
    74  002476  01B8               	dw	440
    75  002478  0000               	dw	0
    76  00247A  015D               	dw	349
    77  00247C  0000               	dw	0
    78  00247E  020B               	dw	523
    79  002480  0000               	dw	0
    80  002482  01B8               	dw	440
    81  002484  0000               	dw	0
    82  002486  015D               	dw	349
    83  002488  0000               	dw	0
    84  00248A  020B               	dw	523
    85  00248C  0000               	dw	0
    86  00248E  01B8               	dw	440
    87  002490  0000               	dw	0
    88  002492  0293               	dw	659
    89  002494  0000               	dw	0
    90  002496  0293               	dw	659
    91  002498  0000               	dw	0
    92  00249A  0293               	dw	659
    93  00249C  0000               	dw	0
    94  00249E  02BA               	dw	698
    95  0024A0  0000               	dw	0
    96  0024A2  020B               	dw	523
    97  0024A4  0000               	dw	0
    98  0024A6  01B8               	dw	440
    99  0024A8  0000               	dw	0
   100  0024AA  015D               	dw	349
   101  0024AC  0000               	dw	0
   102  0024AE  020B               	dw	523
   103  0024B0  0000               	dw	0
   104  0024B2  01B8               	dw	440
   105  0024B4  0000               	dw	0
   106                           
   107                           	psect	idataBANK1
   108  001A92                     __pidataBANK1:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _ImperialMarchDurations
   112  001A92  0032               	dw	50
   113  001A94  0014               	dw	20
   114  001A96  0032               	dw	50
   115  001A98  0014               	dw	20
   116  001A9A  0032               	dw	50
   117  001A9C  0014               	dw	20
   118  001A9E  0028               	dw	40
   119  001AA0  0005               	dw	5
   120  001AA2  0014               	dw	20
   121  001AA4  0005               	dw	5
   122  001AA6  003C               	dw	60
   123  001AA8  000A               	dw	10
   124  001AAA  0028               	dw	40
   125  001AAC  0005               	dw	5
   126  001AAE  0014               	dw	20
   127  001AB0  0005               	dw	5
   128  001AB2  003C               	dw	60
   129  001AB4  0050               	dw	80
   130  001AB6  0032               	dw	50
   131  001AB8  0014               	dw	20
   132  001ABA  0032               	dw	50
   133  001ABC  0014               	dw	20
   134  001ABE  0032               	dw	50
   135  001AC0  0014               	dw	20
   136  001AC2  0028               	dw	40
   137  001AC4  0005               	dw	5
   138  001AC6  0014               	dw	20
   139  001AC8  0005               	dw	5
   140  001ACA  003C               	dw	60
   141  001ACC  000A               	dw	10
   142  001ACE  0028               	dw	40
   143  001AD0  0005               	dw	5
   144  001AD2  0014               	dw	20
   145  001AD4  0005               	dw	5
   146  001AD6  003C               	dw	60
   147  001AD8  0050               	dw	80
   148                           
   149                           ;initializer for _SuperMarioNotes
   150  001ADA  0A4D               	dw	2637
   151  001ADC  0A4D               	dw	2637
   152  001ADE  0000               	dw	0
   153  001AE0  0A4D               	dw	2637
   154  001AE2  0000               	dw	0
   155  001AE4  082D               	dw	2093
   156  001AE6  0A4D               	dw	2637
   157  001AE8  0000               	dw	0
   158  001AEA  0C40               	dw	3136
   159  001AEC  0000               	dw	0
   160  001AEE  0000               	dw	0
   161  001AF0  0000               	dw	0
   162  001AF2  0620               	dw	1568
   163  001AF4  0000               	dw	0
   164  001AF6  0000               	dw	0
   165  001AF8  0000               	dw	0
   166  001AFA  082D               	dw	2093
   167  001AFC  0000               	dw	0
   168  001AFE  0000               	dw	0
   169  001B00  0620               	dw	1568
   170  001B02  0000               	dw	0
   171  001B04  0000               	dw	0
   172  001B06  0527               	dw	1319
   173  001B08  0000               	dw	0
   174  001B0A  0000               	dw	0
   175  001B0C  06E0               	dw	1760
   176  001B0E  0000               	dw	0
   177  001B10  07B8               	dw	1976
   178  001B12  0000               	dw	0
   179  001B14  0749               	dw	1865
   180  001B16  06E0               	dw	1760
   181  001B18  0000               	dw	0
   182  001B1A  0620               	dw	1568
   183  001B1C  0A4D               	dw	2637
   184  001B1E  0C40               	dw	3136
   185  001B20  0DC0               	dw	3520
   186  001B22  0000               	dw	0
   187  001B24  0AEA               	dw	2794
   188  001B26  0C40               	dw	3136
   189  001B28  0000               	dw	0
   190  001B2A  0A4D               	dw	2637
   191  001B2C  0000               	dw	0
   192  001B2E  082D               	dw	2093
   193  001B30  092D               	dw	2349
   194  001B32  07B8               	dw	1976
   195  001B34  0000               	dw	0
   196  001B36  0000               	dw	0
   197  001B38  082D               	dw	2093
   198  001B3A  0000               	dw	0
   199  001B3C  0000               	dw	0
   200  001B3E  0620               	dw	1568
   201  001B40  0000               	dw	0
   202  001B42  0000               	dw	0
   203  001B44  0527               	dw	1319
   204  001B46  0000               	dw	0
   205  001B48  0000               	dw	0
   206  001B4A  06E0               	dw	1760
   207  001B4C  0000               	dw	0
   208  001B4E  07B8               	dw	1976
   209  001B50  0000               	dw	0
   210  001B52  0749               	dw	1865
   211  001B54  06E0               	dw	1760
   212  001B56  0000               	dw	0
   213  001B58  0620               	dw	1568
   214  001B5A  0A4D               	dw	2637
   215  001B5C  0C40               	dw	3136
   216  001B5E  0DC0               	dw	3520
   217  001B60  0000               	dw	0
   218  001B62  0AEA               	dw	2794
   219  001B64  0C40               	dw	3136
   220  001B66  0000               	dw	0
   221  001B68  0A4D               	dw	2637
   222  001B6A  0000               	dw	0
   223  001B6C  082D               	dw	2093
   224  001B6E  092D               	dw	2349
   225  001B70  07B8               	dw	1976
   226  001B72  0000               	dw	0
   227  001B74  0000               	dw	0
   228                           
   229                           	psect	idataBANK2
   230  001F34                     __pidataBANK2:
   231                           	opt stack 0
   232                           
   233                           ;initializer for _SuperMarioDurations
   234  001F34  000C               	dw	12
   235  001F36  000C               	dw	12
   236  001F38  000C               	dw	12
   237  001F3A  000C               	dw	12
   238  001F3C  000C               	dw	12
   239  001F3E  000C               	dw	12
   240  001F40  000C               	dw	12
   241  001F42  000C               	dw	12
   242  001F44  000C               	dw	12
   243  001F46  000C               	dw	12
   244  001F48  000C               	dw	12
   245  001F4A  000C               	dw	12
   246  001F4C  000C               	dw	12
   247  001F4E  000C               	dw	12
   248  001F50  000C               	dw	12
   249  001F52  000C               	dw	12
   250  001F54  000C               	dw	12
   251  001F56  000C               	dw	12
   252  001F58  000C               	dw	12
   253  001F5A  000C               	dw	12
   254  001F5C  000C               	dw	12
   255  001F5E  000C               	dw	12
   256  001F60  000C               	dw	12
   257  001F62  000C               	dw	12
   258  001F64  000C               	dw	12
   259  001F66  000C               	dw	12
   260  001F68  000C               	dw	12
   261  001F6A  000C               	dw	12
   262  001F6C  000C               	dw	12
   263  001F6E  000C               	dw	12
   264  001F70  000C               	dw	12
   265  001F72  000C               	dw	12
   266  001F74  0009               	dw	9
   267  001F76  0009               	dw	9
   268  001F78  0009               	dw	9
   269  001F7A  000C               	dw	12
   270  001F7C  000C               	dw	12
   271  001F7E  000C               	dw	12
   272  001F80  000C               	dw	12
   273  001F82  000C               	dw	12
   274  001F84  000C               	dw	12
   275  001F86  000C               	dw	12
   276  001F88  000C               	dw	12
   277  001F8A  000C               	dw	12
   278  001F8C  000C               	dw	12
   279  001F8E  000C               	dw	12
   280  001F90  000C               	dw	12
   281  001F92  000C               	dw	12
   282  001F94  000C               	dw	12
   283  001F96  000C               	dw	12
   284  001F98  000C               	dw	12
   285  001F9A  000C               	dw	12
   286  001F9C  000C               	dw	12
   287  001F9E  000C               	dw	12
   288  001FA0  000C               	dw	12
   289  001FA2  000C               	dw	12
   290  001FA4  000C               	dw	12
   291  001FA6  000C               	dw	12
   292  001FA8  000C               	dw	12
   293  001FAA  000C               	dw	12
   294  001FAC  000C               	dw	12
   295  001FAE  000C               	dw	12
   296  001FB0  000C               	dw	12
   297  001FB2  0009               	dw	9
   298  001FB4  0009               	dw	9
   299  001FB6  0009               	dw	9
   300  001FB8  000C               	dw	12
   301  001FBA  000C               	dw	12
   302  001FBC  000C               	dw	12
   303  001FBE  000C               	dw	12
   304  001FC0  000C               	dw	12
   305  001FC2  000C               	dw	12
   306  001FC4  000C               	dw	12
   307  001FC6  000C               	dw	12
   308  001FC8  000C               	dw	12
   309  001FCA  000C               	dw	12
   310  001FCC  000C               	dw	12
   311  001FCE  000C               	dw	12
   312                           
   313                           	psect	smallconst
   314  00101A                     __psmallconst:
   315                           	opt stack 0
   316  00101A  00                 	db	0
   317  00101B                     _last_new_note:
   318                           	opt stack 0
   319  00101B  0024               	dw	36
   320  00101D                     __end_of_last_new_note:
   321                           	opt stack 0
   322  00101D                     _last_win_note:
   323                           	opt stack 0
   324  00101D  004E               	dw	78
   325  00101F                     __end_of_last_win_note:
   326                           	opt stack 0
   327  00101F                     _total_steps:
   328                           	opt stack 0
   329  00101F  0320               	dw	800
   330  001021                     __end_of_total_steps:
   331                           	opt stack 0
   332  001021  00                 	db	0	; dummy byte at the end
   333  0000                     
   334                           	psect	nvCOMRAM
   335  00004F                     __pnvCOMRAM:
   336                           	opt stack 0
   337  00004F                     _stepper_direction:
   338                           	opt stack 0
   339  00004F                     	ds	2
   340                           
   341                           	psect	nvBANK0
   342  0000DA                     __pnvBANK0:
   343                           	opt stack 0
   344  0000DA                     _hard_speed:
   345                           	opt stack 0
   346  0000DA                     	ds	3
   347  0000DD                     _steps_per_led:
   348                           	opt stack 0
   349  0000DD                     	ds	3
   350  0000E0                     _hard_speed_timer:
   351                           	opt stack 0
   352  0000E0                     	ds	2
   353  0000E2                     _prev_hall:
   354                           	opt stack 0
   355  0000E2                     	ds	1
   356  0000                     _ADCON1	set	4033
   357  0000                     _INTCONbits	set	4082
   358  0000                     _IPR1bits	set	3999
   359  0000                     _LATAbits	set	3977
   360  0000                     _LATBbits	set	3978
   361  0000                     _LATCbits	set	3979
   362  0000                     _PIE1bits	set	3997
   363  0000                     _PIR1bits	set	3998
   364  0000                     _PORTAbits	set	3968
   365  0000                     _PORTBbits	set	3969
   366  0000                     _T0CONbits	set	4053
   367  0000                     _T1CONbits	set	4045
   368  0000                     _TMR0H	set	4055
   369  0000                     _TMR0L	set	4054
   370  0000                     _TMR1H	set	4047
   371  0000                     _TMR1L	set	4046
   372  0000                     _TRISAbits	set	3986
   373  0000                     _TRISBbits	set	3987
   374  0000                     _TRISCbits	set	3988
   375                           
   376                           ; #config settings
   377                           
   378                           	psect	cinit
   379  001E94                     __pcinit:
   380                           	opt stack 0
   381  001E94                     start_initialization:
   382                           	opt stack 0
   383  001E94                     __initialization:
   384                           	opt stack 0
   385                           
   386                           ; Clear objects allocated to BANK0 (25 bytes)
   387  001E94  EE00  F0A8         	lfsr	0,__pbssBANK0
   388  001E98  0E19               	movlw	25
   389  001E9A                     clear_0:
   390  001E9A  6AEE               	clrf	postinc0,c
   391  001E9C  06E8               	decf	wreg,f,c
   392  001E9E  E1FD               	bnz	clear_0
   393                           
   394                           ; Clear objects allocated to COMRAM (3 bytes)
   395  001EA0  6A4E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   396  001EA2  6A4D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   397  001EA4  6A4C               	clrf	__pbssCOMRAM& (0+255),c
   398                           
   399                           ; Initialize objects allocated to BANK2 (156 bytes)
   400                           ; load TBLPTR registers with __pidataBANK2
   401  001EA6  0E34               	movlw	low __pidataBANK2
   402  001EA8  6EF6               	movwf	tblptrl,c
   403  001EAA  0E1F               	movlw	high __pidataBANK2
   404  001EAC  6EF7               	movwf	tblptrh,c
   405  001EAE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   406  001EB0  6EF8               	movwf	tblptru,c
   407  001EB2  EE02  F000         	lfsr	0,__pdataBANK2
   408  001EB6  EE10 F09C          	lfsr	1,156
   409  001EBA                     copy_data0:
   410  001EBA  0009               	tblrd		*+
   411  001EBC  CFF5 FFEE          	movff	tablat,postinc0
   412  001EC0  50E5               	movf	postdec1,w,c
   413  001EC2  50E1               	movf	fsr1l,w,c
   414  001EC4  E1FA               	bnz	copy_data0
   415                           
   416                           ; Initialize objects allocated to BANK1 (228 bytes)
   417                           ; load TBLPTR registers with __pidataBANK1
   418  001EC6  0E92               	movlw	low __pidataBANK1
   419  001EC8  6EF6               	movwf	tblptrl,c
   420  001ECA  0E1A               	movlw	high __pidataBANK1
   421  001ECC  6EF7               	movwf	tblptrh,c
   422  001ECE  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   423  001ED0  6EF8               	movwf	tblptru,c
   424  001ED2  EE01  F000         	lfsr	0,__pdataBANK1
   425  001ED6  EE10 F0E4          	lfsr	1,228
   426  001EDA                     copy_data1:
   427  001EDA  0009               	tblrd		*+
   428  001EDC  CFF5 FFEE          	movff	tablat,postinc0
   429  001EE0  50E5               	movf	postdec1,w,c
   430  001EE2  50E1               	movf	fsr1l,w,c
   431  001EE4  E1FA               	bnz	copy_data1
   432                           
   433                           ; Initialize objects allocated to BANK0 (72 bytes)
   434                           ; load TBLPTR registers with __pidataBANK0
   435  001EE6  0E6E               	movlw	low __pidataBANK0
   436  001EE8  6EF6               	movwf	tblptrl,c
   437  001EEA  0E24               	movlw	high __pidataBANK0
   438  001EEC  6EF7               	movwf	tblptrh,c
   439  001EEE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   440  001EF0  6EF8               	movwf	tblptru,c
   441  001EF2  EE00  F060         	lfsr	0,__pdataBANK0
   442  001EF6  EE10 F048          	lfsr	1,72
   443  001EFA                     copy_data2:
   444  001EFA  0009               	tblrd		*+
   445  001EFC  CFF5 FFEE          	movff	tablat,postinc0
   446  001F00  50E5               	movf	postdec1,w,c
   447  001F02  50E1               	movf	fsr1l,w,c
   448  001F04  E1FA               	bnz	copy_data2
   449                           
   450                           ; Initialize objects allocated to COMRAM (4 bytes)
   451                           ; load TBLPTR registers with __pidataCOMRAM
   452  001F06  0E32               	movlw	low __pidataCOMRAM
   453  001F08  6EF6               	movwf	tblptrl,c
   454  001F0A  0E26               	movlw	high __pidataCOMRAM
   455  001F0C  6EF7               	movwf	tblptrh,c
   456  001F0E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   457  001F10  6EF8               	movwf	tblptru,c
   458  001F12  EE00  F048         	lfsr	0,__pdataCOMRAM
   459  001F16  EE10 F004          	lfsr	1,4
   460  001F1A                     copy_data3:
   461  001F1A  0009               	tblrd		*+
   462  001F1C  CFF5 FFEE          	movff	tablat,postinc0
   463  001F20  50E5               	movf	postdec1,w,c
   464  001F22  50E1               	movf	fsr1l,w,c
   465  001F24  E1FA               	bnz	copy_data3
   466  001F26                     end_of_initialization:
   467                           	opt stack 0
   468  001F26                     __end_of__initialization:
   469                           	opt stack 0
   470  001F26  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   471  001F28  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   472  001F2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   473  001F2C  6EF8               	movwf	tblptru,c
   474  001F2E  0100               	movlb	0
   475  001F30  EF0C  F013         	goto	_main	;jump to C main() function
   476                           tblptru	equ	0xFF8
   477                           tblptrh	equ	0xFF7
   478                           tblptrl	equ	0xFF6
   479                           tablat	equ	0xFF5
   480                           postinc0	equ	0xFEE
   481                           wreg	equ	0xFE8
   482                           postdec1	equ	0xFE5
   483                           fsr1l	equ	0xFE1
   484                           
   485                           	psect	bssCOMRAM
   486  00004C                     __pbssCOMRAM:
   487                           	opt stack 0
   488  00004C                     _PWM_duty:
   489                           	opt stack 0
   490  00004C                     	ds	1
   491  00004D                     _counter:
   492                           	opt stack 0
   493  00004D                     	ds	1
   494  00004E                     _state_to_recover:
   495                           	opt stack 0
   496  00004E                     	ds	1
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	dataCOMRAM
   507  000048                     __pdataCOMRAM:
   508                           	opt stack 0
   509  000048                     _randx:
   510                           	opt stack 0
   511  000048                     	ds	4
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	bssBANK0
   522  0000A8                     __pbssBANK0:
   523                           	opt stack 0
   524  0000A8                     _LEDs:
   525                           	opt stack 0
   526  0000A8                     	ds	16
   527  0000B8                     _note_new:
   528                           	opt stack 0
   529  0000B8                     	ds	2
   530  0000BA                     _note_win:
   531                           	opt stack 0
   532  0000BA                     	ds	2
   533  0000BC                     _position:
   534                           	opt stack 0
   535  0000BC                     	ds	2
   536  0000BE                     _current_state:
   537                           	opt stack 0
   538  0000BE                     	ds	1
   539  0000BF                     _target:
   540                           	opt stack 0
   541  0000BF                     	ds	1
   542  0000C0                     _was_released:
   543                           	opt stack 0
   544  0000C0                     	ds	1
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	dataBANK0
   555  000060                     __pdataBANK0:
   556                           	opt stack 0
   557  000060                     _ImperialMarchNotes:
   558                           	opt stack 0
   559  000060                     	ds	72
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1l	equ	0xFE1
   568                           
   569                           	psect	dataBANK1
   570  000100                     __pdataBANK1:
   571                           	opt stack 0
   572  000100                     _ImperialMarchDurations:
   573                           	opt stack 0
   574  000100                     	ds	72
   575  000148                     _SuperMarioNotes:
   576                           	opt stack 0
   577  000148                     	ds	156
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           
   587                           	psect	dataBANK2
   588  000200                     __pdataBANK2:
   589                           	opt stack 0
   590  000200                     _SuperMarioDurations:
   591                           	opt stack 0
   592  000200                     	ds	156
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           postdec1	equ	0xFE5
   600                           fsr1l	equ	0xFE1
   601                           
   602                           	psect	cstackBANK0
   603  0000C1                     __pcstackBANK0:
   604                           	opt stack 0
   605  0000C1                     buzz@freq:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x0
   609  0000C1                     	ds	4
   610  0000C5                     buzz@duration:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x4
   614  0000C5                     	ds	2
   615  0000C7                     buzz@repeats:
   616                           	opt stack 0
   617                           
   618                           ; 4 bytes @ 0x6
   619  0000C7                     	ds	4
   620  0000CB                     buzz@i:
   621                           	opt stack 0
   622                           
   623                           ; 4 bytes @ 0xA
   624  0000CB                     	ds	4
   625  0000CF                     buzz@halfPeriod:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0xE
   629  0000CF                     	ds	2
   630  0000D1                     ??_starWars:
   631  0000D1                     ??_superMario:
   632                           
   633                           ; 1 bytes @ 0x10
   634  0000D1                     	ds	4
   635  0000D5                     _fsm$1614:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x14
   639  0000D5                     	ds	3
   640  0000D8                     fsm@i:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x17
   644  0000D8                     	ds	1
   645  0000D9                     fsm@i_968:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x18
   649  0000D9                     	ds	1
   650                           tblptru	equ	0xFF8
   651                           tblptrh	equ	0xFF7
   652                           tblptrl	equ	0xFF6
   653                           tablat	equ	0xFF5
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           postdec1	equ	0xFE5
   657                           fsr1l	equ	0xFE1
   658                           
   659                           	psect	cstackCOMRAM
   660  000001                     __pcstackCOMRAM:
   661                           	opt stack 0
   662  000001                     ??_interrupt_handler:
   663  000001                     
   664                           ; 1 bytes @ 0x0
   665  000001                     	ds	14
   666  00000F                     ??_OpenTimer0:
   667  00000F                     ?___lwdiv:
   668                           	opt stack 0
   669  00000F                     ?___lwmod:
   670                           	opt stack 0
   671  00000F                     ?___ftpack:
   672                           	opt stack 0
   673  00000F                     ?___lmul:
   674                           	opt stack 0
   675  00000F                     setAllLeds@value:
   676                           	opt stack 0
   677  00000F                     myDelay_ms@ms:
   678                           	opt stack 0
   679  00000F                     ___lwdiv@dividend:
   680                           	opt stack 0
   681  00000F                     ___lwmod@dividend:
   682                           	opt stack 0
   683  00000F                     ___ftpack@arg:
   684                           	opt stack 0
   685  00000F                     ___lmul@multiplier:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0xE
   689  00000F                     	ds	1
   690  000010                     setAllLeds@i:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0xF
   694  000010                     	ds	1
   695  000011                     ??_myDelay_ms:
   696  000011                     OpenTimer0@intEnable:
   697                           	opt stack 0
   698  000011                     ___lwdiv@divisor:
   699                           	opt stack 0
   700  000011                     ___lwmod@divisor:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x10
   704  000011                     	ds	1
   705  000012                     ___ftpack@exp:
   706                           	opt stack 0
   707  000012                     myDelay_ms@i:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x11
   711  000012                     	ds	1
   712  000013                     ___ftpack@sign:
   713                           	opt stack 0
   714  000013                     ___lwmod@counter:
   715                           	opt stack 0
   716  000013                     ___lwdiv@quotient:
   717                           	opt stack 0
   718  000013                     ___lmul@multiplicand:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x12
   722  000013                     	ds	1
   723  000014                     ??___ftpack:
   724                           
   725                           ; 1 bytes @ 0x13
   726  000014                     	ds	1
   727  000015                     ___lwdiv@counter:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x14
   731  000015                     	ds	2
   732  000017                     ?___altoft:
   733                           	opt stack 0
   734  000017                     ?___lbtoft:
   735                           	opt stack 0
   736  000017                     ?___lwtoft:
   737                           	opt stack 0
   738  000017                     ___lwtoft@c:
   739                           	opt stack 0
   740  000017                     ___lmul@product:
   741                           	opt stack 0
   742  000017                     ___altoft@c:
   743                           	opt stack 0
   744                           
   745                           ; 4 bytes @ 0x16
   746  000017                     	ds	3
   747  00001A                     ??_init:
   748  00001A                     ___lbtoft@c:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x19
   752  00001A                     	ds	1
   753  00001B                     ??___altoft:
   754  00001B                     ?_rand:
   755                           	opt stack 0
   756  00001B                     ?___aldiv:
   757                           	opt stack 0
   758  00001B                     ___aldiv@dividend:
   759                           	opt stack 0
   760                           
   761                           ; 4 bytes @ 0x1A
   762  00001B                     	ds	2
   763  00001D                     ?___awmod:
   764                           	opt stack 0
   765  00001D                     ?___awtoft:
   766                           	opt stack 0
   767  00001D                     ___awmod@dividend:
   768                           	opt stack 0
   769  00001D                     ___awtoft@c:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x1C
   773  00001D                     	ds	2
   774  00001F                     ___altoft@exp:
   775                           	opt stack 0
   776  00001F                     ___awmod@divisor:
   777                           	opt stack 0
   778  00001F                     ___aldiv@divisor:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x1E
   782  00001F                     	ds	1
   783  000020                     ___altoft@sign:
   784                           	opt stack 0
   785  000020                     ___awtoft@sign:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1F
   789  000020                     	ds	1
   790  000021                     ?___ftdiv:
   791                           	opt stack 0
   792  000021                     ?___ftmul:
   793                           	opt stack 0
   794  000021                     ___awmod@counter:
   795                           	opt stack 0
   796  000021                     ___ftdiv@f1:
   797                           	opt stack 0
   798  000021                     ___ftmul@f1:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x20
   802  000021                     	ds	1
   803  000022                     ___awmod@sign:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x21
   807  000022                     	ds	1
   808  000023                     ___aldiv@counter:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x22
   812  000023                     	ds	1
   813  000024                     ___aldiv@sign:
   814                           	opt stack 0
   815  000024                     ___ftdiv@f2:
   816                           	opt stack 0
   817  000024                     ___ftmul@f2:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x23
   821  000024                     	ds	1
   822  000025                     ___aldiv@quotient:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x24
   826  000025                     	ds	2
   827  000027                     ??___ftdiv:
   828  000027                     ??___ftmul:
   829                           
   830                           ; 1 bytes @ 0x26
   831  000027                     	ds	3
   832  00002A                     ___ftdiv@cntr:
   833                           	opt stack 0
   834  00002A                     ___ftmul@exp:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x29
   838  00002A                     	ds	1
   839  00002B                     ___ftdiv@f3:
   840                           	opt stack 0
   841  00002B                     ___ftmul@f3_as_product:
   842                           	opt stack 0
   843                           
   844                           ; 3 bytes @ 0x2A
   845  00002B                     	ds	3
   846  00002E                     ___ftdiv@exp:
   847                           	opt stack 0
   848  00002E                     ___ftmul@cntr:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x2D
   852  00002E                     	ds	1
   853  00002F                     ___ftdiv@sign:
   854                           	opt stack 0
   855  00002F                     ___ftmul@sign:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x2E
   859  00002F                     	ds	1
   860  000030                     ?___ftadd:
   861                           	opt stack 0
   862  000030                     ?___fttol:
   863                           	opt stack 0
   864  000030                     ___ftadd@f1:
   865                           	opt stack 0
   866  000030                     ___fttol@f1:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x2F
   870  000030                     	ds	3
   871  000033                     ___ftadd@f2:
   872                           	opt stack 0
   873                           
   874                           ; 3 bytes @ 0x32
   875  000033                     	ds	1
   876  000034                     ??___fttol:
   877                           
   878                           ; 1 bytes @ 0x33
   879  000034                     	ds	2
   880  000036                     ??___ftadd:
   881                           
   882                           ; 1 bytes @ 0x35
   883  000036                     	ds	3
   884  000039                     ___ftadd@sign:
   885                           	opt stack 0
   886  000039                     ___fttol@sign1:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x38
   890  000039                     	ds	1
   891  00003A                     ___ftadd@exp2:
   892                           	opt stack 0
   893  00003A                     ___fttol@lval:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x39
   897  00003A                     	ds	1
   898  00003B                     ___ftadd@exp1:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x3A
   902  00003B                     	ds	1
   903  00003C                     ___ftge@ff1:
   904                           	opt stack 0
   905                           
   906                           ; 3 bytes @ 0x3B
   907  00003C                     	ds	2
   908  00003E                     ___fttol@exp1:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x3D
   912  00003E                     	ds	1
   913  00003F                     myDelay_us@us:
   914                           	opt stack 0
   915  00003F                     ___ftge@ff2:
   916                           	opt stack 0
   917                           
   918                           ; 3 bytes @ 0x3E
   919  00003F                     	ds	2
   920  000041                     myDelay_us@i:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x40
   924  000041                     	ds	1
   925  000042                     ??___ftge:
   926                           
   927                           ; 1 bytes @ 0x41
   928  000042                     	ds	1
   929  000043                     ??_buzz:
   930  000043                     ??_go_through_cols:
   931  000043                     stepper_pulse@speed:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x42
   935  000043                     	ds	2
   936  000045                     superMario@index:
   937                           	opt stack 0
   938  000045                     starWars@index:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x44
   942  000045                     	ds	1
   943  000046                     ??_stepper_pulse:
   944  000046                     go_through_cols@offset:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x45
   948  000046                     	ds	1
   949  000047                     
   950                           ; 1 bytes @ 0x46
   951  000047                     	ds	1
   952  000048                     tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961                           ; 1 bytes @ 0x47
   962 ;;
   963 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   964 ;;
   965 ;; *************** function _main *****************
   966 ;; Defined at:
   967 ;;		line 60 in file "main.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;		None
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   981 ;;      Params:         0       0       0       0       0       0       0       0       0
   982 ;;      Locals:         0       0       0       0       0       0       0       0       0
   983 ;;      Temps:          0       0       0       0       0       0       0       0       0
   984 ;;      Totals:         0       0       0       0       0       0       0       0       0
   985 ;;Total ram usage:        0 bytes
   986 ;; Hardware stack levels required when called:    6
   987 ;; This function calls:
   988 ;;		_fsm
   989 ;;		_init
   990 ;;		_multiplex
   991 ;; This function is called by:
   992 ;;		Startup code after reset
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text0
   997  002618                     __ptext0:
   998                           	opt stack 0
   999  002618                     _main:
  1000                           	opt stack 25
  1001                           
  1002                           ;main.c: 61: init();
  1003                           
  1004                           ;incstack = 0
  1005  002618  EC92  F00E         	call	_init	;wreg free
  1006  00261C                     l2633:
  1007                           
  1008                           ;main.c: 63: fsm();
  1009  00261C  EC11  F008         	call	_fsm	;wreg free
  1010                           
  1011                           ;main.c: 64: multiplex();
  1012  002620  ECAE  F012         	call	_multiplex	;wreg free
  1013  002624  D7FB               	goto	l2633
  1014  002626                     __end_of_main:
  1015                           	opt stack 0
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           
  1025 ;; *************** function _multiplex *****************
  1026 ;; Defined at:
  1027 ;;		line 314 in file "main.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1041 ;;      Params:         0       0       0       0       0       0       0       0       0
  1042 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1044 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1045 ;;Total ram usage:        0 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; Hardware stack levels required when called:    3
  1048 ;; This function calls:
  1049 ;;		_go_through_cols
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text1
  1056  00255C                     __ptext1:
  1057                           	opt stack 0
  1058  00255C                     _multiplex:
  1059                           	opt stack 27
  1060                           
  1061                           ;main.c: 315: LATBbits.LATB1 = 0;
  1062                           
  1063                           ;incstack = 0
  1064  00255C  928A               	bcf	3978,1,c	;volatile
  1065                           
  1066                           ;main.c: 316: go_through_cols(0);
  1067  00255E  0E00               	movlw	0
  1068  002560  EC30  F010         	call	_go_through_cols
  1069                           
  1070                           ;main.c: 317: LATBbits.LATB1 = 1;
  1071  002564  828A               	bsf	3978,1,c	;volatile
  1072                           
  1073                           ;main.c: 319: LATBbits.LATB2 = 0;
  1074  002566  948A               	bcf	3978,2,c	;volatile
  1075                           
  1076                           ;main.c: 320: go_through_cols(4);
  1077  002568  0E04               	movlw	4
  1078  00256A  EC30  F010         	call	_go_through_cols
  1079                           
  1080                           ;main.c: 321: LATBbits.LATB2 = 1;
  1081  00256E  848A               	bsf	3978,2,c	;volatile
  1082                           
  1083                           ;main.c: 323: LATBbits.LATB3 = 0;
  1084  002570  968A               	bcf	3978,3,c	;volatile
  1085                           
  1086                           ;main.c: 324: go_through_cols(8);
  1087  002572  0E08               	movlw	8
  1088  002574  EC30  F010         	call	_go_through_cols
  1089                           
  1090                           ;main.c: 325: LATBbits.LATB3 = 1;
  1091  002578  868A               	bsf	3978,3,c	;volatile
  1092                           
  1093                           ;main.c: 327: LATBbits.LATB4 = 0;
  1094  00257A  988A               	bcf	3978,4,c	;volatile
  1095                           
  1096                           ;main.c: 328: go_through_cols(12);
  1097  00257C  0E0C               	movlw	12
  1098  00257E  EC30  F010         	call	_go_through_cols
  1099                           
  1100                           ;main.c: 329: LATBbits.LATB4 = 1;
  1101  002582  888A               	bsf	3978,4,c	;volatile
  1102  002584  0012               	return		;funcret
  1103  002586                     __end_of_multiplex:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           tblptrl	equ	0xFF6
  1108                           tablat	equ	0xFF5
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           postdec1	equ	0xFE5
  1112                           fsr1l	equ	0xFE1
  1113                           
  1114 ;; *************** function _go_through_cols *****************
  1115 ;; Defined at:
  1116 ;;		line 300 in file "main.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  offset          1    wreg     unsigned char 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  offset          1   69[COMRAM] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0
  1131 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1132 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1133 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1134 ;;Total ram usage:        4 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    2
  1137 ;; This function calls:
  1138 ;;		_myDelay_us
  1139 ;; This function is called by:
  1140 ;;		_multiplex
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text2
  1145  002060                     __ptext2:
  1146                           	opt stack 0
  1147  002060                     _go_through_cols:
  1148                           	opt stack 27
  1149                           
  1150                           ;incstack = 0
  1151                           ;go_through_cols@offset stored from wreg
  1152  002060  6E46               	movwf	go_through_cols@offset,c
  1153                           
  1154                           ;main.c: 301: if (LEDs[offset]==1) LATBbits.LATB5 =1;
  1155  002062  5046               	movf	go_through_cols@offset,w,c
  1156  002064  0D01               	mullw	1
  1157  002066  0EA8               	movlw	low _LEDs
  1158  002068  24F3               	addwf	prodl,w,c
  1159  00206A  6ED9               	movwf	fsr2l,c
  1160  00206C  0E00               	movlw	high _LEDs
  1161  00206E  20F4               	addwfc	prodh,w,c
  1162  002070  6EDA               	movwf	fsr2h,c
  1163  002072  04DE               	decf	postinc2,w,c
  1164  002074  B4D8               	btfsc	status,2,c
  1165  002076  8A8A               	bsf	3978,5,c	;volatile
  1166                           
  1167                           ;main.c: 302: if (LEDs[offset+1]==1) LATBbits.LATB6 =1;
  1168  002078  5046               	movf	go_through_cols@offset,w,c
  1169  00207A  6E43               	movwf	??_go_through_cols& (0+255),c
  1170  00207C  6A44               	clrf	(??_go_through_cols+1)& (0+255),c
  1171  00207E  0E01               	movlw	1
  1172  002080  2643               	addwf	??_go_through_cols,f,c
  1173  002082  0E00               	movlw	0
  1174  002084  2244               	addwfc	??_go_through_cols+1,f,c
  1175  002086  0EA8               	movlw	low _LEDs
  1176  002088  2443               	addwf	??_go_through_cols,w,c
  1177  00208A  6ED9               	movwf	fsr2l,c
  1178  00208C  0E00               	movlw	high _LEDs
  1179  00208E  2044               	addwfc	??_go_through_cols+1,w,c
  1180  002090  6EDA               	movwf	fsr2h,c
  1181  002092  04DE               	decf	postinc2,w,c
  1182  002094  B4D8               	btfsc	status,2,c
  1183  002096  8C8A               	bsf	3978,6,c	;volatile
  1184                           
  1185                           ;main.c: 303: if (LEDs[offset+2]==1) LATBbits.LATB7 =1;
  1186  002098  5046               	movf	go_through_cols@offset,w,c
  1187  00209A  6E43               	movwf	??_go_through_cols& (0+255),c
  1188  00209C  6A44               	clrf	(??_go_through_cols+1)& (0+255),c
  1189  00209E  0E02               	movlw	2
  1190  0020A0  2643               	addwf	??_go_through_cols,f,c
  1191  0020A2  0E00               	movlw	0
  1192  0020A4  2244               	addwfc	??_go_through_cols+1,f,c
  1193  0020A6  0EA8               	movlw	low _LEDs
  1194  0020A8  2443               	addwf	??_go_through_cols,w,c
  1195  0020AA  6ED9               	movwf	fsr2l,c
  1196  0020AC  0E00               	movlw	high _LEDs
  1197  0020AE  2044               	addwfc	??_go_through_cols+1,w,c
  1198  0020B0  6EDA               	movwf	fsr2h,c
  1199  0020B2  04DE               	decf	postinc2,w,c
  1200  0020B4  B4D8               	btfsc	status,2,c
  1201  0020B6  8E8A               	bsf	3978,7,c	;volatile
  1202                           
  1203                           ;main.c: 304: if (LEDs[offset+3]==1) LATAbits.LATA0 =1;
  1204  0020B8  5046               	movf	go_through_cols@offset,w,c
  1205  0020BA  6E43               	movwf	??_go_through_cols& (0+255),c
  1206  0020BC  6A44               	clrf	(??_go_through_cols+1)& (0+255),c
  1207  0020BE  0E03               	movlw	3
  1208  0020C0  2643               	addwf	??_go_through_cols,f,c
  1209  0020C2  0E00               	movlw	0
  1210  0020C4  2244               	addwfc	??_go_through_cols+1,f,c
  1211  0020C6  0EA8               	movlw	low _LEDs
  1212  0020C8  2443               	addwf	??_go_through_cols,w,c
  1213  0020CA  6ED9               	movwf	fsr2l,c
  1214  0020CC  0E00               	movlw	high _LEDs
  1215  0020CE  2044               	addwfc	??_go_through_cols+1,w,c
  1216  0020D0  6EDA               	movwf	fsr2h,c
  1217  0020D2  04DE               	decf	postinc2,w,c
  1218  0020D4  B4D8               	btfsc	status,2,c
  1219  0020D6  8089               	bsf	3977,0,c	;volatile
  1220                           
  1221                           ;main.c: 306: myDelay_us(100);
  1222  0020D8  0E00               	movlw	0
  1223  0020DA  6E40               	movwf	myDelay_us@us+1,c
  1224  0020DC  0E64               	movlw	100
  1225  0020DE  6E3F               	movwf	myDelay_us@us,c
  1226  0020E0  ECE8  F012         	call	_myDelay_us	;wreg free
  1227                           
  1228                           ;main.c: 308: LATBbits.LATB5 = 0;
  1229  0020E4  9A8A               	bcf	3978,5,c	;volatile
  1230                           
  1231                           ;main.c: 309: LATBbits.LATB6 = 0;
  1232  0020E6  9C8A               	bcf	3978,6,c	;volatile
  1233                           
  1234                           ;main.c: 310: LATBbits.LATB7 = 0;
  1235  0020E8  9E8A               	bcf	3978,7,c	;volatile
  1236                           
  1237                           ;main.c: 311: LATAbits.LATA0 = 0;
  1238  0020EA  9089               	bcf	3977,0,c	;volatile
  1239  0020EC  0012               	return		;funcret
  1240  0020EE                     __end_of_go_through_cols:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           prodh	equ	0xFF4
  1247                           prodl	equ	0xFF3
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec1	equ	0xFE5
  1251                           fsr1l	equ	0xFE1
  1252                           postinc2	equ	0xFDE
  1253                           fsr2h	equ	0xFDA
  1254                           fsr2l	equ	0xFD9
  1255                           status	equ	0xFD8
  1256                           
  1257 ;; *************** function _init *****************
  1258 ;; Defined at:
  1259 ;;		line 72 in file "main.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1275 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1276 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1277 ;;Total ram usage:        3 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    3
  1280 ;; This function calls:
  1281 ;;		___lwtoft
  1282 ;;		_hardware_init
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288                           	psect	text3
  1289  001D24                     __ptext3:
  1290                           	opt stack 0
  1291  001D24                     _init:
  1292                           	opt stack 27
  1293                           
  1294                           ;main.c: 73: TRISCbits.TRISC6 = 0;
  1295                           
  1296                           ;incstack = 0
  1297  001D24  9C94               	bcf	3988,6,c	;volatile
  1298                           
  1299                           ;main.c: 74: TRISCbits.TRISC7 = 0;
  1300  001D26  9E94               	bcf	3988,7,c	;volatile
  1301                           
  1302                           ;main.c: 75: TRISBbits.TRISB0 = 1;
  1303  001D28  8093               	bsf	3987,0,c	;volatile
  1304                           
  1305                           ;main.c: 76: TRISBbits.TRISB1 = 0;
  1306  001D2A  9293               	bcf	3987,1,c	;volatile
  1307                           
  1308                           ;main.c: 77: TRISBbits.TRISB2 = 0;
  1309  001D2C  9493               	bcf	3987,2,c	;volatile
  1310                           
  1311                           ;main.c: 78: TRISBbits.TRISB3 = 0;
  1312  001D2E  9693               	bcf	3987,3,c	;volatile
  1313                           
  1314                           ;main.c: 79: TRISBbits.TRISB4 = 0;
  1315  001D30  9893               	bcf	3987,4,c	;volatile
  1316                           
  1317                           ;main.c: 80: TRISBbits.TRISB5 = 0;
  1318  001D32  9A93               	bcf	3987,5,c	;volatile
  1319                           
  1320                           ;main.c: 81: TRISBbits.TRISB6 = 0;
  1321  001D34  9C93               	bcf	3987,6,c	;volatile
  1322                           
  1323                           ;main.c: 82: TRISBbits.TRISB7 = 0;
  1324  001D36  9E93               	bcf	3987,7,c	;volatile
  1325                           
  1326                           ;main.c: 83: TRISAbits.TRISA0 = 0;
  1327  001D38  9092               	bcf	3986,0,c	;volatile
  1328                           
  1329                           ;main.c: 84: TRISAbits.TRISA1 = 0;
  1330  001D3A  9292               	bcf	3986,1,c	;volatile
  1331                           
  1332                           ;main.c: 85: TRISAbits.TRISA3 = 0;
  1333  001D3C  9692               	bcf	3986,3,c	;volatile
  1334                           
  1335                           ;main.c: 86: TRISAbits.TRISA4 = 1;
  1336  001D3E  8892               	bsf	3986,4,c	;volatile
  1337                           
  1338                           ;main.c: 87: TRISAbits.TRISA5 = 1;
  1339  001D40  8A92               	bsf	3986,5,c	;volatile
  1340                           
  1341                           ;main.c: 89: LATCbits.LATC6 = 0;
  1342  001D42  9C8B               	bcf	3979,6,c	;volatile
  1343                           
  1344                           ;main.c: 90: LATCbits.LATC7 = 0;
  1345  001D44  9E8B               	bcf	3979,7,c	;volatile
  1346                           
  1347                           ;main.c: 91: LATBbits.LATB1 = 0;
  1348  001D46  928A               	bcf	3978,1,c	;volatile
  1349                           
  1350                           ;main.c: 92: LATBbits.LATB2 = 0;
  1351  001D48  948A               	bcf	3978,2,c	;volatile
  1352                           
  1353                           ;main.c: 93: LATBbits.LATB3 = 0;
  1354  001D4A  968A               	bcf	3978,3,c	;volatile
  1355                           
  1356                           ;main.c: 94: LATBbits.LATB4 = 0;
  1357  001D4C  988A               	bcf	3978,4,c	;volatile
  1358                           
  1359                           ;main.c: 95: LATBbits.LATB5 = 0;
  1360  001D4E  9A8A               	bcf	3978,5,c	;volatile
  1361                           
  1362                           ;main.c: 96: LATBbits.LATB6 = 0;
  1363  001D50  9C8A               	bcf	3978,6,c	;volatile
  1364                           
  1365                           ;main.c: 97: LATBbits.LATB7 = 0;
  1366  001D52  9E8A               	bcf	3978,7,c	;volatile
  1367                           
  1368                           ;main.c: 98: LATAbits.LATA0 = 0;
  1369  001D54  9089               	bcf	3977,0,c	;volatile
  1370                           
  1371                           ;main.c: 99: LATAbits.LATA1 = 1;
  1372  001D56  8289               	bsf	3977,1,c	;volatile
  1373                           
  1374                           ;main.c: 100: LATAbits.LATA3 = 0;
  1375  001D58  9689               	bcf	3977,3,c	;volatile
  1376                           
  1377                           ;main.c: 102: current_state = CALIBRATION;
  1378  001D5A  0E00               	movlw	0
  1379  001D5C  0100               	movlb	0	; () banked
  1380  001D5E  6FBE               	movwf	_current_state& (0+255),b
  1381                           
  1382                           ;main.c: 103: state_to_recover = CALIBRATION;
  1383  001D60  0E00               	movlw	0
  1384  001D62  6E4E               	movwf	_state_to_recover,c
  1385                           
  1386                           ;main.c: 105: note_new = 0;
  1387  001D64  0E00               	movlw	0
  1388  001D66  0100               	movlb	0	; () banked
  1389  001D68  6FB9               	movwf	(_note_new+1)& (0+255),b
  1390  001D6A  0E00               	movlw	0
  1391  001D6C  6FB8               	movwf	_note_new& (0+255),b
  1392                           
  1393                           ;main.c: 106: note_win = 0;
  1394  001D6E  0E00               	movlw	0
  1395  001D70  0100               	movlb	0	; () banked
  1396  001D72  6FBB               	movwf	(_note_win+1)& (0+255),b
  1397  001D74  0E00               	movlw	0
  1398  001D76  6FBA               	movwf	_note_win& (0+255),b
  1399                           
  1400                           ;main.c: 107: hard_speed = 1.0;
  1401  001D78  0E00               	movlw	0
  1402  001D7A  0100               	movlb	0	; () banked
  1403  001D7C  6FDA               	movwf	_hard_speed& (0+255),b
  1404  001D7E  0E80               	movlw	128
  1405  001D80  0100               	movlb	0	; () banked
  1406  001D82  6FDB               	movwf	(_hard_speed+1)& (0+255),b
  1407  001D84  0E3F               	movlw	63
  1408  001D86  0100               	movlb	0	; () banked
  1409  001D88  6FDC               	movwf	(_hard_speed+2)& (0+255),b
  1410                           
  1411                           ;main.c: 108: hard_speed_timer = 500;
  1412  001D8A  0E01               	movlw	1
  1413  001D8C  0100               	movlb	0	; () banked
  1414  001D8E  6FE1               	movwf	(_hard_speed_timer+1)& (0+255),b
  1415  001D90  0EF4               	movlw	244
  1416  001D92  6FE0               	movwf	_hard_speed_timer& (0+255),b
  1417                           
  1418                           ;main.c: 109: stepper_direction = 1;
  1419  001D94  0E00               	movlw	0
  1420  001D96  6E50               	movwf	_stepper_direction+1,c
  1421  001D98  0E01               	movlw	1
  1422  001D9A  6E4F               	movwf	_stepper_direction,c
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;main.c: 110: steps_per_led = total_steps/16;
  1426  001D9C  0E1F               	movlw	low _total_steps
  1427  001D9E  6EF6               	movwf	tblptrl,c
  1428  001DA0                     	if	1	;There is more than 1 active tblptr byte
  1429  001DA0  0E10               	movlw	high _total_steps
  1430  001DA2  6EF7               	movwf	tblptrh,c
  1431  001DA4                     	endif
  1432  001DA4                     	if	0	;There are less than 3 active tblptr bytes
  1433  001DA4                     	endif
  1434  001DA4  0009               	tblrd		*+
  1435  001DA6  CFF5 F01A          	movff	tablat,??_init
  1436  001DAA  0009               	tblrd		*+
  1437  001DAC  CFF5 F01B          	movff	tablat,??_init+1
  1438  001DB0  0E04               	movlw	4
  1439  001DB2  6E1C               	movwf	(??_init+2)& (0+255),c
  1440  001DB4                     u2115:
  1441  001DB4  90D8               	bcf	status,0,c
  1442  001DB6  321B               	rrcf	??_init+1,f,c
  1443  001DB8  321A               	rrcf	??_init,f,c
  1444  001DBA  2E1C               	decfsz	(??_init+2)& (0+255),f,c
  1445  001DBC  D7FB               	goto	u2115
  1446  001DBE  C01A  F017         	movff	??_init,___lwtoft@c
  1447  001DC2  C01B  F018         	movff	??_init+1,___lwtoft@c+1
  1448  001DC6  ECD6  F012         	call	___lwtoft	;wreg free
  1449  001DCA  C017  F0DD         	movff	?___lwtoft,_steps_per_led
  1450  001DCE  C018  F0DE         	movff	?___lwtoft+1,_steps_per_led+1
  1451  001DD2  C019  F0DF         	movff	?___lwtoft+2,_steps_per_led+2
  1452                           
  1453                           ;main.c: 111: hardware_init();
  1454  001DD6  EC13  F013         	call	_hardware_init	;wreg free
  1455                           
  1456                           ;main.c: 112: prev_hall = PORTAbits.RA5;
  1457  001DDA  0E00               	movlw	0
  1458  001DDC  BA80               	btfsc	3968,5,c	;volatile
  1459  001DDE  0E01               	movlw	1
  1460  001DE0  0100               	movlb	0	; () banked
  1461  001DE2  6FE2               	movwf	_prev_hall& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464  001DE4  0012               	return		;funcret
  1465  001DE6                     __end_of_init:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           prodh	equ	0xFF4
  1472                           prodl	equ	0xFF3
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           postinc2	equ	0xFDE
  1478                           fsr2h	equ	0xFDA
  1479                           fsr2l	equ	0xFD9
  1480                           status	equ	0xFD8
  1481                           
  1482 ;; *************** function _hardware_init *****************
  1483 ;; Defined at:
  1484 ;;		line 39 in file "config.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;		None
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1498 ;;      Params:         0       0       0       0       0       0       0       0       0
  1499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1501 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1502 ;;Total ram usage:        0 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    2
  1505 ;; This function calls:
  1506 ;;		_OpenTimer0
  1507 ;; This function is called by:
  1508 ;;		_init
  1509 ;;		_initBuzz
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text4
  1514  002626                     __ptext4:
  1515                           	opt stack 0
  1516  002626                     _hardware_init:
  1517                           	opt stack 27
  1518                           
  1519                           ;config.c: 40: ADCON1 = 0x0F;
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;incstack = 0
  1523  002626  0E0F               	movlw	15
  1524  002628  6EC1               	movwf	4033,c	;volatile
  1525                           
  1526                           ;config.c: 50: OpenTimer0(0);
  1527  00262A  0E00               	movlw	0
  1528  00262C  ECBB  F011         	call	_OpenTimer0
  1529  002630  0012               	return		;funcret
  1530  002632                     __end_of_hardware_init:
  1531                           	opt stack 0
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           prodh	equ	0xFF4
  1537                           prodl	equ	0xFF3
  1538                           postinc0	equ	0xFEE
  1539                           wreg	equ	0xFE8
  1540                           postdec1	equ	0xFE5
  1541                           fsr1l	equ	0xFE1
  1542                           postinc2	equ	0xFDE
  1543                           fsr2h	equ	0xFDA
  1544                           fsr2l	equ	0xFD9
  1545                           status	equ	0xFD8
  1546                           
  1547 ;; *************** function _OpenTimer0 *****************
  1548 ;; Defined at:
  1549 ;;		line 97 in file "config.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  intEnable       1    wreg     unsigned char 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  intEnable       1   16[COMRAM] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg, status,2, status,0
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1563 ;;      Params:         0       0       0       0       0       0       0       0       0
  1564 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1565 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1566 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1567 ;;Total ram usage:        3 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    1
  1570 ;; This function calls:
  1571 ;;		Nothing
  1572 ;; This function is called by:
  1573 ;;		_hardware_init
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text5
  1578  002376                     __ptext5:
  1579                           	opt stack 0
  1580  002376                     _OpenTimer0:
  1581                           	opt stack 27
  1582                           
  1583                           ;incstack = 0
  1584                           ;OpenTimer0@intEnable stored from wreg
  1585  002376  6E11               	movwf	OpenTimer0@intEnable,c
  1586                           
  1587                           ;config.c: 98: T0CONbits.T08BIT = 1;
  1588  002378  8CD5               	bsf	4053,6,c	;volatile
  1589                           
  1590                           ;config.c: 99: T0CONbits.T0CS = 0;
  1591  00237A  9AD5               	bcf	4053,5,c	;volatile
  1592                           
  1593                           ;config.c: 100: T0CONbits.PSA = 0;
  1594  00237C  96D5               	bcf	4053,3,c	;volatile
  1595                           
  1596                           ;config.c: 101: T0CONbits.T0PS = 0b101;
  1597  00237E  50D5               	movf	4053,w,c	;volatile
  1598  002380  0BF8               	andlw	-8
  1599  002382  0905               	iorlw	5
  1600  002384  6ED5               	movwf	4053,c	;volatile
  1601                           
  1602                           ;config.c: 102: TMR0H = 0;
  1603  002386  0E00               	movlw	0
  1604  002388  6ED7               	movwf	4055,c	;volatile
  1605                           
  1606                           ;config.c: 103: TMR0L = 69;
  1607  00238A  0E45               	movlw	69
  1608  00238C  6ED6               	movwf	4054,c	;volatile
  1609                           
  1610                           ;config.c: 105: INTCONbits.TMR0IE = intEnable & 0x01;
  1611  00238E  C011  F00F         	movff	OpenTimer0@intEnable,??_OpenTimer0
  1612  002392  0E01               	movlw	1
  1613  002394  160F               	andwf	??_OpenTimer0,f,c
  1614  002396  3A0F               	swapf	??_OpenTimer0,f,c
  1615  002398  460F               	rlncf	??_OpenTimer0,f,c
  1616  00239A  50F2               	movf	intcon,w,c	;volatile
  1617  00239C  180F               	xorwf	??_OpenTimer0,w,c
  1618  00239E  0BDF               	andlw	-33
  1619  0023A0  180F               	xorwf	??_OpenTimer0,w,c
  1620  0023A2  6EF2               	movwf	intcon,c	;volatile
  1621                           
  1622                           ;config.c: 106: INTCONbits.GIE = (intEnable & 0x01) | INTCONbits.GIE;
  1623  0023A4  AEF2               	btfss	intcon,7,c	;volatile
  1624  0023A6  D003               	goto	u1570
  1625  0023A8  6A0F               	clrf	??_OpenTimer0& (0+255),c
  1626  0023AA  2A0F               	incf	??_OpenTimer0& (0+255),f,c
  1627  0023AC  D001               	goto	u1578
  1628  0023AE                     u1570:
  1629  0023AE  6A0F               	clrf	??_OpenTimer0& (0+255),c
  1630  0023B0                     u1578:
  1631  0023B0  5011               	movf	OpenTimer0@intEnable,w,c
  1632  0023B2  0B01               	andlw	1
  1633  0023B4  100F               	iorwf	??_OpenTimer0,w,c
  1634  0023B6  6E10               	movwf	(??_OpenTimer0+1)& (0+255),c
  1635  0023B8  3210               	rrcf	??_OpenTimer0+1,f,c
  1636  0023BA  3210               	rrcf	??_OpenTimer0+1,f,c
  1637  0023BC  50F2               	movf	intcon,w,c	;volatile
  1638  0023BE  1810               	xorwf	??_OpenTimer0+1,w,c
  1639  0023C0  0B7F               	andlw	-129
  1640  0023C2  1810               	xorwf	??_OpenTimer0+1,w,c
  1641  0023C4  6EF2               	movwf	intcon,c	;volatile
  1642                           
  1643                           ;config.c: 107: INTCONbits.TMR0IF = 0;
  1644  0023C6  94F2               	bcf	intcon,2,c	;volatile
  1645  0023C8  0012               	return		;funcret
  1646  0023CA                     __end_of_OpenTimer0:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           prodh	equ	0xFF4
  1653                           prodl	equ	0xFF3
  1654                           intcon	equ	0xFF2
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           postinc2	equ	0xFDE
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function ___lwtoft *****************
  1665 ;; Defined at:
  1666 ;;		line 28 in file "/Applications/microchip/xc8/v1.36/sources/common/lwtoft.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  c               2   22[COMRAM] unsigned int 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  3   22[COMRAM] float 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1680 ;;      Params:         3       0       0       0       0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1682 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1683 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1684 ;;Total ram usage:        3 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    2
  1687 ;; This function calls:
  1688 ;;		___ftpack
  1689 ;; This function is called by:
  1690 ;;		_init
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text6
  1695  0025AC                     __ptext6:
  1696                           	opt stack 0
  1697  0025AC                     ___lwtoft:
  1698                           	opt stack 27
  1699                           
  1700                           ;incstack = 0
  1701  0025AC  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
  1702  0025B0  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
  1703  0025B4  6A11               	clrf	___ftpack@arg+2,c
  1704  0025B6  0E8E               	movlw	142
  1705  0025B8  6E12               	movwf	___ftpack@exp,c
  1706  0025BA  0E00               	movlw	0
  1707  0025BC  6E13               	movwf	___ftpack@sign,c
  1708  0025BE  ECF3  F00E         	call	___ftpack	;wreg free
  1709  0025C2  C00F  F017         	movff	?___ftpack,?___lwtoft
  1710  0025C6  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  1711  0025CA  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  1712  0025CE  0012               	return	
  1713  0025D0                     __end_of___lwtoft:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           prodh	equ	0xFF4
  1720                           prodl	equ	0xFF3
  1721                           intcon	equ	0xFF2
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1l	equ	0xFE1
  1726                           postinc2	equ	0xFDE
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _fsm *****************
  1732 ;; Defined at:
  1733 ;;		line 115 in file "main.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  i               1   24[BANK0 ] unsigned char 
  1738 ;;  i               1   23[BANK0 ] unsigned char 
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0
  1749 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1751 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1752 ;;Total ram usage:        5 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    5
  1755 ;; This function calls:
  1756 ;;		___awmod
  1757 ;;		___awtoft
  1758 ;;		___ftadd
  1759 ;;		___ftdiv
  1760 ;;		___ftge
  1761 ;;		___ftmul
  1762 ;;		___lbtoft
  1763 ;;		___lwmod
  1764 ;;		_buzz
  1765 ;;		_rand
  1766 ;;		_setAllLeds
  1767 ;;		_starWars
  1768 ;;		_stepper_pulse
  1769 ;;		_superMario
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text7
  1776  001022                     __ptext7:
  1777                           	opt stack 0
  1778  001022                     _fsm:
  1779                           	opt stack 25
  1780                           
  1781                           ;main.c: 117: switch (current_state) {
  1782                           
  1783                           ;incstack = 0
  1784  001022  D23E               	goto	l2629
  1785  001024                     l2471:
  1786                           
  1787                           ;main.c: 120: stepper_pulse(1);
  1788  001024  0E00               	movlw	0
  1789  001026  6E43               	movwf	stepper_pulse@speed,c
  1790  001028  0E80               	movlw	128
  1791  00102A  6E44               	movwf	stepper_pulse@speed+1,c
  1792  00102C  0E3F               	movlw	63
  1793  00102E  6E45               	movwf	stepper_pulse@speed+2,c
  1794  001030  ECBB  F00D         	call	_stepper_pulse	;wreg free
  1795                           
  1796                           ;main.c: 123: if (PORTAbits.RA5 != prev_hall) {
  1797  001034  AA80               	btfss	3968,5,c	;volatile
  1798  001036  D002               	goto	u2440
  1799  001038  0E01               	movlw	1
  1800  00103A  D001               	goto	u2446
  1801  00103C                     u2440:
  1802  00103C  0E00               	movlw	0
  1803  00103E                     u2446:
  1804  00103E  0100               	movlb	0	; () banked
  1805  001040  19E2               	xorwf	_prev_hall& (0+255),w,b
  1806  001042  B4D8               	btfsc	status,2,c
  1807  001044  0012               	return	
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 125: position = 0;
  1811  001046  0E00               	movlw	0
  1812  001048  0100               	movlb	0	; () banked
  1813  00104A  6FBD               	movwf	(_position+1)& (0+255),b
  1814  00104C  0E00               	movlw	0
  1815  00104E  6FBC               	movwf	_position& (0+255),b
  1816                           
  1817                           ;main.c: 126: current_state = NEW_GAME;
  1818  001050  0E01               	movlw	1
  1819  001052  0100               	movlb	0	; () banked
  1820  001054  6FBE               	movwf	_current_state& (0+255),b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;main.c: 127: }
  1824                           ;main.c: 129: break;
  1825  001056  0012               	return	
  1826  001058                     l2477:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 133: setAllLeds(0);
  1830  001058  0E00               	movlw	0
  1831  00105A  ECC3  F012         	call	_setAllLeds
  1832                           
  1833                           ;main.c: 135: note_new%=last_new_note;
  1834  00105E  C0B8  F00F         	movff	_note_new,___lwmod@dividend
  1835  001062  C0B9  F010         	movff	_note_new+1,___lwmod@dividend+1
  1836  001066  0E1B               	movlw	low _last_new_note
  1837  001068  6EF6               	movwf	tblptrl,c
  1838  00106A                     	if	1	;There is more than 1 active tblptr byte
  1839  00106A  0E10               	movlw	high _last_new_note
  1840  00106C  6EF7               	movwf	tblptrh,c
  1841  00106E                     	endif
  1842  00106E                     	if	0	;There are less than 3 active tblptr bytes
  1843  00106E                     	endif
  1844  00106E  0009               	tblrd		*+
  1845  001070  CFF5 F011          	movff	tablat,___lwmod@divisor
  1846  001074  000A               	tblrd		*-
  1847  001076  CFF5 F012          	movff	tablat,___lwmod@divisor+1
  1848  00107A  EC5B  F012         	call	___lwmod	;wreg free
  1849  00107E  C00F  F0B8         	movff	?___lwmod,_note_new
  1850  001082  C010  F0B9         	movff	?___lwmod+1,_note_new+1
  1851                           
  1852                           ;main.c: 136: was_released = 0;
  1853  001086  0E00               	movlw	0
  1854  001088  0100               	movlb	0	; () banked
  1855  00108A  6FC0               	movwf	_was_released& (0+255),b
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 137: note_win = 0;
  1859  00108C  0E00               	movlw	0
  1860  00108E  0100               	movlb	0	; () banked
  1861  001090  6FBB               	movwf	(_note_win+1)& (0+255),b
  1862  001092  0E00               	movlw	0
  1863  001094  6FBA               	movwf	_note_win& (0+255),b
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;main.c: 138: LATAbits.LATA1 = 1;
  1867  001096  8289               	bsf	3977,1,c	;volatile
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 139: starWars(note_new);
  1871  001098  C0B8  F045         	movff	_note_new,starWars@index
  1872  00109C  C0B9  F046         	movff	_note_new+1,starWars@index+1
  1873  0010A0  EC60  F011         	call	_starWars	;wreg free
  1874                           
  1875                           ;main.c: 140: note_new++;
  1876  0010A4  0100               	movlb	0	; () banked
  1877  0010A6  4BB8               	infsnz	_note_new& (0+255),f,b
  1878  0010A8  2BB9               	incf	(_note_new+1)& (0+255),f,b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;main.c: 143: if (PORTAbits.RA4 == 0 && PORTBbits.RB0 == 0) {
  1882  0010AA  A880               	btfss	3968,4,c	;volatile
  1883                           
  1884                           ; BSR set to: 0
  1885  0010AC  B081               	btfsc	3969,0,c	;volatile
  1886  0010AE  D007               	goto	l160
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 144: current_state = MOVE_HARD;
  1890  0010B0  0E03               	movlw	3
  1891  0010B2  0100               	movlb	0	; () banked
  1892  0010B4  6FBE               	movwf	_current_state& (0+255),b
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 145: setAllLeds(0);
  1896  0010B6  0E00               	movlw	0
  1897  0010B8  ECC3  F012         	call	_setAllLeds
  1898                           
  1899                           ;main.c: 146: }
  1900  0010BC  0012               	return	
  1901  0010BE                     l160:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 147: else
  1905                           ;main.c: 148: if (PORTAbits.RA4 == 0 && PORTBbits.RB0 == 1) {
  1906  0010BE  B880               	btfsc	3968,4,c	;volatile
  1907  0010C0  0012               	return	
  1908                           
  1909                           ; BSR set to: 0
  1910  0010C2  A081               	btfss	3969,0,c	;volatile
  1911  0010C4  0012               	return	
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;main.c: 149: current_state = MOVE_EASY;
  1915  0010C6  0E02               	movlw	2
  1916  0010C8  0100               	movlb	0	; () banked
  1917  0010CA  6FBE               	movwf	_current_state& (0+255),b
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 150: setAllLeds(0);
  1921  0010CC  0E00               	movlw	0
  1922  0010CE  ECC3  F012         	call	_setAllLeds
  1923                           
  1924                           ;main.c: 151: }
  1925                           ;main.c: 153: break;
  1926  0010D2  0012               	return	
  1927  0010D4                     l2505:
  1928                           
  1929                           ;main.c: 157: stepper_pulse(1);
  1930  0010D4  0E00               	movlw	0
  1931  0010D6  6E43               	movwf	stepper_pulse@speed,c
  1932  0010D8  0E80               	movlw	128
  1933  0010DA  6E44               	movwf	stepper_pulse@speed+1,c
  1934  0010DC  0E3F               	movlw	63
  1935  0010DE  6E45               	movwf	stepper_pulse@speed+2,c
  1936  0010E0  ECBB  F00D         	call	_stepper_pulse	;wreg free
  1937                           
  1938                           ;main.c: 159: if (PORTAbits.RA4 == 0) {
  1939  0010E4  B880               	btfsc	3968,4,c	;volatile
  1940  0010E6  D008               	goto	l2513
  1941                           
  1942                           ;main.c: 160: if (was_released == 1)
  1943  0010E8  0100               	movlb	0	; () banked
  1944  0010EA  05C0               	decf	_was_released& (0+255),w,b
  1945  0010EC  A4D8               	btfss	status,2,c
  1946  0010EE  0012               	return	
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;main.c: 161: current_state = FIRE;
  1950  0010F0  0E05               	movlw	5
  1951  0010F2  0100               	movlb	0	; () banked
  1952  0010F4  6FBE               	movwf	_current_state& (0+255),b
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;main.c: 162: }
  1956  0010F6  0012               	return	
  1957  0010F8                     l2513:
  1958                           
  1959                           ;main.c: 163: else {
  1960                           ;main.c: 164: if (was_released == 0)
  1961  0010F8  0100               	movlb	0	; () banked
  1962  0010FA  51C0               	movf	_was_released& (0+255),w,b
  1963  0010FC  0100               	movlb	0	; () banked
  1964  0010FE  A4D8               	btfss	status,2,c
  1965  001100  0012               	return	
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 165: current_state = RELEASE;
  1969  001102  0E04               	movlw	4
  1970  001104  0100               	movlb	0	; () banked
  1971  001106  6FBE               	movwf	_current_state& (0+255),b
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 166: }
  1975                           ;main.c: 168: break;
  1976                           
  1977                           ; BSR set to: 0
  1978  001108  0012               	return	
  1979  00110A                     l2517:
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;main.c: 172: stepper_pulse(hard_speed);
  1983  00110A  C0DA  F043         	movff	_hard_speed,stepper_pulse@speed
  1984  00110E  C0DB  F044         	movff	_hard_speed+1,stepper_pulse@speed+1
  1985  001112  C0DC  F045         	movff	_hard_speed+2,stepper_pulse@speed+2
  1986  001116  ECBB  F00D         	call	_stepper_pulse	;wreg free
  1987                           
  1988                           ;main.c: 173: hard_speed_timer--;
  1989  00111A  0100               	movlb	0	; () banked
  1990  00111C  07E0               	decf	_hard_speed_timer& (0+255),f,b
  1991  00111E  A0D8               	btfss	status,0,c
  1992  001120  07E1               	decf	(_hard_speed_timer+1)& (0+255),f,b
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 175: if (was_released == 1) {
  1996  001122  0100               	movlb	0	; () banked
  1997  001124  05C0               	decf	_was_released& (0+255),w,b
  1998  001126  A4D8               	btfss	status,2,c
  1999  001128  D012               	goto	l169
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;main.c: 176: if (PORTAbits.RA4 == 0) {
  2003  00112A  B880               	btfsc	3968,4,c	;volatile
  2004  00112C  D004               	goto	l2527
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;main.c: 177: current_state = FIRE;
  2008  00112E  0E05               	movlw	5
  2009  001130  0100               	movlb	0	; () banked
  2010  001132  6FBE               	movwf	_current_state& (0+255),b
  2011                           
  2012                           ;main.c: 178: }
  2013  001134  0012               	return	
  2014  001136                     l2527:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;main.c: 179: else if (hard_speed_timer <= 5) {
  2018  001136  0100               	movlb	0	; () banked
  2019  001138  51E1               	movf	(_hard_speed_timer+1)& (0+255),w,b
  2020  00113A  E104               	bnz	u2551
  2021  00113C  0E06               	movlw	6
  2022  00113E  0100               	movlb	0	; () banked
  2023  001140  5DE0               	subwf	_hard_speed_timer& (0+255),w,b
  2024  001142  B0D8               	btfsc	status,0,c
  2025  001144                     u2551:
  2026  001144  0012               	return	
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;main.c: 180: current_state = CHANGE_SPEED;
  2030  001146  0E06               	movlw	6
  2031  001148  0100               	movlb	0	; () banked
  2032  00114A  6FBE               	movwf	_current_state& (0+255),b
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;main.c: 181: }
  2036                           ;main.c: 182: }
  2037                           
  2038                           ; BSR set to: 0
  2039  00114C  0012               	return	
  2040  00114E                     l169:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 183: else if (PORTAbits.RA4 == 0) {
  2044  00114E  B880               	btfsc	3968,4,c	;volatile
  2045  001150  D00C               	goto	l2535
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 184: if (hard_speed_timer <= 5) {
  2049  001152  0100               	movlb	0	; () banked
  2050  001154  51E1               	movf	(_hard_speed_timer+1)& (0+255),w,b
  2051  001156  E104               	bnz	u2571
  2052  001158  0E06               	movlw	6
  2053  00115A  0100               	movlb	0	; () banked
  2054  00115C  5DE0               	subwf	_hard_speed_timer& (0+255),w,b
  2055  00115E  B0D8               	btfsc	status,0,c
  2056  001160                     u2571:
  2057  001160  0012               	return	
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;main.c: 185: current_state = CHANGE_SPEED;
  2061  001162  0E06               	movlw	6
  2062  001164  0100               	movlb	0	; () banked
  2063  001166  6FBE               	movwf	_current_state& (0+255),b
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;main.c: 186: }
  2067                           ;main.c: 187: }
  2068  001168  0012               	return	
  2069  00116A                     l2535:
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;main.c: 188: else {
  2073                           ;main.c: 189: current_state = RELEASE;
  2074  00116A  0E04               	movlw	4
  2075  00116C  0100               	movlb	0	; () banked
  2076  00116E  6FBE               	movwf	_current_state& (0+255),b
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;main.c: 190: }
  2080                           ;main.c: 192: break;
  2081                           
  2082                           ; BSR set to: 0
  2083  001170  0012               	return	
  2084  001172                     l2537:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 197: was_released = 1;
  2088  001172  0E01               	movlw	1
  2089  001174  0100               	movlb	0	; () banked
  2090  001176  6FC0               	movwf	_was_released& (0+255),b
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;main.c: 199: if (PORTBbits.RB0 == 1)
  2094  001178  A081               	btfss	3969,0,c	;volatile
  2095  00117A  D004               	goto	l2543
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 200: current_state = MOVE_EASY;
  2099  00117C  0E02               	movlw	2
  2100  00117E  0100               	movlb	0	; () banked
  2101  001180  6FBE               	movwf	_current_state& (0+255),b
  2102  001182  0012               	return	
  2103  001184                     l2543:
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;main.c: 201: else
  2107                           ;main.c: 202: current_state = MOVE_HARD;
  2108  001184  0E03               	movlw	3
  2109  001186  0100               	movlb	0	; () banked
  2110  001188  6FBE               	movwf	_current_state& (0+255),b
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;main.c: 203: break;
  2114  00118A  0012               	return	
  2115  00118C                     l2545:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;main.c: 207: LEDs[target] = 1;
  2119  00118C  0100               	movlb	0	; () banked
  2120  00118E  51BF               	movf	_target& (0+255),w,b
  2121  001190  0D01               	mullw	1
  2122  001192  0EA8               	movlw	low _LEDs
  2123  001194  24F3               	addwf	prodl,w,c
  2124  001196  6ED9               	movwf	fsr2l,c
  2125  001198  0E00               	movlw	high _LEDs
  2126  00119A  20F4               	addwfc	prodh,w,c
  2127  00119C  6EDA               	movwf	fsr2h,c
  2128  00119E  0E01               	movlw	1
  2129  0011A0  6EDF               	movwf	indf2,c
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;main.c: 208: char i = 0;
  2133  0011A2  0E00               	movlw	0
  2134  0011A4  0100               	movlb	0	; () banked
  2135  0011A6  6FD8               	movwf	fsm@i& (0+255),b
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;main.c: 209: for (i = 0; i <= 15; i++) {
  2139  0011A8  0E00               	movlw	0
  2140  0011AA  0100               	movlb	0	; () banked
  2141  0011AC  6FD8               	movwf	fsm@i& (0+255),b
  2142  0011AE                     l2551:
  2143                           
  2144                           ; BSR set to: 0
  2145  0011AE  0E0F               	movlw	15
  2146  0011B0  0100               	movlb	0	; () banked
  2147  0011B2  65D8               	cpfsgt	fsm@i& (0+255),b
  2148  0011B4  D001               	goto	l2555
  2149  0011B6  D017               	goto	l2567
  2150  0011B8                     l2555:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;main.c: 210: if (LEDs[i] == 0) {
  2154  0011B8  0100               	movlb	0	; () banked
  2155  0011BA  51D8               	movf	fsm@i& (0+255),w,b
  2156  0011BC  0D01               	mullw	1
  2157  0011BE  0EA8               	movlw	low _LEDs
  2158  0011C0  24F3               	addwf	prodl,w,c
  2159  0011C2  6ED9               	movwf	fsr2l,c
  2160  0011C4  0E00               	movlw	high _LEDs
  2161  0011C6  20F4               	addwfc	prodh,w,c
  2162  0011C8  6EDA               	movwf	fsr2h,c
  2163  0011CA  50DF               	movf	indf2,w,c
  2164  0011CC  A4D8               	btfss	status,2,c
  2165  0011CE  D008               	goto	l2563
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;main.c: 211: if (PORTBbits.RB0 == 1)
  2169  0011D0  A081               	btfss	3969,0,c	;volatile
  2170  0011D2  D002               	goto	l2561
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;main.c: 212: current_state = MOVE_EASY;
  2174  0011D4  0E02               	movlw	2
  2175  0011D6  D001               	goto	L1
  2176  0011D8                     l2561:
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;main.c: 213: else
  2180                           ;main.c: 214: current_state = MOVE_HARD;
  2181  0011D8  0E03               	movlw	3
  2182  0011DA                     L1:
  2183  0011DA  0100               	movlb	0	; () banked
  2184  0011DC  6FBE               	movwf	_current_state& (0+255),b
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;main.c: 215: break;
  2188  0011DE  D003               	goto	l2567
  2189  0011E0                     l2563:
  2190                           
  2191                           ; BSR set to: 0
  2192  0011E0  0100               	movlb	0	; () banked
  2193  0011E2  2BD8               	incf	fsm@i& (0+255),f,b
  2194  0011E4  D7E4               	goto	l2551
  2195  0011E6                     l2567:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;main.c: 216: }
  2199                           ;main.c: 217: }
  2200                           ;main.c: 218: if (i == 16)
  2201  0011E6  0E10               	movlw	16
  2202  0011E8  0100               	movlb	0	; () banked
  2203  0011EA  19D8               	xorwf	fsm@i& (0+255),w,b
  2204  0011EC  A4D8               	btfss	status,2,c
  2205  0011EE  0012               	return	
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;main.c: 219: current_state = GAME_WON;
  2209  0011F0  0E08               	movlw	8
  2210  0011F2  0100               	movlb	0	; () banked
  2211  0011F4  6FBE               	movwf	_current_state& (0+255),b
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;main.c: 220: break;
  2215  0011F6  0012               	return	
  2216  0011F8                     l2571:
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;main.c: 224: if (rand()*2 >= 1)
  2220  0011F8  EC0E  F012         	call	_rand	;wreg free
  2221  0011FC  90D8               	bcf	status,0,c
  2222  0011FE  361B               	rlcf	?_rand,f,c
  2223  001200  361C               	rlcf	?_rand+1,f,c
  2224  001202  BE1C               	btfsc	?_rand+1,7,c
  2225  001204  D00A               	goto	l188
  2226  001206  501C               	movf	?_rand+1,w,c
  2227  001208  E103               	bnz	u2640
  2228  00120A  041B               	decf	?_rand,w,c
  2229  00120C  A0D8               	btfss	status,0,c
  2230  00120E  D005               	goto	l188
  2231  001210                     u2640:
  2232                           
  2233                           ;main.c: 225: stepper_direction = 1;
  2234  001210  0E00               	movlw	0
  2235  001212  6E50               	movwf	_stepper_direction+1,c
  2236  001214  0E01               	movlw	1
  2237  001216  6E4F               	movwf	_stepper_direction,c
  2238  001218  D002               	goto	l2575
  2239  00121A                     l188:
  2240                           
  2241                           ;main.c: 226: else
  2242                           ;main.c: 227: stepper_direction = -1;
  2243  00121A  684F               	setf	_stepper_direction,c
  2244  00121C  6850               	setf	_stepper_direction+1,c
  2245  00121E                     l2575:
  2246                           
  2247                           ;main.c: 230: hard_speed_timer = rand()%2000+100;
  2248  00121E  EC0E  F012         	call	_rand	;wreg free
  2249  001222  C01B  F01D         	movff	?_rand,___awmod@dividend
  2250  001226  C01C  F01E         	movff	?_rand+1,___awmod@dividend+1
  2251  00122A  0E07               	movlw	7
  2252  00122C  6E20               	movwf	___awmod@divisor+1,c
  2253  00122E  0ED0               	movlw	208
  2254  001230  6E1F               	movwf	___awmod@divisor,c
  2255  001232  ECF1  F010         	call	___awmod	;wreg free
  2256  001236  0E64               	movlw	100
  2257  001238  241D               	addwf	?___awmod,w,c
  2258  00123A  0100               	movlb	0	; () banked
  2259  00123C  6FE0               	movwf	_hard_speed_timer& (0+255),b
  2260  00123E  0E00               	movlw	0
  2261  001240  201E               	addwfc	?___awmod+1,w,c
  2262  001242  0100               	movlb	0	; () banked
  2263  001244  6FE1               	movwf	(_hard_speed_timer+1)& (0+255),b
  2264                           
  2265                           ;main.c: 231: hard_speed = rand()%2;
  2266  001246  EC0E  F012         	call	_rand	;wreg free
  2267  00124A  0E01               	movlw	1
  2268  00124C  141B               	andwf	?_rand,w,c
  2269  00124E  6E1D               	movwf	___awtoft@c,c
  2270  001250  6A1E               	clrf	___awtoft@c+1,c
  2271  001252  EC7C  F012         	call	___awtoft	;wreg free
  2272  001256  C01D  F0DA         	movff	?___awtoft,_hard_speed
  2273  00125A  C01E  F0DB         	movff	?___awtoft+1,_hard_speed+1
  2274  00125E  C01F  F0DC         	movff	?___awtoft+2,_hard_speed+2
  2275                           
  2276                           ;main.c: 233: current_state = MOVE_HARD;
  2277  001262  0E03               	movlw	3
  2278  001264  0100               	movlb	0	; () banked
  2279  001266  6FBE               	movwf	_current_state& (0+255),b
  2280                           
  2281                           ;main.c: 234: break;
  2282  001268  0012               	return	
  2283  00126A                     l2579:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 237: was_released = 0;
  2287  00126A  0E00               	movlw	0
  2288  00126C  0100               	movlb	0	; () banked
  2289  00126E  6FC0               	movwf	_was_released& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 238: buzz(300,100);
  2293  001270  0E2C               	movlw	44
  2294  001272  0100               	movlb	0	; () banked
  2295  001274  6FC1               	movwf	buzz@freq& (0+255),b
  2296  001276  0E01               	movlw	1
  2297  001278  6FC2               	movwf	(buzz@freq+1)& (0+255),b
  2298  00127A  0E00               	movlw	0
  2299  00127C  6FC3               	movwf	(buzz@freq+2)& (0+255),b
  2300  00127E  0E00               	movlw	0
  2301  001280  6FC4               	movwf	(buzz@freq+3)& (0+255),b
  2302  001282  0E00               	movlw	0
  2303  001284  0100               	movlb	0	; () banked
  2304  001286  6FC6               	movwf	(buzz@duration+1)& (0+255),b
  2305  001288  0E64               	movlw	100
  2306  00128A  6FC5               	movwf	buzz@duration& (0+255),b
  2307  00128C  EC48  F00B         	call	_buzz	;wreg free
  2308                           
  2309                           ;main.c: 240: for (char i = 0;i<=16;i++) {
  2310  001290  0E00               	movlw	0
  2311  001292  0100               	movlb	0	; () banked
  2312  001294  6FD9               	movwf	fsm@i_968& (0+255),b
  2313  001296                     l2585:
  2314                           
  2315                           ; BSR set to: 0
  2316  001296  0E10               	movlw	16
  2317  001298  0100               	movlb	0	; () banked
  2318  00129A  65D9               	cpfsgt	fsm@i_968& (0+255),b
  2319  00129C  D001               	goto	l2589
  2320  00129E  D0AA               	goto	l2599
  2321  0012A0                     l2589:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 241: if ((float)position >= ((i-1)*steps_per_led+steps_per_led/2) && (float)pos
      +                          ition <= (i*steps_per_led+steps_per_led/2+1)) {
  2325  0012A0  C0BC  F01D         	movff	_position,___awtoft@c
  2326  0012A4  C0BD  F01E         	movff	_position+1,___awtoft@c+1
  2327  0012A8  EC7C  F012         	call	___awtoft	;wreg free
  2328  0012AC  C01D  F03C         	movff	?___awtoft,___ftge@ff1
  2329  0012B0  C01E  F03D         	movff	?___awtoft+1,___ftge@ff1+1
  2330  0012B4  C01F  F03E         	movff	?___awtoft+2,___ftge@ff1+2
  2331  0012B8  0E00               	movlw	0
  2332  0012BA  6E24               	movwf	___ftdiv@f2,c
  2333  0012BC  0E00               	movlw	0
  2334  0012BE  6E25               	movwf	___ftdiv@f2+1,c
  2335  0012C0  0E40               	movlw	64
  2336  0012C2  6E26               	movwf	___ftdiv@f2+2,c
  2337  0012C4  C0DD  F021         	movff	_steps_per_led,___ftdiv@f1
  2338  0012C8  C0DE  F022         	movff	_steps_per_led+1,___ftdiv@f1+1
  2339  0012CC  C0DF  F023         	movff	_steps_per_led+2,___ftdiv@f1+2
  2340  0012D0  ECD6  F00C         	call	___ftdiv	;wreg free
  2341  0012D4  C021  F033         	movff	?___ftdiv,___ftadd@f2
  2342  0012D8  C022  F034         	movff	?___ftdiv+1,___ftadd@f2+1
  2343  0012DC  C023  F035         	movff	?___ftdiv+2,___ftadd@f2+2
  2344  0012E0  C0DD  F024         	movff	_steps_per_led,___ftmul@f2
  2345  0012E4  C0DE  F025         	movff	_steps_per_led+1,___ftmul@f2+1
  2346  0012E8  C0DF  F026         	movff	_steps_per_led+2,___ftmul@f2+2
  2347  0012EC  0EFF               	movlw	255
  2348  0012EE  0100               	movlb	0	; () banked
  2349  0012F0  25D9               	addwf	fsm@i_968& (0+255),w,b
  2350  0012F2  6E1D               	movwf	___awtoft@c,c
  2351  0012F4  6A1E               	clrf	___awtoft@c+1,c
  2352  0012F6  0EFF               	movlw	255
  2353  0012F8  221E               	addwfc	___awtoft@c+1,f,c
  2354  0012FA  EC7C  F012         	call	___awtoft	;wreg free
  2355  0012FE  C01D  F021         	movff	?___awtoft,___ftmul@f1
  2356  001302  C01E  F022         	movff	?___awtoft+1,___ftmul@f1+1
  2357  001306  C01F  F023         	movff	?___awtoft+2,___ftmul@f1+2
  2358  00130A  EC5C  F00C         	call	___ftmul	;wreg free
  2359  00130E  C021  F030         	movff	?___ftmul,___ftadd@f1
  2360  001312  C022  F031         	movff	?___ftmul+1,___ftadd@f1+1
  2361  001316  C023  F032         	movff	?___ftmul+2,___ftadd@f1+2
  2362  00131A  EC72  F00A         	call	___ftadd	;wreg free
  2363  00131E  C030  F03F         	movff	?___ftadd,___ftge@ff2
  2364  001322  C031  F040         	movff	?___ftadd+1,___ftge@ff2+1
  2365  001326  C032  F041         	movff	?___ftadd+2,___ftge@ff2+2
  2366  00132A  ECE8  F00F         	call	___ftge	;wreg free
  2367  00132E  A0D8               	btfss	status,0,c
  2368  001330  D05E               	goto	l2595
  2369  001332  0E00               	movlw	0
  2370  001334  6E24               	movwf	___ftdiv@f2,c
  2371  001336  0E00               	movlw	0
  2372  001338  6E25               	movwf	___ftdiv@f2+1,c
  2373  00133A  0E40               	movlw	64
  2374  00133C  6E26               	movwf	___ftdiv@f2+2,c
  2375  00133E  C0DD  F021         	movff	_steps_per_led,___ftdiv@f1
  2376  001342  C0DE  F022         	movff	_steps_per_led+1,___ftdiv@f1+1
  2377  001346  C0DF  F023         	movff	_steps_per_led+2,___ftdiv@f1+2
  2378  00134A  ECD6  F00C         	call	___ftdiv	;wreg free
  2379  00134E  C021  F033         	movff	?___ftdiv,___ftadd@f2
  2380  001352  C022  F034         	movff	?___ftdiv+1,___ftadd@f2+1
  2381  001356  C023  F035         	movff	?___ftdiv+2,___ftadd@f2+2
  2382  00135A  C0DD  F024         	movff	_steps_per_led,___ftmul@f2
  2383  00135E  C0DE  F025         	movff	_steps_per_led+1,___ftmul@f2+1
  2384  001362  C0DF  F026         	movff	_steps_per_led+2,___ftmul@f2+2
  2385  001366  0100               	movlb	0	; () banked
  2386  001368  51D9               	movf	fsm@i_968& (0+255),w,b
  2387  00136A  ECFA  F012         	call	___lbtoft
  2388  00136E  C017  F021         	movff	?___lbtoft,___ftmul@f1
  2389  001372  C018  F022         	movff	?___lbtoft+1,___ftmul@f1+1
  2390  001376  C019  F023         	movff	?___lbtoft+2,___ftmul@f1+2
  2391  00137A  EC5C  F00C         	call	___ftmul	;wreg free
  2392  00137E  C021  F030         	movff	?___ftmul,___ftadd@f1
  2393  001382  C022  F031         	movff	?___ftmul+1,___ftadd@f1+1
  2394  001386  C023  F032         	movff	?___ftmul+2,___ftadd@f1+2
  2395  00138A  EC72  F00A         	call	___ftadd	;wreg free
  2396  00138E  C030  F0D5         	movff	?___ftadd,_fsm$1614
  2397  001392  C031  F0D6         	movff	?___ftadd+1,_fsm$1614+1
  2398  001396  C032  F0D7         	movff	?___ftadd+2,_fsm$1614+2
  2399  00139A  0E00               	movlw	0
  2400  00139C  6E33               	movwf	___ftadd@f2,c
  2401  00139E  0E80               	movlw	128
  2402  0013A0  6E34               	movwf	___ftadd@f2+1,c
  2403  0013A2  0E3F               	movlw	63
  2404  0013A4  6E35               	movwf	___ftadd@f2+2,c
  2405  0013A6  C0D5  F030         	movff	_fsm$1614,___ftadd@f1
  2406  0013AA  C0D6  F031         	movff	_fsm$1614+1,___ftadd@f1+1
  2407  0013AE  C0D7  F032         	movff	_fsm$1614+2,___ftadd@f1+2
  2408  0013B2  EC72  F00A         	call	___ftadd	;wreg free
  2409  0013B6  C030  F03C         	movff	?___ftadd,___ftge@ff1
  2410  0013BA  C031  F03D         	movff	?___ftadd+1,___ftge@ff1+1
  2411  0013BE  C032  F03E         	movff	?___ftadd+2,___ftge@ff1+2
  2412  0013C2  C0BC  F01D         	movff	_position,___awtoft@c
  2413  0013C6  C0BD  F01E         	movff	_position+1,___awtoft@c+1
  2414  0013CA  EC7C  F012         	call	___awtoft	;wreg free
  2415  0013CE  C01D  F03F         	movff	?___awtoft,___ftge@ff2
  2416  0013D2  C01E  F040         	movff	?___awtoft+1,___ftge@ff2+1
  2417  0013D6  C01F  F041         	movff	?___awtoft+2,___ftge@ff2+2
  2418  0013DA  ECE8  F00F         	call	___ftge	;wreg free
  2419  0013DE  A0D8               	btfss	status,0,c
  2420  0013E0  D006               	goto	l2595
  2421                           
  2422                           ;main.c: 242: target = i%16;
  2423  0013E2  0100               	movlb	0	; () banked
  2424  0013E4  51D9               	movf	fsm@i_968& (0+255),w,b
  2425  0013E6  0B0F               	andlw	15
  2426  0013E8  0100               	movlb	0	; () banked
  2427  0013EA  6FBF               	movwf	_target& (0+255),b
  2428                           
  2429                           ;main.c: 243: break;
  2430  0013EC  D003               	goto	l2599
  2431  0013EE                     l2595:
  2432  0013EE  0100               	movlb	0	; () banked
  2433  0013F0  2BD9               	incf	fsm@i_968& (0+255),f,b
  2434  0013F2  D751               	goto	l2585
  2435  0013F4                     l2599:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 244: }
  2439                           ;main.c: 245: }
  2440                           ;main.c: 246: if (LEDs[target] == 0) {
  2441  0013F4  0100               	movlb	0	; () banked
  2442  0013F6  51BF               	movf	_target& (0+255),w,b
  2443  0013F8  0D01               	mullw	1
  2444  0013FA  0EA8               	movlw	low _LEDs
  2445  0013FC  24F3               	addwf	prodl,w,c
  2446  0013FE  6ED9               	movwf	fsr2l,c
  2447  001400  0E00               	movlw	high _LEDs
  2448  001402  20F4               	addwfc	prodh,w,c
  2449  001404  6EDA               	movwf	fsr2h,c
  2450  001406  50DF               	movf	indf2,w,c
  2451  001408  A4D8               	btfss	status,2,c
  2452  00140A  D004               	goto	l2603
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;main.c: 247: current_state = LIGHT_UP;
  2456  00140C  0E07               	movlw	7
  2457  00140E  0100               	movlb	0	; () banked
  2458  001410  6FBE               	movwf	_current_state& (0+255),b
  2459                           
  2460                           ;main.c: 248: }
  2461  001412  0012               	return	
  2462  001414                     l2603:
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;main.c: 249: else current_state = GAME_LOST;
  2466  001414  0E09               	movlw	9
  2467  001416  0100               	movlb	0	; () banked
  2468  001418  6FBE               	movwf	_current_state& (0+255),b
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;main.c: 251: break;
  2472  00141A  0012               	return	
  2473  00141C                     l2605:
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;main.c: 255: setAllLeds(0);
  2477  00141C  0E00               	movlw	0
  2478  00141E  ECC3  F012         	call	_setAllLeds
  2479                           
  2480                           ;main.c: 256: buzz(300,100);
  2481  001422  0E2C               	movlw	44
  2482  001424  0100               	movlb	0	; () banked
  2483  001426  6FC1               	movwf	buzz@freq& (0+255),b
  2484  001428  0E01               	movlw	1
  2485  00142A  6FC2               	movwf	(buzz@freq+1)& (0+255),b
  2486  00142C  0E00               	movlw	0
  2487  00142E  6FC3               	movwf	(buzz@freq+2)& (0+255),b
  2488  001430  0E00               	movlw	0
  2489  001432  6FC4               	movwf	(buzz@freq+3)& (0+255),b
  2490  001434  0E00               	movlw	0
  2491  001436  0100               	movlb	0	; () banked
  2492  001438  6FC6               	movwf	(buzz@duration+1)& (0+255),b
  2493  00143A  0E64               	movlw	100
  2494  00143C  6FC5               	movwf	buzz@duration& (0+255),b
  2495  00143E  EC48  F00B         	call	_buzz	;wreg free
  2496                           
  2497                           ;main.c: 257: note_new = 0;
  2498  001442  0E00               	movlw	0
  2499  001444  0100               	movlb	0	; () banked
  2500  001446  6FB9               	movwf	(_note_new+1)& (0+255),b
  2501  001448  0E00               	movlw	0
  2502  00144A  6FB8               	movwf	_note_new& (0+255),b
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 259: current_state = NEW_GAME;
  2506  00144C  0E01               	movlw	1
  2507  00144E  0100               	movlb	0	; () banked
  2508  001450  6FBE               	movwf	_current_state& (0+255),b
  2509                           
  2510                           ;main.c: 260: break;
  2511  001452  0012               	return	
  2512  001454                     l2613:
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;main.c: 263: note_new = 0;
  2516  001454  0E00               	movlw	0
  2517  001456  0100               	movlb	0	; () banked
  2518  001458  6FB9               	movwf	(_note_new+1)& (0+255),b
  2519  00145A  0E00               	movlw	0
  2520  00145C  6FB8               	movwf	_note_new& (0+255),b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;main.c: 264: superMario(note_win);
  2524  00145E  C0BA  F045         	movff	_note_win,superMario@index
  2525  001462  C0BB  F046         	movff	_note_win+1,superMario@index+1
  2526  001466  EC77  F010         	call	_superMario	;wreg free
  2527                           
  2528                           ;main.c: 265: note_win++;
  2529  00146A  0100               	movlb	0	; () banked
  2530  00146C  4BBA               	infsnz	_note_win& (0+255),f,b
  2531  00146E  2BBB               	incf	(_note_win+1)& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 266: LATAbits.LATA1 = 0;
  2535  001470  9289               	bcf	3977,1,c	;volatile
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 268: if(note_win == last_win_note) {
  2539  001472  0E1D               	movlw	low _last_win_note
  2540  001474  6EF6               	movwf	tblptrl,c
  2541  001476                     	if	1	;There is more than 1 active tblptr byte
  2542  001476  0E10               	movlw	high _last_win_note
  2543  001478  6EF7               	movwf	tblptrh,c
  2544  00147A                     	endif
  2545  00147A                     	if	0	;There are less than 3 active tblptr bytes
  2546  00147A                     	endif
  2547  00147A  0009               	tblrd		*+
  2548  00147C  50F5               	movf	tablat,w,c
  2549  00147E  0100               	movlb	0	; () banked
  2550  001480  19BA               	xorwf	_note_win& (0+255),w,b
  2551  001482  E12F               	bnz	l200
  2552  001484  0009               	tblrd		*+
  2553  001486  50F5               	movf	tablat,w,c
  2554  001488  0100               	movlb	0	; () banked
  2555  00148A  19BB               	xorwf	(_note_win+1)& (0+255),w,b
  2556  00148C  A4D8               	btfss	status,2,c
  2557  00148E  0012               	return	
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;main.c: 269: current_state = NEW_GAME;
  2561  001490  0E01               	movlw	1
  2562  001492  0100               	movlb	0	; () banked
  2563  001494  6FBE               	movwf	_current_state& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;main.c: 270: }
  2567                           ;main.c: 271: break;
  2568  001496  0012               	return	
  2569  001498                     l2625:
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 274: current_state = CALIBRATION;
  2573  001498  0E00               	movlw	0
  2574  00149A  0100               	movlb	0	; () banked
  2575  00149C  6FBE               	movwf	_current_state& (0+255),b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 277: };
  2579                           
  2580                           ;main.c: 275: break;
  2581  00149E  0012               	return	
  2582  0014A0                     l2629:
  2583  0014A0  0100               	movlb	0	; () banked
  2584  0014A2  51BE               	movf	_current_state& (0+255),w,b
  2585                           
  2586                           ; Switch size 1, requested type "space"
  2587                           ; Number of cases is 10, Range of values is 0 to 9
  2588                           ; switch strategies available:
  2589                           ; Name         Instructions Cycles
  2590                           ; simple_byte           31    16 (average)
  2591                           ;	Chosen strategy is simple_byte
  2592  0014A4  0A00               	xorlw	0	; case 0
  2593  0014A6  B4D8               	btfsc	status,2,c
  2594  0014A8  D5BD               	goto	l2471
  2595  0014AA  0A01               	xorlw	1	; case 1
  2596  0014AC  B4D8               	btfsc	status,2,c
  2597  0014AE  D5D4               	goto	l2477
  2598  0014B0  0A03               	xorlw	3	; case 2
  2599  0014B2  B4D8               	btfsc	status,2,c
  2600  0014B4  D60F               	goto	l2505
  2601  0014B6  0A01               	xorlw	1	; case 3
  2602  0014B8  B4D8               	btfsc	status,2,c
  2603  0014BA  D627               	goto	l2517
  2604  0014BC  0A07               	xorlw	7	; case 4
  2605  0014BE  B4D8               	btfsc	status,2,c
  2606  0014C0  D658               	goto	l2537
  2607  0014C2  0A01               	xorlw	1	; case 5
  2608  0014C4  B4D8               	btfsc	status,2,c
  2609  0014C6  D6D1               	goto	l2579
  2610  0014C8  0A03               	xorlw	3	; case 6
  2611  0014CA  B4D8               	btfsc	status,2,c
  2612  0014CC  D695               	goto	l2571
  2613  0014CE  0A01               	xorlw	1	; case 7
  2614  0014D0  B4D8               	btfsc	status,2,c
  2615  0014D2  D65C               	goto	l2545
  2616  0014D4  0A0F               	xorlw	15	; case 8
  2617  0014D6  B4D8               	btfsc	status,2,c
  2618  0014D8  D7BD               	goto	l2613
  2619  0014DA  0A01               	xorlw	1	; case 9
  2620  0014DC  B4D8               	btfsc	status,2,c
  2621  0014DE  D79E               	goto	l2605
  2622  0014E0  D7DB               	goto	l2625
  2623  0014E2                     l200:
  2624  0014E2  0012               	return		;funcret
  2625  0014E4                     __end_of_fsm:
  2626                           	opt stack 0
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           postinc0	equ	0xFEE
  2635                           wreg	equ	0xFE8
  2636                           postdec1	equ	0xFE5
  2637                           fsr1l	equ	0xFE1
  2638                           indf2	equ	0xFDF
  2639                           postinc2	equ	0xFDE
  2640                           fsr2h	equ	0xFDA
  2641                           fsr2l	equ	0xFD9
  2642                           status	equ	0xFD8
  2643                           
  2644 ;; *************** function _superMario *****************
  2645 ;; Defined at:
  2646 ;;		line 103 in file "songs.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  index           2   68[COMRAM] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2660 ;;      Params:         2       0       0       0       0       0       0       0       0
  2661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2662 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2663 ;;      Totals:         2       2       0       0       0       0       0       0       0
  2664 ;;Total ram usage:        4 bytes
  2665 ;; Hardware stack levels used:    1
  2666 ;; Hardware stack levels required when called:    4
  2667 ;; This function calls:
  2668 ;;		___lwdiv
  2669 ;;		_buzz
  2670 ;; This function is called by:
  2671 ;;		_fsm
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text8
  2676  0020EE                     __ptext8:
  2677                           	opt stack 0
  2678  0020EE                     _superMario:
  2679                           	opt stack 25
  2680                           
  2681                           ;songs.c: 104: buzz(SuperMarioNotes[index], 1000/SuperMarioDurations[index]);
  2682                           
  2683                           ;incstack = 0
  2684  0020EE  90D8               	bcf	status,0,c
  2685  0020F0  3445               	rlcf	superMario@index,w,c
  2686  0020F2  6ED9               	movwf	fsr2l,c
  2687  0020F4  3446               	rlcf	superMario@index+1,w,c
  2688  0020F6  6EDA               	movwf	fsr2h,c
  2689  0020F8  0E48               	movlw	low _SuperMarioNotes
  2690  0020FA  26D9               	addwf	fsr2l,f,c
  2691  0020FC  0E01               	movlw	high _SuperMarioNotes
  2692  0020FE  22DA               	addwfc	fsr2h,f,c
  2693  002100  CFDE F0D1          	movff	postinc2,??_superMario
  2694  002104  CFDD F0D2          	movff	postdec2,??_superMario+1
  2695  002108  C0D1  F0C1         	movff	??_superMario,buzz@freq
  2696  00210C  C0D2  F0C2         	movff	??_superMario+1,buzz@freq+1
  2697  002110  0100               	movlb	0	; () banked
  2698  002112  6BC3               	clrf	(buzz@freq+2)& (0+255),b
  2699  002114  6BC4               	clrf	(buzz@freq+3)& (0+255),b
  2700  002116  0E03               	movlw	3
  2701  002118  6E10               	movwf	___lwdiv@dividend+1,c
  2702  00211A  0EE8               	movlw	232
  2703  00211C  6E0F               	movwf	___lwdiv@dividend,c
  2704  00211E  90D8               	bcf	status,0,c
  2705  002120  3445               	rlcf	superMario@index,w,c
  2706  002122  6ED9               	movwf	fsr2l,c
  2707  002124  3446               	rlcf	superMario@index+1,w,c
  2708  002126  6EDA               	movwf	fsr2h,c
  2709  002128  0E00               	movlw	low _SuperMarioDurations
  2710  00212A  26D9               	addwf	fsr2l,f,c
  2711  00212C  0E02               	movlw	high _SuperMarioDurations
  2712  00212E  22DA               	addwfc	fsr2h,f,c
  2713  002130  CFDE F011          	movff	postinc2,___lwdiv@divisor
  2714  002134  CFDD F012          	movff	postdec2,___lwdiv@divisor+1
  2715  002138  ECE5  F011         	call	___lwdiv	;wreg free
  2716  00213C  C00F  F0C5         	movff	?___lwdiv,buzz@duration
  2717  002140  C010  F0C6         	movff	?___lwdiv+1,buzz@duration+1
  2718  002144  EC48  F00B         	call	_buzz	;wreg free
  2719                           
  2720                           ;songs.c: 105: buzz(0, 20);
  2721  002148  0E00               	movlw	0
  2722  00214A  0100               	movlb	0	; () banked
  2723  00214C  6FC1               	movwf	buzz@freq& (0+255),b
  2724  00214E  0E00               	movlw	0
  2725  002150  6FC2               	movwf	(buzz@freq+1)& (0+255),b
  2726  002152  0E00               	movlw	0
  2727  002154  6FC3               	movwf	(buzz@freq+2)& (0+255),b
  2728  002156  0E00               	movlw	0
  2729  002158  6FC4               	movwf	(buzz@freq+3)& (0+255),b
  2730  00215A  0E00               	movlw	0
  2731  00215C  0100               	movlb	0	; () banked
  2732  00215E  6FC6               	movwf	(buzz@duration+1)& (0+255),b
  2733  002160  0E14               	movlw	20
  2734  002162  6FC5               	movwf	buzz@duration& (0+255),b
  2735  002164  EC48  F00B         	call	_buzz	;wreg free
  2736  002168  0012               	return		;funcret
  2737  00216A                     __end_of_superMario:
  2738                           	opt stack 0
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           prodh	equ	0xFF4
  2744                           prodl	equ	0xFF3
  2745                           intcon	equ	0xFF2
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           postdec1	equ	0xFE5
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           postinc2	equ	0xFDE
  2752                           postdec2	equ	0xFDD
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function ___lwdiv *****************
  2758 ;; Defined at:
  2759 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  dividend        2   14[COMRAM] unsigned int 
  2762 ;;  divisor         2   16[COMRAM] unsigned int 
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;  quotient        2   18[COMRAM] unsigned int 
  2765 ;;  counter         1   20[COMRAM] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  2   14[COMRAM] unsigned int 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2775 ;;      Params:         4       0       0       0       0       0       0       0       0
  2776 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2778 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2779 ;;Total ram usage:        7 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_superMario
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text9
  2790  0023CA                     __ptext9:
  2791                           	opt stack 0
  2792  0023CA                     ___lwdiv:
  2793                           	opt stack 27
  2794                           
  2795                           ;incstack = 0
  2796  0023CA  0E00               	movlw	0
  2797  0023CC  6E14               	movwf	___lwdiv@quotient+1,c
  2798  0023CE  0E00               	movlw	0
  2799  0023D0  6E13               	movwf	___lwdiv@quotient,c
  2800  0023D2  5011               	movf	___lwdiv@divisor,w,c
  2801  0023D4  1012               	iorwf	___lwdiv@divisor+1,w,c
  2802  0023D6  B4D8               	btfsc	status,2,c
  2803  0023D8  D01C               	goto	l670
  2804  0023DA  0E01               	movlw	1
  2805  0023DC  6E15               	movwf	___lwdiv@counter,c
  2806  0023DE  D004               	goto	l1941
  2807  0023E0                     l1939:
  2808  0023E0  90D8               	bcf	status,0,c
  2809  0023E2  3611               	rlcf	___lwdiv@divisor,f,c
  2810  0023E4  3612               	rlcf	___lwdiv@divisor+1,f,c
  2811  0023E6  2A15               	incf	___lwdiv@counter,f,c
  2812  0023E8                     l1941:
  2813  0023E8  AE12               	btfss	___lwdiv@divisor+1,7,c
  2814  0023EA  D7FA               	goto	l1939
  2815  0023EC                     l1943:
  2816  0023EC  90D8               	bcf	status,0,c
  2817  0023EE  3613               	rlcf	___lwdiv@quotient,f,c
  2818  0023F0  3614               	rlcf	___lwdiv@quotient+1,f,c
  2819  0023F2  5011               	movf	___lwdiv@divisor,w,c
  2820  0023F4  5C0F               	subwf	___lwdiv@dividend,w,c
  2821  0023F6  5012               	movf	___lwdiv@divisor+1,w,c
  2822  0023F8  5810               	subwfb	___lwdiv@dividend+1,w,c
  2823  0023FA  A0D8               	btfss	status,0,c
  2824  0023FC  D005               	goto	l1951
  2825  0023FE  5011               	movf	___lwdiv@divisor,w,c
  2826  002400  5E0F               	subwf	___lwdiv@dividend,f,c
  2827  002402  5012               	movf	___lwdiv@divisor+1,w,c
  2828  002404  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2829  002406  8013               	bsf	___lwdiv@quotient,0,c
  2830  002408                     l1951:
  2831  002408  90D8               	bcf	status,0,c
  2832  00240A  3212               	rrcf	___lwdiv@divisor+1,f,c
  2833  00240C  3211               	rrcf	___lwdiv@divisor,f,c
  2834  00240E  2E15               	decfsz	___lwdiv@counter,f,c
  2835  002410  D7ED               	goto	l1943
  2836  002412                     l670:
  2837  002412  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2838  002416  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2839  00241A  0012               	return		;funcret
  2840  00241C                     __end_of___lwdiv:
  2841                           	opt stack 0
  2842                           tblptru	equ	0xFF8
  2843                           tblptrh	equ	0xFF7
  2844                           tblptrl	equ	0xFF6
  2845                           tablat	equ	0xFF5
  2846                           prodh	equ	0xFF4
  2847                           prodl	equ	0xFF3
  2848                           intcon	equ	0xFF2
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           postdec1	equ	0xFE5
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           postinc2	equ	0xFDE
  2855                           postdec2	equ	0xFDD
  2856                           fsr2h	equ	0xFDA
  2857                           fsr2l	equ	0xFD9
  2858                           status	equ	0xFD8
  2859                           
  2860 ;; *************** function _stepper_pulse *****************
  2861 ;; Defined at:
  2862 ;;		line 281 in file "main.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  speed           3   66[COMRAM] float 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;		None
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      void 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2876 ;;      Params:         3       0       0       0       0       0       0       0       0
  2877 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2878 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2879 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2880 ;;Total ram usage:        5 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    3
  2883 ;; This function calls:
  2884 ;;		___ftdiv
  2885 ;;		___fttol
  2886 ;;		___lwmod
  2887 ;;		_myDelay_us
  2888 ;; This function is called by:
  2889 ;;		_fsm
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text10
  2894  001B76                     __ptext10:
  2895                           	opt stack 0
  2896  001B76                     _stepper_pulse:
  2897                           	opt stack 26
  2898                           
  2899                           ;main.c: 282: if (stepper_direction > 0)
  2900                           
  2901                           ;incstack = 0
  2902  001B76  BE50               	btfsc	_stepper_direction+1,7,c
  2903  001B78  D007               	goto	l203
  2904  001B7A  5050               	movf	_stepper_direction+1,w,c
  2905  001B7C  E103               	bnz	u1660
  2906  001B7E  044F               	decf	_stepper_direction,w,c
  2907  001B80  A0D8               	btfss	status,0,c
  2908  001B82  D002               	goto	l203
  2909  001B84                     u1660:
  2910                           
  2911                           ;main.c: 283: LATCbits.LATC7 = 0;
  2912  001B84  9E8B               	bcf	3979,7,c	;volatile
  2913  001B86  D001               	goto	l204
  2914  001B88                     l203:
  2915                           
  2916                           ;main.c: 284: else
  2917                           ;main.c: 285: LATCbits.LATC7 = 1;
  2918  001B88  8E8B               	bsf	3979,7,c	;volatile
  2919  001B8A                     l204:
  2920                           
  2921                           ;main.c: 287: LATCbits.LATC6 = 1;
  2922  001B8A  8C8B               	bsf	3979,6,c	;volatile
  2923                           
  2924                           ;main.c: 288: myDelay_us((int)(250/speed));
  2925  001B8C  C043  F024         	movff	stepper_pulse@speed,___ftdiv@f2
  2926  001B90  C044  F025         	movff	stepper_pulse@speed+1,___ftdiv@f2+1
  2927  001B94  C045  F026         	movff	stepper_pulse@speed+2,___ftdiv@f2+2
  2928  001B98  0E00               	movlw	0
  2929  001B9A  6E21               	movwf	___ftdiv@f1,c
  2930  001B9C  0E7A               	movlw	122
  2931  001B9E  6E22               	movwf	___ftdiv@f1+1,c
  2932  001BA0  0E43               	movlw	67
  2933  001BA2  6E23               	movwf	___ftdiv@f1+2,c
  2934  001BA4  ECD6  F00C         	call	___ftdiv	;wreg free
  2935  001BA8  C021  F030         	movff	?___ftdiv,___fttol@f1
  2936  001BAC  C022  F031         	movff	?___ftdiv+1,___fttol@f1+1
  2937  001BB0  C023  F032         	movff	?___ftdiv+2,___fttol@f1+2
  2938  001BB4  ECE2  F00B         	call	___fttol	;wreg free
  2939  001BB8  C030  F03F         	movff	?___fttol,myDelay_us@us
  2940  001BBC  C031  F040         	movff	?___fttol+1,myDelay_us@us+1
  2941  001BC0  ECE8  F012         	call	_myDelay_us	;wreg free
  2942                           
  2943                           ;main.c: 289: LATCbits.LATC6 = 0;
  2944  001BC4  9C8B               	bcf	3979,6,c	;volatile
  2945                           
  2946                           ;main.c: 290: myDelay_us((int)(250/speed));
  2947  001BC6  C043  F024         	movff	stepper_pulse@speed,___ftdiv@f2
  2948  001BCA  C044  F025         	movff	stepper_pulse@speed+1,___ftdiv@f2+1
  2949  001BCE  C045  F026         	movff	stepper_pulse@speed+2,___ftdiv@f2+2
  2950  001BD2  0E00               	movlw	0
  2951  001BD4  6E21               	movwf	___ftdiv@f1,c
  2952  001BD6  0E7A               	movlw	122
  2953  001BD8  6E22               	movwf	___ftdiv@f1+1,c
  2954  001BDA  0E43               	movlw	67
  2955  001BDC  6E23               	movwf	___ftdiv@f1+2,c
  2956  001BDE  ECD6  F00C         	call	___ftdiv	;wreg free
  2957  001BE2  C021  F030         	movff	?___ftdiv,___fttol@f1
  2958  001BE6  C022  F031         	movff	?___ftdiv+1,___fttol@f1+1
  2959  001BEA  C023  F032         	movff	?___ftdiv+2,___fttol@f1+2
  2960  001BEE  ECE2  F00B         	call	___fttol	;wreg free
  2961  001BF2  C030  F03F         	movff	?___fttol,myDelay_us@us
  2962  001BF6  C031  F040         	movff	?___fttol+1,myDelay_us@us+1
  2963  001BFA  ECE8  F012         	call	_myDelay_us	;wreg free
  2964                           
  2965                           ;main.c: 292: position+= stepper_direction;
  2966  001BFE  504F               	movf	_stepper_direction,w,c
  2967  001C00  0100               	movlb	0	; () banked
  2968  001C02  27BC               	addwf	_position& (0+255),f,b
  2969  001C04  5050               	movf	_stepper_direction+1,w,c
  2970  001C06  D00E               	goto	L2
  2971  001C08                     l1985:
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;main.c: 294: position+=total_steps;
  2975  001C08  0E1F               	movlw	low _total_steps
  2976  001C0A  6EF6               	movwf	tblptrl,c
  2977  001C0C                     	if	1	;There is more than 1 active tblptr byte
  2978  001C0C  0E10               	movlw	high _total_steps
  2979  001C0E  6EF7               	movwf	tblptrh,c
  2980  001C10                     	endif
  2981  001C10                     	if	0	;There are less than 3 active tblptr bytes
  2982  001C10                     	endif
  2983  001C10  0009               	tblrd		*+
  2984  001C12  CFF5 F046          	movff	tablat,??_stepper_pulse
  2985  001C16  0009               	tblrd		*+
  2986  001C18  CFF5 F047          	movff	tablat,??_stepper_pulse+1
  2987  001C1C  5046               	movf	??_stepper_pulse,w,c
  2988  001C1E  0100               	movlb	0	; () banked
  2989  001C20  27BC               	addwf	_position& (0+255),f,b
  2990  001C22  5047               	movf	??_stepper_pulse+1,w,c
  2991  001C24                     L2:
  2992  001C24  0100               	movlb	0	; () banked
  2993  001C26  23BD               	addwfc	(_position+1)& (0+255),f,b
  2994                           
  2995                           ; BSR set to: 0
  2996                           
  2997                           ; BSR set to: 0
  2998  001C28  0100               	movlb	0	; () banked
  2999  001C2A  BFBD               	btfsc	(_position+1)& (0+255),7,b
  3000  001C2C  D7ED               	goto	l1985
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;main.c: 297: position%=total_steps;
  3004                           
  3005                           ; BSR set to: 0
  3006  001C2E  C0BC  F00F         	movff	_position,___lwmod@dividend
  3007  001C32  C0BD  F010         	movff	_position+1,___lwmod@dividend+1
  3008  001C36  0E1F               	movlw	low _total_steps
  3009  001C38  6EF6               	movwf	tblptrl,c
  3010  001C3A                     	if	1	;There is more than 1 active tblptr byte
  3011  001C3A  0E10               	movlw	high _total_steps
  3012  001C3C  6EF7               	movwf	tblptrh,c
  3013  001C3E                     	endif
  3014  001C3E                     	if	0	;There are less than 3 active tblptr bytes
  3015  001C3E                     	endif
  3016  001C3E  0009               	tblrd		*+
  3017  001C40  CFF5 F011          	movff	tablat,___lwmod@divisor
  3018  001C44  000A               	tblrd		*-
  3019  001C46  CFF5 F012          	movff	tablat,___lwmod@divisor+1
  3020  001C4A  EC5B  F012         	call	___lwmod	;wreg free
  3021  001C4E  C00F  F0BC         	movff	?___lwmod,_position
  3022  001C52  C010  F0BD         	movff	?___lwmod+1,_position+1
  3023  001C56  0012               	return		;funcret
  3024  001C58                     __end_of_stepper_pulse:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           intcon	equ	0xFF2
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           postdec1	equ	0xFE5
  3036                           fsr1l	equ	0xFE1
  3037                           indf2	equ	0xFDF
  3038                           postinc2	equ	0xFDE
  3039                           postdec2	equ	0xFDD
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function ___lwmod *****************
  3045 ;; Defined at:
  3046 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  dividend        2   14[COMRAM] unsigned int 
  3049 ;;  divisor         2   16[COMRAM] unsigned int 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  counter         1   18[COMRAM] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  2   14[COMRAM] unsigned int 
  3054 ;; Registers used:
  3055 ;;		wreg, status,2, status,0
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3061 ;;      Params:         4       0       0       0       0       0       0       0       0
  3062 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3063 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3064 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3065 ;;Total ram usage:        5 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    1
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_fsm
  3072 ;;		_stepper_pulse
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text11
  3077  0024B6                     __ptext11:
  3078                           	opt stack 0
  3079  0024B6                     ___lwmod:
  3080                           	opt stack 27
  3081                           
  3082                           ;incstack = 0
  3083  0024B6  5011               	movf	___lwmod@divisor,w,c
  3084  0024B8  1012               	iorwf	___lwmod@divisor+1,w,c
  3085  0024BA  B4D8               	btfsc	status,2,c
  3086  0024BC  D018               	goto	l680
  3087  0024BE  0E01               	movlw	1
  3088  0024C0  6E13               	movwf	___lwmod@counter,c
  3089  0024C2  D004               	goto	l1961
  3090  0024C4                     l1959:
  3091  0024C4  90D8               	bcf	status,0,c
  3092  0024C6  3611               	rlcf	___lwmod@divisor,f,c
  3093  0024C8  3612               	rlcf	___lwmod@divisor+1,f,c
  3094  0024CA  2A13               	incf	___lwmod@counter,f,c
  3095  0024CC                     l1961:
  3096  0024CC  AE12               	btfss	___lwmod@divisor+1,7,c
  3097  0024CE  D7FA               	goto	l1959
  3098  0024D0                     l1963:
  3099  0024D0  5011               	movf	___lwmod@divisor,w,c
  3100  0024D2  5C0F               	subwf	___lwmod@dividend,w,c
  3101  0024D4  5012               	movf	___lwmod@divisor+1,w,c
  3102  0024D6  5810               	subwfb	___lwmod@dividend+1,w,c
  3103  0024D8  A0D8               	btfss	status,0,c
  3104  0024DA  D004               	goto	l1967
  3105  0024DC  5011               	movf	___lwmod@divisor,w,c
  3106  0024DE  5E0F               	subwf	___lwmod@dividend,f,c
  3107  0024E0  5012               	movf	___lwmod@divisor+1,w,c
  3108  0024E2  5A10               	subwfb	___lwmod@dividend+1,f,c
  3109  0024E4                     l1967:
  3110  0024E4  90D8               	bcf	status,0,c
  3111  0024E6  3212               	rrcf	___lwmod@divisor+1,f,c
  3112  0024E8  3211               	rrcf	___lwmod@divisor,f,c
  3113  0024EA  2E13               	decfsz	___lwmod@counter,f,c
  3114  0024EC  D7F1               	goto	l1963
  3115  0024EE                     l680:
  3116  0024EE  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  3117  0024F2  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  3118  0024F6  0012               	return		;funcret
  3119  0024F8                     __end_of___lwmod:
  3120                           	opt stack 0
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           intcon	equ	0xFF2
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           postdec1	equ	0xFE5
  3131                           fsr1l	equ	0xFE1
  3132                           indf2	equ	0xFDF
  3133                           postinc2	equ	0xFDE
  3134                           postdec2	equ	0xFDD
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _starWars *****************
  3140 ;; Defined at:
  3141 ;;		line 116 in file "songs.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  index           2   68[COMRAM] unsigned int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  1    wreg      void 
  3148 ;; Registers used:
  3149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3155 ;;      Params:         2       0       0       0       0       0       0       0       0
  3156 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3157 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3158 ;;      Totals:         2       4       0       0       0       0       0       0       0
  3159 ;;Total ram usage:        6 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    4
  3162 ;; This function calls:
  3163 ;;		_buzz
  3164 ;; This function is called by:
  3165 ;;		_fsm
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           	psect	text12
  3170  0022C0                     __ptext12:
  3171                           	opt stack 0
  3172  0022C0                     _starWars:
  3173                           	opt stack 25
  3174                           
  3175                           ;songs.c: 117: buzz(ImperialMarchNotes[index], 4*ImperialMarchDurations[index]);
  3176                           
  3177                           ;incstack = 0
  3178  0022C0  90D8               	bcf	status,0,c
  3179  0022C2  3445               	rlcf	starWars@index,w,c
  3180  0022C4  6ED9               	movwf	fsr2l,c
  3181  0022C6  3446               	rlcf	starWars@index+1,w,c
  3182  0022C8  6EDA               	movwf	fsr2h,c
  3183  0022CA  0E60               	movlw	low _ImperialMarchNotes
  3184  0022CC  26D9               	addwf	fsr2l,f,c
  3185  0022CE  0E00               	movlw	high _ImperialMarchNotes
  3186  0022D0  22DA               	addwfc	fsr2h,f,c
  3187  0022D2  CFDE F0D1          	movff	postinc2,??_starWars
  3188  0022D6  CFDD F0D2          	movff	postdec2,??_starWars+1
  3189  0022DA  C0D1  F0C1         	movff	??_starWars,buzz@freq
  3190  0022DE  C0D2  F0C2         	movff	??_starWars+1,buzz@freq+1
  3191  0022E2  0100               	movlb	0	; () banked
  3192  0022E4  6BC3               	clrf	(buzz@freq+2)& (0+255),b
  3193  0022E6  6BC4               	clrf	(buzz@freq+3)& (0+255),b
  3194  0022E8  90D8               	bcf	status,0,c
  3195  0022EA  3445               	rlcf	starWars@index,w,c
  3196  0022EC  6ED9               	movwf	fsr2l,c
  3197  0022EE  3446               	rlcf	starWars@index+1,w,c
  3198  0022F0  6EDA               	movwf	fsr2h,c
  3199  0022F2  0E00               	movlw	low _ImperialMarchDurations
  3200  0022F4  26D9               	addwf	fsr2l,f,c
  3201  0022F6  0E01               	movlw	high _ImperialMarchDurations
  3202  0022F8  22DA               	addwfc	fsr2h,f,c
  3203  0022FA  CFDE F0D3          	movff	postinc2,??_starWars+2
  3204  0022FE  CFDD F0D4          	movff	postdec2,??_starWars+3
  3205  002302  0100               	movlb	0	; () banked
  3206  002304  90D8               	bcf	status,0,c
  3207  002306  37D3               	rlcf	(??_starWars+2)& (0+255),f,b
  3208  002308  37D4               	rlcf	(??_starWars+3)& (0+255),f,b
  3209  00230A  0100               	movlb	0	; () banked
  3210  00230C  90D8               	bcf	status,0,c
  3211  00230E  37D3               	rlcf	(??_starWars+2)& (0+255),f,b
  3212  002310  37D4               	rlcf	(??_starWars+3)& (0+255),f,b
  3213  002312  C0D3  F0C5         	movff	??_starWars+2,buzz@duration
  3214  002316  C0D4  F0C6         	movff	??_starWars+3,buzz@duration+1
  3215  00231A  EC48  F00B         	call	_buzz	;wreg free
  3216  00231E  0012               	return		;funcret
  3217  002320                     __end_of_starWars:
  3218                           	opt stack 0
  3219                           tblptru	equ	0xFF8
  3220                           tblptrh	equ	0xFF7
  3221                           tblptrl	equ	0xFF6
  3222                           tablat	equ	0xFF5
  3223                           prodh	equ	0xFF4
  3224                           prodl	equ	0xFF3
  3225                           intcon	equ	0xFF2
  3226                           postinc0	equ	0xFEE
  3227                           wreg	equ	0xFE8
  3228                           postdec1	equ	0xFE5
  3229                           fsr1l	equ	0xFE1
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _buzz *****************
  3238 ;; Defined at:
  3239 ;;		line 26 in file "songs.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  freq            4    0[BANK0 ] long 
  3242 ;;  duration        2    4[BANK0 ] unsigned int 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  i               4   10[BANK0 ] long 
  3245 ;;  repeats         4    6[BANK0 ] long 
  3246 ;;  halfPeriod      2   14[BANK0 ] unsigned int 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3256 ;;      Params:         0       6       0       0       0       0       0       0       0
  3257 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3258 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3259 ;;      Totals:         2      16       0       0       0       0       0       0       0
  3260 ;;Total ram usage:       18 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    3
  3263 ;; This function calls:
  3264 ;;		___aldiv
  3265 ;;		___altoft
  3266 ;;		___ftdiv
  3267 ;;		___fttol
  3268 ;;		___lmul
  3269 ;;		_myDelay_ms
  3270 ;;		_myDelay_us
  3271 ;; This function is called by:
  3272 ;;		_fsm
  3273 ;;		_superMario
  3274 ;;		_starWars
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text13
  3279  001690                     __ptext13:
  3280                           	opt stack 0
  3281  001690                     _buzz:
  3282                           	opt stack 25
  3283                           
  3284                           ;songs.c: 28: if (freq==0) {
  3285                           
  3286                           ;incstack = 0
  3287  001690  0100               	movlb	0	; () banked
  3288  001692  51C1               	movf	buzz@freq& (0+255),w,b
  3289  001694  0100               	movlb	0	; () banked
  3290  001696  11C2               	iorwf	(buzz@freq+1)& (0+255),w,b
  3291  001698  0100               	movlb	0	; () banked
  3292  00169A  11C3               	iorwf	(buzz@freq+2)& (0+255),w,b
  3293  00169C  0100               	movlb	0	; () banked
  3294  00169E  11C4               	iorwf	(buzz@freq+3)& (0+255),w,b
  3295  0016A0  A4D8               	btfss	status,2,c
  3296  0016A2  D007               	goto	l2451
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;songs.c: 29: myDelay_ms(duration);
  3300  0016A4  C0C5  F00F         	movff	buzz@duration,myDelay_ms@ms
  3301  0016A8  C0C6  F010         	movff	buzz@duration+1,myDelay_ms@ms+1
  3302  0016AC  EC98  F012         	call	_myDelay_ms	;wreg free
  3303                           
  3304                           ;songs.c: 30: return;
  3305  0016B0  0012               	return	
  3306  0016B2                     l2451:
  3307                           
  3308                           ;songs.c: 31: }
  3309                           ;songs.c: 32: unsigned int halfPeriod = 1e6 / 2 / freq;
  3310  0016B2  C0C1  F017         	movff	buzz@freq,___altoft@c
  3311  0016B6  C0C2  F018         	movff	buzz@freq+1,___altoft@c+1
  3312  0016BA  C0C3  F019         	movff	buzz@freq+2,___altoft@c+2
  3313  0016BE  C0C4  F01A         	movff	buzz@freq+3,___altoft@c+3
  3314  0016C2  ECB5  F010         	call	___altoft	;wreg free
  3315  0016C6  C017  F024         	movff	?___altoft,___ftdiv@f2
  3316  0016CA  C018  F025         	movff	?___altoft+1,___ftdiv@f2+1
  3317  0016CE  C019  F026         	movff	?___altoft+2,___ftdiv@f2+2
  3318  0016D2  0E24               	movlw	36
  3319  0016D4  6E21               	movwf	___ftdiv@f1,c
  3320  0016D6  0EF4               	movlw	244
  3321  0016D8  6E22               	movwf	___ftdiv@f1+1,c
  3322  0016DA  0E48               	movlw	72
  3323  0016DC  6E23               	movwf	___ftdiv@f1+2,c
  3324  0016DE  ECD6  F00C         	call	___ftdiv	;wreg free
  3325  0016E2  C021  F030         	movff	?___ftdiv,___fttol@f1
  3326  0016E6  C022  F031         	movff	?___ftdiv+1,___fttol@f1+1
  3327  0016EA  C023  F032         	movff	?___ftdiv+2,___fttol@f1+2
  3328  0016EE  ECE2  F00B         	call	___fttol	;wreg free
  3329  0016F2  C030  F0CF         	movff	?___fttol,buzz@halfPeriod
  3330  0016F6  C031  F0D0         	movff	?___fttol+1,buzz@halfPeriod+1
  3331                           
  3332                           ;songs.c: 33: long repeats = (long)duration *1000 / (2 * halfPeriod);
  3333  0016FA  C0C5  F00F         	movff	buzz@duration,___lmul@multiplier
  3334  0016FE  C0C6  F010         	movff	buzz@duration+1,___lmul@multiplier+1
  3335  001702  6A11               	clrf	___lmul@multiplier+2,c
  3336  001704  6A12               	clrf	___lmul@multiplier+3,c
  3337  001706  0EE8               	movlw	232
  3338  001708  6E13               	movwf	___lmul@multiplicand,c
  3339  00170A  0E03               	movlw	3
  3340  00170C  6E14               	movwf	___lmul@multiplicand+1,c
  3341  00170E  0E00               	movlw	0
  3342  001710  6E15               	movwf	___lmul@multiplicand+2,c
  3343  001712  0E00               	movlw	0
  3344  001714  6E16               	movwf	___lmul@multiplicand+3,c
  3345  001716  EC90  F011         	call	___lmul	;wreg free
  3346  00171A  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  3347  00171E  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  3348  001722  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  3349  001726  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  3350  00172A  C0CF  F043         	movff	buzz@halfPeriod,??_buzz
  3351  00172E  C0D0  F044         	movff	buzz@halfPeriod+1,??_buzz+1
  3352  001732  90D8               	bcf	status,0,c
  3353  001734  3643               	rlcf	??_buzz,f,c
  3354  001736  3644               	rlcf	??_buzz+1,f,c
  3355  001738  C043  F01F         	movff	??_buzz,___aldiv@divisor
  3356  00173C  C044  F020         	movff	??_buzz+1,___aldiv@divisor+1
  3357  001740  6A21               	clrf	___aldiv@divisor+2,c
  3358  001742  6A22               	clrf	___aldiv@divisor+3,c
  3359  001744  EC2C  F00E         	call	___aldiv	;wreg free
  3360  001748  C01B  F0C7         	movff	?___aldiv,buzz@repeats
  3361  00174C  C01C  F0C8         	movff	?___aldiv+1,buzz@repeats+1
  3362  001750  C01D  F0C9         	movff	?___aldiv+2,buzz@repeats+2
  3363  001754  C01E  F0CA         	movff	?___aldiv+3,buzz@repeats+3
  3364                           
  3365                           ;songs.c: 34: for (long i=0; i<repeats; i++) {
  3366  001758  0E00               	movlw	0
  3367  00175A  0100               	movlb	0	; () banked
  3368  00175C  6FCB               	movwf	buzz@i& (0+255),b
  3369  00175E  0E00               	movlw	0
  3370  001760  6FCC               	movwf	(buzz@i+1)& (0+255),b
  3371  001762  0E00               	movlw	0
  3372  001764  6FCD               	movwf	(buzz@i+2)& (0+255),b
  3373  001766  0E00               	movlw	0
  3374  001768  6FCE               	movwf	(buzz@i+3)& (0+255),b
  3375  00176A  D015               	goto	l2461
  3376  00176C                     l257:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;songs.c: 35: LATAbits.LATA3 = 1;
  3380  00176C  8689               	bsf	3977,3,c	;volatile
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;songs.c: 36: myDelay_us(halfPeriod);
  3384  00176E  C0CF  F03F         	movff	buzz@halfPeriod,myDelay_us@us
  3385  001772  C0D0  F040         	movff	buzz@halfPeriod+1,myDelay_us@us+1
  3386  001776  ECE8  F012         	call	_myDelay_us	;wreg free
  3387                           
  3388                           ;songs.c: 38: LATAbits.LATA3 = 0;
  3389  00177A  9689               	bcf	3977,3,c	;volatile
  3390                           
  3391                           ;songs.c: 39: myDelay_us(halfPeriod);
  3392  00177C  C0CF  F03F         	movff	buzz@halfPeriod,myDelay_us@us
  3393  001780  C0D0  F040         	movff	buzz@halfPeriod+1,myDelay_us@us+1
  3394  001784  ECE8  F012         	call	_myDelay_us	;wreg free
  3395  001788  0E01               	movlw	1
  3396  00178A  0100               	movlb	0	; () banked
  3397  00178C  27CB               	addwf	buzz@i& (0+255),f,b
  3398  00178E  0E00               	movlw	0
  3399  001790  23CC               	addwfc	(buzz@i+1)& (0+255),f,b
  3400  001792  23CD               	addwfc	(buzz@i+2)& (0+255),f,b
  3401  001794  23CE               	addwfc	(buzz@i+3)& (0+255),f,b
  3402  001796                     l2461:
  3403                           
  3404                           ; BSR set to: 0
  3405  001796  0100               	movlb	0	; () banked
  3406  001798  51C7               	movf	buzz@repeats& (0+255),w,b
  3407  00179A  0100               	movlb	0	; () banked
  3408  00179C  5DCB               	subwf	buzz@i& (0+255),w,b
  3409  00179E  0100               	movlb	0	; () banked
  3410  0017A0  51C8               	movf	(buzz@repeats+1)& (0+255),w,b
  3411  0017A2  0100               	movlb	0	; () banked
  3412  0017A4  59CC               	subwfb	(buzz@i+1)& (0+255),w,b
  3413  0017A6  0100               	movlb	0	; () banked
  3414  0017A8  51C9               	movf	(buzz@repeats+2)& (0+255),w,b
  3415  0017AA  0100               	movlb	0	; () banked
  3416  0017AC  59CD               	subwfb	(buzz@i+2)& (0+255),w,b
  3417  0017AE  0100               	movlb	0	; () banked
  3418  0017B0  51CE               	movf	(buzz@i+3)& (0+255),w,b
  3419  0017B2  0A80               	xorlw	128
  3420  0017B4  6E43               	movwf	??_buzz& (0+255),c
  3421  0017B6  0100               	movlb	0	; () banked
  3422  0017B8  51CA               	movf	(buzz@repeats+3)& (0+255),w,b
  3423  0017BA  0A80               	xorlw	128
  3424  0017BC  5843               	subwfb	??_buzz& (0+255),w,c
  3425  0017BE  B0D8               	btfsc	status,0,c
  3426  0017C0  0012               	return	
  3427  0017C2  D7D4               	goto	l257
  3428  0017C4                     __end_of_buzz:
  3429                           	opt stack 0
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           intcon	equ	0xFF2
  3437                           postinc0	equ	0xFEE
  3438                           wreg	equ	0xFE8
  3439                           postdec1	equ	0xFE5
  3440                           fsr1l	equ	0xFE1
  3441                           indf2	equ	0xFDF
  3442                           postinc2	equ	0xFDE
  3443                           postdec2	equ	0xFDD
  3444                           fsr2h	equ	0xFDA
  3445                           fsr2l	equ	0xFD9
  3446                           status	equ	0xFD8
  3447                           
  3448 ;; *************** function _myDelay_us *****************
  3449 ;; Defined at:
  3450 ;;		line 13 in file "songs.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  us              2   62[COMRAM] unsigned int 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  i               2   64[COMRAM] unsigned int 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2, status,0
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3464 ;;      Params:         2       0       0       0       0       0       0       0       0
  3465 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3467 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3468 ;;Total ram usage:        4 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    1
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_stepper_pulse
  3475 ;;		_go_through_cols
  3476 ;;		_buzz
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text14
  3481  0025D0                     __ptext14:
  3482                           	opt stack 0
  3483  0025D0                     _myDelay_us:
  3484                           	opt stack 27
  3485                           
  3486                           ;songs.c: 15: for (unsigned int i=0; i<us; i++)
  3487                           
  3488                           ;incstack = 0
  3489  0025D0  0E00               	movlw	0
  3490  0025D2  6E42               	movwf	myDelay_us@i+1,c
  3491  0025D4  0E00               	movlw	0
  3492  0025D6  6E41               	movwf	myDelay_us@i,c
  3493  0025D8  D006               	goto	l242
  3494  0025DA                     l1733:
  3495                           
  3496                           ;songs.c: 16: _delay((unsigned long)((1)*(47000000/4000000.0)));
  3497  0025DA  0E03               	movlw	3
  3498  0025DC                     u2717:
  3499  0025DC  2EE8               	decfsz	wreg,f,c
  3500  0025DE  D7FE               	goto	u2717
  3501  0025E0  D000               	nop2		;nop
  3502  0025E2  4A41               	infsnz	myDelay_us@i,f,c
  3503  0025E4  2A42               	incf	myDelay_us@i+1,f,c
  3504  0025E6                     l242:
  3505  0025E6  503F               	movf	myDelay_us@us,w,c
  3506  0025E8  5C41               	subwf	myDelay_us@i,w,c
  3507  0025EA  5040               	movf	myDelay_us@us+1,w,c
  3508  0025EC  5842               	subwfb	myDelay_us@i+1,w,c
  3509  0025EE  B0D8               	btfsc	status,0,c
  3510  0025F0  0012               	return	
  3511  0025F2  D7F3               	goto	l1733
  3512  0025F4                     __end_of_myDelay_us:
  3513                           	opt stack 0
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           intcon	equ	0xFF2
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           postdec1	equ	0xFE5
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _myDelay_ms *****************
  3533 ;; Defined at:
  3534 ;;		line 19 in file "songs.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  ms              2   14[COMRAM] unsigned int 
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  i               2   17[COMRAM] unsigned int 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      void 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3548 ;;      Params:         2       0       0       0       0       0       0       0       0
  3549 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3550 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3551 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3552 ;;Total ram usage:        5 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_buzz
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text15
  3563  002530                     __ptext15:
  3564                           	opt stack 0
  3565  002530                     _myDelay_ms:
  3566                           	opt stack 26
  3567                           
  3568                           ;songs.c: 21: for (unsigned int i=0; i<ms; i++)
  3569                           
  3570                           ;incstack = 0
  3571  002530  0E00               	movlw	0
  3572  002532  6E13               	movwf	myDelay_ms@i+1,c
  3573  002534  0E00               	movlw	0
  3574  002536  6E12               	movwf	myDelay_ms@i,c
  3575  002538  D00A               	goto	l248
  3576  00253A                     l1739:
  3577                           
  3578                           ;songs.c: 22: _delay((unsigned long)((1)*(47000000/4000.0)));
  3579  00253A  0E10               	movlw	16
  3580  00253C  6E11               	movwf	??_myDelay_ms& (0+255),c
  3581  00253E  0E41               	movlw	65
  3582  002540                     u2727:
  3583  002540  2EE8               	decfsz	wreg,f,c
  3584  002542  D7FE               	goto	u2727
  3585  002544  2E11               	decfsz	??_myDelay_ms& (0+255),f,c
  3586  002546  D7FC               	goto	u2727
  3587  002548  F000               	nop	
  3588  00254A  4A12               	infsnz	myDelay_ms@i,f,c
  3589  00254C  2A13               	incf	myDelay_ms@i+1,f,c
  3590  00254E                     l248:
  3591  00254E  500F               	movf	myDelay_ms@ms,w,c
  3592  002550  5C12               	subwf	myDelay_ms@i,w,c
  3593  002552  5010               	movf	myDelay_ms@ms+1,w,c
  3594  002554  5813               	subwfb	myDelay_ms@i+1,w,c
  3595  002556  B0D8               	btfsc	status,0,c
  3596  002558  0012               	return	
  3597  00255A  D7EF               	goto	l1739
  3598  00255C                     __end_of_myDelay_ms:
  3599                           	opt stack 0
  3600                           tblptru	equ	0xFF8
  3601                           tblptrh	equ	0xFF7
  3602                           tblptrl	equ	0xFF6
  3603                           tablat	equ	0xFF5
  3604                           prodh	equ	0xFF4
  3605                           prodl	equ	0xFF3
  3606                           intcon	equ	0xFF2
  3607                           postinc0	equ	0xFEE
  3608                           wreg	equ	0xFE8
  3609                           postdec1	equ	0xFE5
  3610                           fsr1l	equ	0xFE1
  3611                           indf2	equ	0xFDF
  3612                           postinc2	equ	0xFDE
  3613                           postdec2	equ	0xFDD
  3614                           fsr2h	equ	0xFDA
  3615                           fsr2l	equ	0xFD9
  3616                           status	equ	0xFD8
  3617                           
  3618 ;; *************** function ___fttol *****************
  3619 ;; Defined at:
  3620 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  3621 ;; Parameters:    Size  Location     Type
  3622 ;;  f1              3   47[COMRAM] float 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  lval            4   57[COMRAM] unsigned long 
  3625 ;;  exp1            1   61[COMRAM] unsigned char 
  3626 ;;  sign1           1   56[COMRAM] unsigned char 
  3627 ;; Return value:  Size  Location     Type
  3628 ;;                  4   47[COMRAM] long 
  3629 ;; Registers used:
  3630 ;;		wreg, status,2, status,0
  3631 ;; Tracked objects:
  3632 ;;		On entry : 0/0
  3633 ;;		On exit  : 0/0
  3634 ;;		Unchanged: 0/0
  3635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3636 ;;      Params:         4       0       0       0       0       0       0       0       0
  3637 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3638 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3639 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3640 ;;Total ram usage:       15 bytes
  3641 ;; Hardware stack levels used:    1
  3642 ;; Hardware stack levels required when called:    1
  3643 ;; This function calls:
  3644 ;;		Nothing
  3645 ;; This function is called by:
  3646 ;;		_stepper_pulse
  3647 ;;		_buzz
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text16
  3652  0017C4                     __ptext16:
  3653                           	opt stack 0
  3654  0017C4                     ___fttol:
  3655                           	opt stack 26
  3656                           
  3657                           ;incstack = 0
  3658  0017C4  C032  F034         	movff	___fttol@f1+2,??___fttol
  3659  0017C8  6A35               	clrf	(??___fttol+1)& (0+255),c
  3660  0017CA  6A36               	clrf	(??___fttol+2)& (0+255),c
  3661  0017CC  3431               	rlcf	___fttol@f1+1,w,c
  3662  0017CE  3634               	rlcf	??___fttol& (0+255),f,c
  3663  0017D0  E301               	bnc	u1491
  3664  0017D2  8035               	bsf	(??___fttol+1)& (0+255),0,c
  3665  0017D4                     u1491:
  3666  0017D4  5034               	movf	??___fttol,w,c
  3667  0017D6  6E3E               	movwf	___fttol@exp1,c
  3668  0017D8  503E               	movf	___fttol@exp1,w,c
  3669  0017DA  A4D8               	btfss	status,2,c
  3670  0017DC  D009               	goto	l1865
  3671  0017DE  0E00               	movlw	0
  3672  0017E0  6E30               	movwf	?___fttol,c
  3673  0017E2  0E00               	movlw	0
  3674  0017E4  6E31               	movwf	?___fttol+1,c
  3675  0017E6  0E00               	movlw	0
  3676  0017E8  6E32               	movwf	?___fttol+2,c
  3677  0017EA  0E00               	movlw	0
  3678  0017EC  6E33               	movwf	?___fttol+3,c
  3679  0017EE  0012               	return	
  3680  0017F0                     l1865:
  3681  0017F0  0E17               	movlw	23
  3682  0017F2  6E34               	movwf	??___fttol& (0+255),c
  3683  0017F4  C030  F035         	movff	___fttol@f1,??___fttol+1
  3684  0017F8  C031  F036         	movff	___fttol@f1+1,??___fttol+2
  3685  0017FC  C032  F037         	movff	___fttol@f1+2,??___fttol+3
  3686  001800  2834               	incf	??___fttol,w,c
  3687  001802  6E38               	movwf	(??___fttol+4)& (0+255),c
  3688  001804  D004               	goto	u1510
  3689  001806                     u1515:
  3690  001806  90D8               	bcf	status,0,c
  3691  001808  3237               	rrcf	??___fttol+3,f,c
  3692  00180A  3236               	rrcf	??___fttol+2,f,c
  3693  00180C  3235               	rrcf	??___fttol+1,f,c
  3694  00180E                     u1510:
  3695  00180E  2E38               	decfsz	(??___fttol+4)& (0+255),f,c
  3696  001810  D7FA               	goto	u1515
  3697  001812  5035               	movf	??___fttol+1,w,c
  3698  001814  6E39               	movwf	___fttol@sign1,c
  3699  001816  8E31               	bsf	___fttol@f1+1,7,c
  3700  001818  0EFF               	movlw	255
  3701  00181A  1630               	andwf	___fttol@f1,f,c
  3702  00181C  0EFF               	movlw	255
  3703  00181E  1631               	andwf	___fttol@f1+1,f,c
  3704  001820  0E00               	movlw	0
  3705  001822  1632               	andwf	___fttol@f1+2,f,c
  3706  001824  5030               	movf	___fttol@f1,w,c
  3707  001826  6E3A               	movwf	___fttol@lval,c
  3708  001828  5031               	movf	___fttol@f1+1,w,c
  3709  00182A  6E3B               	movwf	___fttol@lval+1,c
  3710  00182C  5032               	movf	___fttol@f1+2,w,c
  3711  00182E  6E3C               	movwf	___fttol@lval+2,c
  3712  001830  6A3D               	clrf	___fttol@lval+3,c
  3713  001832  0E8E               	movlw	142
  3714  001834  5E3E               	subwf	___fttol@exp1,f,c
  3715  001836  AE3E               	btfss	___fttol@exp1,7,c
  3716  001838  D016               	goto	l1887
  3717  00183A  503E               	movf	___fttol@exp1,w,c
  3718  00183C  0A80               	xorlw	128
  3719  00183E  0F8F               	addlw	143
  3720  001840  B0D8               	btfsc	status,0,c
  3721  001842  D009               	goto	l1883
  3722  001844  0E00               	movlw	0
  3723  001846  6E30               	movwf	?___fttol,c
  3724  001848  0E00               	movlw	0
  3725  00184A  6E31               	movwf	?___fttol+1,c
  3726  00184C  0E00               	movlw	0
  3727  00184E  6E32               	movwf	?___fttol+2,c
  3728  001850  0E00               	movlw	0
  3729  001852  6E33               	movwf	?___fttol+3,c
  3730  001854  0012               	return	
  3731  001856                     l1883:
  3732  001856  90D8               	bcf	status,0,c
  3733  001858  323D               	rrcf	___fttol@lval+3,f,c
  3734  00185A  323C               	rrcf	___fttol@lval+2,f,c
  3735  00185C  323B               	rrcf	___fttol@lval+1,f,c
  3736  00185E  323A               	rrcf	___fttol@lval,f,c
  3737  001860  3E3E               	incfsz	___fttol@exp1,f,c
  3738  001862  D7F9               	goto	l1883
  3739  001864  D015               	goto	l1897
  3740  001866                     l1887:
  3741  001866  0E17               	movlw	23
  3742  001868  643E               	cpfsgt	___fttol@exp1,c
  3743  00186A  D00F               	goto	l1895
  3744  00186C  0E00               	movlw	0
  3745  00186E  6E30               	movwf	?___fttol,c
  3746  001870  0E00               	movlw	0
  3747  001872  6E31               	movwf	?___fttol+1,c
  3748  001874  0E00               	movlw	0
  3749  001876  6E32               	movwf	?___fttol+2,c
  3750  001878  0E00               	movlw	0
  3751  00187A  6E33               	movwf	?___fttol+3,c
  3752  00187C  0012               	return	
  3753  00187E                     l1893:
  3754  00187E  90D8               	bcf	status,0,c
  3755  001880  363A               	rlcf	___fttol@lval,f,c
  3756  001882  363B               	rlcf	___fttol@lval+1,f,c
  3757  001884  363C               	rlcf	___fttol@lval+2,f,c
  3758  001886  363D               	rlcf	___fttol@lval+3,f,c
  3759  001888  063E               	decf	___fttol@exp1,f,c
  3760  00188A                     l1895:
  3761  00188A  503E               	movf	___fttol@exp1,w,c
  3762  00188C  A4D8               	btfss	status,2,c
  3763  00188E  D7F7               	goto	l1893
  3764  001890                     l1897:
  3765  001890  5039               	movf	___fttol@sign1,w,c
  3766  001892  B4D8               	btfsc	status,2,c
  3767  001894  D008               	goto	l1901
  3768  001896  1E3D               	comf	___fttol@lval+3,f,c
  3769  001898  1E3C               	comf	___fttol@lval+2,f,c
  3770  00189A  1E3B               	comf	___fttol@lval+1,f,c
  3771  00189C  6C3A               	negf	___fttol@lval,c
  3772  00189E  0E00               	movlw	0
  3773  0018A0  223B               	addwfc	___fttol@lval+1,f,c
  3774  0018A2  223C               	addwfc	___fttol@lval+2,f,c
  3775  0018A4  223D               	addwfc	___fttol@lval+3,f,c
  3776  0018A6                     l1901:
  3777  0018A6  C03A  F030         	movff	___fttol@lval,?___fttol
  3778  0018AA  C03B  F031         	movff	___fttol@lval+1,?___fttol+1
  3779  0018AE  C03C  F032         	movff	___fttol@lval+2,?___fttol+2
  3780  0018B2  C03D  F033         	movff	___fttol@lval+3,?___fttol+3
  3781  0018B6  0012               	return	
  3782  0018B8                     __end_of___fttol:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           intcon	equ	0xFF2
  3791                           postinc0	equ	0xFEE
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function ___ftdiv *****************
  3803 ;; Defined at:
  3804 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  f1              3   32[COMRAM] float 
  3807 ;;  f2              3   35[COMRAM] float 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  f3              3   42[COMRAM] float 
  3810 ;;  sign            1   46[COMRAM] unsigned char 
  3811 ;;  exp             1   45[COMRAM] unsigned char 
  3812 ;;  cntr            1   41[COMRAM] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  3   32[COMRAM] float 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3822 ;;      Params:         6       0       0       0       0       0       0       0       0
  3823 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3824 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3825 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3826 ;;Total ram usage:       15 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    2
  3829 ;; This function calls:
  3830 ;;		___ftpack
  3831 ;; This function is called by:
  3832 ;;		_fsm
  3833 ;;		_stepper_pulse
  3834 ;;		_buzz
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           	psect	text17
  3839  0019AC                     __ptext17:
  3840                           	opt stack 0
  3841  0019AC                     ___ftdiv:
  3842                           	opt stack 25
  3843                           
  3844                           ;incstack = 0
  3845  0019AC  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  3846  0019B0  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  3847  0019B2  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  3848  0019B4  3422               	rlcf	___ftdiv@f1+1,w,c
  3849  0019B6  3627               	rlcf	??___ftdiv& (0+255),f,c
  3850  0019B8  E301               	bnc	u1441
  3851  0019BA  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  3852  0019BC                     u1441:
  3853  0019BC  5027               	movf	??___ftdiv,w,c
  3854  0019BE  6E2E               	movwf	___ftdiv@exp,c
  3855  0019C0  502E               	movf	___ftdiv@exp,w,c
  3856  0019C2  A4D8               	btfss	status,2,c
  3857  0019C4  D007               	goto	l1819
  3858  0019C6  0E00               	movlw	0
  3859  0019C8  6E21               	movwf	?___ftdiv,c
  3860  0019CA  0E00               	movlw	0
  3861  0019CC  6E22               	movwf	?___ftdiv+1,c
  3862  0019CE  0E00               	movlw	0
  3863  0019D0  6E23               	movwf	?___ftdiv+2,c
  3864  0019D2  0012               	return	
  3865  0019D4                     l1819:
  3866  0019D4  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  3867  0019D8  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  3868  0019DA  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  3869  0019DC  3425               	rlcf	___ftdiv@f2+1,w,c
  3870  0019DE  3627               	rlcf	??___ftdiv& (0+255),f,c
  3871  0019E0  E301               	bnc	u1461
  3872  0019E2  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  3873  0019E4                     u1461:
  3874  0019E4  5027               	movf	??___ftdiv,w,c
  3875  0019E6  6E2F               	movwf	___ftdiv@sign,c
  3876  0019E8  502F               	movf	___ftdiv@sign,w,c
  3877  0019EA  A4D8               	btfss	status,2,c
  3878  0019EC  D007               	goto	l1825
  3879  0019EE  0E00               	movlw	0
  3880  0019F0  6E21               	movwf	?___ftdiv,c
  3881  0019F2  0E00               	movlw	0
  3882  0019F4  6E22               	movwf	?___ftdiv+1,c
  3883  0019F6  0E00               	movlw	0
  3884  0019F8  6E23               	movwf	?___ftdiv+2,c
  3885  0019FA  0012               	return	
  3886  0019FC                     l1825:
  3887  0019FC  0E00               	movlw	0
  3888  0019FE  6E2B               	movwf	___ftdiv@f3,c
  3889  001A00  0E00               	movlw	0
  3890  001A02  6E2C               	movwf	___ftdiv@f3+1,c
  3891  001A04  0E00               	movlw	0
  3892  001A06  6E2D               	movwf	___ftdiv@f3+2,c
  3893  001A08  502F               	movf	___ftdiv@sign,w,c
  3894  001A0A  0F89               	addlw	137
  3895  001A0C  5E2E               	subwf	___ftdiv@exp,f,c
  3896  001A0E  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  3897  001A12  5026               	movf	___ftdiv@f2+2,w,c
  3898  001A14  1A2F               	xorwf	___ftdiv@sign,f,c
  3899  001A16  0E80               	movlw	128
  3900  001A18  162F               	andwf	___ftdiv@sign,f,c
  3901  001A1A  8E22               	bsf	___ftdiv@f1+1,7,c
  3902  001A1C  0EFF               	movlw	255
  3903  001A1E  1621               	andwf	___ftdiv@f1,f,c
  3904  001A20  0EFF               	movlw	255
  3905  001A22  1622               	andwf	___ftdiv@f1+1,f,c
  3906  001A24  0E00               	movlw	0
  3907  001A26  1623               	andwf	___ftdiv@f1+2,f,c
  3908  001A28  8E25               	bsf	___ftdiv@f2+1,7,c
  3909  001A2A  0EFF               	movlw	255
  3910  001A2C  1624               	andwf	___ftdiv@f2,f,c
  3911  001A2E  0EFF               	movlw	255
  3912  001A30  1625               	andwf	___ftdiv@f2+1,f,c
  3913  001A32  0E00               	movlw	0
  3914  001A34  1626               	andwf	___ftdiv@f2+2,f,c
  3915  001A36  0E18               	movlw	24
  3916  001A38  6E2A               	movwf	___ftdiv@cntr,c
  3917  001A3A                     l1845:
  3918  001A3A  90D8               	bcf	status,0,c
  3919  001A3C  362B               	rlcf	___ftdiv@f3,f,c
  3920  001A3E  362C               	rlcf	___ftdiv@f3+1,f,c
  3921  001A40  362D               	rlcf	___ftdiv@f3+2,f,c
  3922  001A42  5024               	movf	___ftdiv@f2,w,c
  3923  001A44  5C21               	subwf	___ftdiv@f1,w,c
  3924  001A46  5025               	movf	___ftdiv@f2+1,w,c
  3925  001A48  5822               	subwfb	___ftdiv@f1+1,w,c
  3926  001A4A  5026               	movf	___ftdiv@f2+2,w,c
  3927  001A4C  5823               	subwfb	___ftdiv@f1+2,w,c
  3928  001A4E  A0D8               	btfss	status,0,c
  3929  001A50  D007               	goto	l550
  3930  001A52  5024               	movf	___ftdiv@f2,w,c
  3931  001A54  5E21               	subwf	___ftdiv@f1,f,c
  3932  001A56  5025               	movf	___ftdiv@f2+1,w,c
  3933  001A58  5A22               	subwfb	___ftdiv@f1+1,f,c
  3934  001A5A  5026               	movf	___ftdiv@f2+2,w,c
  3935  001A5C  5A23               	subwfb	___ftdiv@f1+2,f,c
  3936  001A5E  802B               	bsf	___ftdiv@f3,0,c
  3937  001A60                     l550:
  3938  001A60  90D8               	bcf	status,0,c
  3939  001A62  3621               	rlcf	___ftdiv@f1,f,c
  3940  001A64  3622               	rlcf	___ftdiv@f1+1,f,c
  3941  001A66  3623               	rlcf	___ftdiv@f1+2,f,c
  3942  001A68  2E2A               	decfsz	___ftdiv@cntr,f,c
  3943  001A6A  D7E7               	goto	l1845
  3944  001A6C  C02B  F00F         	movff	___ftdiv@f3,___ftpack@arg
  3945  001A70  C02C  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3946  001A74  C02D  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3947  001A78  C02E  F012         	movff	___ftdiv@exp,___ftpack@exp
  3948  001A7C  C02F  F013         	movff	___ftdiv@sign,___ftpack@sign
  3949  001A80  ECF3  F00E         	call	___ftpack	;wreg free
  3950  001A84  C00F  F021         	movff	?___ftpack,?___ftdiv
  3951  001A88  C010  F022         	movff	?___ftpack+1,?___ftdiv+1
  3952  001A8C  C011  F023         	movff	?___ftpack+2,?___ftdiv+2
  3953  001A90  0012               	return	
  3954  001A92                     __end_of___ftdiv:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           postinc2	equ	0xFDE
  3969                           postdec2	equ	0xFDD
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function ___altoft *****************
  3975 ;; Defined at:
  3976 ;;		line 42 in file "/Applications/microchip/xc8/v1.36/sources/common/altoft.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  c               4   22[COMRAM] long 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  sign            1   31[COMRAM] unsigned char 
  3981 ;;  exp             1   30[COMRAM] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  3   22[COMRAM] float 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3991 ;;      Params:         4       0       0       0       0       0       0       0       0
  3992 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3993 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3994 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3995 ;;Total ram usage:       10 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    2
  3998 ;; This function calls:
  3999 ;;		___ftpack
  4000 ;; This function is called by:
  4001 ;;		_buzz
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text18
  4006  00216A                     __ptext18:
  4007                           	opt stack 0
  4008  00216A                     ___altoft:
  4009                           	opt stack 25
  4010                           
  4011                           ;incstack = 0
  4012  00216A  0E00               	movlw	0
  4013  00216C  6E20               	movwf	___altoft@sign,c
  4014  00216E  0E8E               	movlw	142
  4015  002170  6E1F               	movwf	___altoft@exp,c
  4016  002172  AE1A               	btfss	___altoft@c+3,7,c
  4017  002174  D011               	goto	l1807
  4018  002176  1E1A               	comf	___altoft@c+3,f,c
  4019  002178  1E19               	comf	___altoft@c+2,f,c
  4020  00217A  1E18               	comf	___altoft@c+1,f,c
  4021  00217C  6C17               	negf	___altoft@c,c
  4022  00217E  0E00               	movlw	0
  4023  002180  2218               	addwfc	___altoft@c+1,f,c
  4024  002182  2219               	addwfc	___altoft@c+2,f,c
  4025  002184  221A               	addwfc	___altoft@c+3,f,c
  4026  002186  0E01               	movlw	1
  4027  002188  6E20               	movwf	___altoft@sign,c
  4028  00218A  D006               	goto	l1807
  4029  00218C                     l1805:
  4030  00218C  90D8               	bcf	status,0,c
  4031  00218E  321A               	rrcf	___altoft@c+3,f,c
  4032  002190  3219               	rrcf	___altoft@c+2,f,c
  4033  002192  3218               	rrcf	___altoft@c+1,f,c
  4034  002194  3217               	rrcf	___altoft@c,f,c
  4035  002196  2A1F               	incf	___altoft@exp,f,c
  4036  002198                     l1807:
  4037  002198  0E00               	movlw	0
  4038  00219A  1417               	andwf	___altoft@c,w,c
  4039  00219C  6E1B               	movwf	??___altoft& (0+255),c
  4040  00219E  0E00               	movlw	0
  4041  0021A0  1418               	andwf	___altoft@c+1,w,c
  4042  0021A2  6E1C               	movwf	(??___altoft+1)& (0+255),c
  4043  0021A4  0E00               	movlw	0
  4044  0021A6  1419               	andwf	___altoft@c+2,w,c
  4045  0021A8  6E1D               	movwf	(??___altoft+2)& (0+255),c
  4046  0021AA  0EFF               	movlw	255
  4047  0021AC  141A               	andwf	___altoft@c+3,w,c
  4048  0021AE  6E1E               	movwf	(??___altoft+3)& (0+255),c
  4049  0021B0  501B               	movf	??___altoft,w,c
  4050  0021B2  101C               	iorwf	??___altoft+1,w,c
  4051  0021B4  101D               	iorwf	??___altoft+2,w,c
  4052  0021B6  101E               	iorwf	??___altoft+3,w,c
  4053  0021B8  A4D8               	btfss	status,2,c
  4054  0021BA  D7E8               	goto	l1805
  4055  0021BC  C017  F00F         	movff	___altoft@c,___ftpack@arg
  4056  0021C0  C018  F010         	movff	___altoft@c+1,___ftpack@arg+1
  4057  0021C4  C019  F011         	movff	___altoft@c+2,___ftpack@arg+2
  4058  0021C8  C01F  F012         	movff	___altoft@exp,___ftpack@exp
  4059  0021CC  C020  F013         	movff	___altoft@sign,___ftpack@sign
  4060  0021D0  ECF3  F00E         	call	___ftpack	;wreg free
  4061  0021D4  C00F  F017         	movff	?___ftpack,?___altoft
  4062  0021D8  C010  F018         	movff	?___ftpack+1,?___altoft+1
  4063  0021DC  C011  F019         	movff	?___ftpack+2,?___altoft+2
  4064  0021E0  0012               	return	
  4065  0021E2                     __end_of___altoft:
  4066                           	opt stack 0
  4067                           tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           prodh	equ	0xFF4
  4072                           prodl	equ	0xFF3
  4073                           intcon	equ	0xFF2
  4074                           postinc0	equ	0xFEE
  4075                           wreg	equ	0xFE8
  4076                           postdec1	equ	0xFE5
  4077                           fsr1l	equ	0xFE1
  4078                           indf2	equ	0xFDF
  4079                           postinc2	equ	0xFDE
  4080                           postdec2	equ	0xFDD
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function ___aldiv *****************
  4086 ;; Defined at:
  4087 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/aldiv.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  dividend        4   26[COMRAM] long 
  4090 ;;  divisor         4   30[COMRAM] long 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  quotient        4   36[COMRAM] long 
  4093 ;;  sign            1   35[COMRAM] unsigned char 
  4094 ;;  counter         1   34[COMRAM] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  4   26[COMRAM] long 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4104 ;;      Params:         8       0       0       0       0       0       0       0       0
  4105 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4107 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4108 ;;Total ram usage:       14 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    1
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_buzz
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text19
  4119  001C58                     __ptext19:
  4120                           	opt stack 0
  4121  001C58                     ___aldiv:
  4122                           	opt stack 26
  4123                           
  4124                           ;incstack = 0
  4125  001C58  0E00               	movlw	0
  4126  001C5A  6E24               	movwf	___aldiv@sign,c
  4127  001C5C  AE22               	btfss	___aldiv@divisor+3,7,c
  4128  001C5E  D00A               	goto	l1761
  4129  001C60  1E22               	comf	___aldiv@divisor+3,f,c
  4130  001C62  1E21               	comf	___aldiv@divisor+2,f,c
  4131  001C64  1E20               	comf	___aldiv@divisor+1,f,c
  4132  001C66  6C1F               	negf	___aldiv@divisor,c
  4133  001C68  0E00               	movlw	0
  4134  001C6A  2220               	addwfc	___aldiv@divisor+1,f,c
  4135  001C6C  2221               	addwfc	___aldiv@divisor+2,f,c
  4136  001C6E  2222               	addwfc	___aldiv@divisor+3,f,c
  4137  001C70  0E01               	movlw	1
  4138  001C72  6E24               	movwf	___aldiv@sign,c
  4139  001C74                     l1761:
  4140  001C74  AE1E               	btfss	___aldiv@dividend+3,7,c
  4141  001C76  D00A               	goto	l1767
  4142  001C78  1E1E               	comf	___aldiv@dividend+3,f,c
  4143  001C7A  1E1D               	comf	___aldiv@dividend+2,f,c
  4144  001C7C  1E1C               	comf	___aldiv@dividend+1,f,c
  4145  001C7E  6C1B               	negf	___aldiv@dividend,c
  4146  001C80  0E00               	movlw	0
  4147  001C82  221C               	addwfc	___aldiv@dividend+1,f,c
  4148  001C84  221D               	addwfc	___aldiv@dividend+2,f,c
  4149  001C86  221E               	addwfc	___aldiv@dividend+3,f,c
  4150  001C88  0E01               	movlw	1
  4151  001C8A  1A24               	xorwf	___aldiv@sign,f,c
  4152  001C8C                     l1767:
  4153  001C8C  0E00               	movlw	0
  4154  001C8E  6E25               	movwf	___aldiv@quotient,c
  4155  001C90  0E00               	movlw	0
  4156  001C92  6E26               	movwf	___aldiv@quotient+1,c
  4157  001C94  0E00               	movlw	0
  4158  001C96  6E27               	movwf	___aldiv@quotient+2,c
  4159  001C98  0E00               	movlw	0
  4160  001C9A  6E28               	movwf	___aldiv@quotient+3,c
  4161  001C9C  501F               	movf	___aldiv@divisor,w,c
  4162  001C9E  1020               	iorwf	___aldiv@divisor+1,w,c
  4163  001CA0  1021               	iorwf	___aldiv@divisor+2,w,c
  4164  001CA2  1022               	iorwf	___aldiv@divisor+3,w,c
  4165  001CA4  B4D8               	btfsc	status,2,c
  4166  001CA6  D02A               	goto	l1789
  4167  001CA8  0E01               	movlw	1
  4168  001CAA  6E23               	movwf	___aldiv@counter,c
  4169  001CAC  D006               	goto	l1775
  4170  001CAE                     l1773:
  4171  001CAE  90D8               	bcf	status,0,c
  4172  001CB0  361F               	rlcf	___aldiv@divisor,f,c
  4173  001CB2  3620               	rlcf	___aldiv@divisor+1,f,c
  4174  001CB4  3621               	rlcf	___aldiv@divisor+2,f,c
  4175  001CB6  3622               	rlcf	___aldiv@divisor+3,f,c
  4176  001CB8  2A23               	incf	___aldiv@counter,f,c
  4177  001CBA                     l1775:
  4178  001CBA  AE22               	btfss	___aldiv@divisor+3,7,c
  4179  001CBC  D7F8               	goto	l1773
  4180  001CBE                     l1777:
  4181  001CBE  90D8               	bcf	status,0,c
  4182  001CC0  3625               	rlcf	___aldiv@quotient,f,c
  4183  001CC2  3626               	rlcf	___aldiv@quotient+1,f,c
  4184  001CC4  3627               	rlcf	___aldiv@quotient+2,f,c
  4185  001CC6  3628               	rlcf	___aldiv@quotient+3,f,c
  4186  001CC8  501F               	movf	___aldiv@divisor,w,c
  4187  001CCA  5C1B               	subwf	___aldiv@dividend,w,c
  4188  001CCC  5020               	movf	___aldiv@divisor+1,w,c
  4189  001CCE  581C               	subwfb	___aldiv@dividend+1,w,c
  4190  001CD0  5021               	movf	___aldiv@divisor+2,w,c
  4191  001CD2  581D               	subwfb	___aldiv@dividend+2,w,c
  4192  001CD4  5022               	movf	___aldiv@divisor+3,w,c
  4193  001CD6  581E               	subwfb	___aldiv@dividend+3,w,c
  4194  001CD8  A0D8               	btfss	status,0,c
  4195  001CDA  D009               	goto	l1785
  4196  001CDC  501F               	movf	___aldiv@divisor,w,c
  4197  001CDE  5E1B               	subwf	___aldiv@dividend,f,c
  4198  001CE0  5020               	movf	___aldiv@divisor+1,w,c
  4199  001CE2  5A1C               	subwfb	___aldiv@dividend+1,f,c
  4200  001CE4  5021               	movf	___aldiv@divisor+2,w,c
  4201  001CE6  5A1D               	subwfb	___aldiv@dividend+2,f,c
  4202  001CE8  5022               	movf	___aldiv@divisor+3,w,c
  4203  001CEA  5A1E               	subwfb	___aldiv@dividend+3,f,c
  4204  001CEC  8025               	bsf	___aldiv@quotient,0,c
  4205  001CEE                     l1785:
  4206  001CEE  90D8               	bcf	status,0,c
  4207  001CF0  3222               	rrcf	___aldiv@divisor+3,f,c
  4208  001CF2  3221               	rrcf	___aldiv@divisor+2,f,c
  4209  001CF4  3220               	rrcf	___aldiv@divisor+1,f,c
  4210  001CF6  321F               	rrcf	___aldiv@divisor,f,c
  4211  001CF8  2E23               	decfsz	___aldiv@counter,f,c
  4212  001CFA  D7E1               	goto	l1777
  4213  001CFC                     l1789:
  4214  001CFC  5024               	movf	___aldiv@sign,w,c
  4215  001CFE  B4D8               	btfsc	status,2,c
  4216  001D00  D008               	goto	l1793
  4217  001D02  1E28               	comf	___aldiv@quotient+3,f,c
  4218  001D04  1E27               	comf	___aldiv@quotient+2,f,c
  4219  001D06  1E26               	comf	___aldiv@quotient+1,f,c
  4220  001D08  6C25               	negf	___aldiv@quotient,c
  4221  001D0A  0E00               	movlw	0
  4222  001D0C  2226               	addwfc	___aldiv@quotient+1,f,c
  4223  001D0E  2227               	addwfc	___aldiv@quotient+2,f,c
  4224  001D10  2228               	addwfc	___aldiv@quotient+3,f,c
  4225  001D12                     l1793:
  4226  001D12  C025  F01B         	movff	___aldiv@quotient,?___aldiv
  4227  001D16  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
  4228  001D1A  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
  4229  001D1E  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
  4230  001D22  0012               	return	
  4231  001D24                     __end_of___aldiv:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           postinc0	equ	0xFEE
  4241                           wreg	equ	0xFE8
  4242                           postdec1	equ	0xFE5
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           postinc2	equ	0xFDE
  4246                           postdec2	equ	0xFDD
  4247                           fsr2h	equ	0xFDA
  4248                           fsr2l	equ	0xFD9
  4249                           status	equ	0xFD8
  4250                           
  4251 ;; *************** function _setAllLeds *****************
  4252 ;; Defined at:
  4253 ;;		line 332 in file "main.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  value           1    wreg     unsigned char 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  value           1   14[COMRAM] unsigned char 
  4258 ;;  i               1   15[COMRAM] unsigned char 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4268 ;;      Params:         0       0       0       0       0       0       0       0       0
  4269 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4271 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4272 ;;Total ram usage:        2 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    1
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_fsm
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text20
  4283  002586                     __ptext20:
  4284                           	opt stack 0
  4285  002586                     _setAllLeds:
  4286                           	opt stack 28
  4287                           
  4288                           ;incstack = 0
  4289                           ;setAllLeds@value stored from wreg
  4290  002586  6E0F               	movwf	setAllLeds@value,c
  4291                           
  4292                           ;main.c: 333: for(char i = 0; i <= 15; i++)
  4293  002588  0E00               	movlw	0
  4294  00258A  6E10               	movwf	setAllLeds@i,c
  4295  00258C                     l1993:
  4296  00258C  0E0F               	movlw	15
  4297  00258E  6410               	cpfsgt	setAllLeds@i,c
  4298  002590  D001               	goto	l1997
  4299  002592  0012               	return	
  4300  002594                     l1997:
  4301                           
  4302                           ;main.c: 334: LEDs[i] = value;
  4303  002594  5010               	movf	setAllLeds@i,w,c
  4304  002596  0D01               	mullw	1
  4305  002598  0EA8               	movlw	low _LEDs
  4306  00259A  24F3               	addwf	prodl,w,c
  4307  00259C  6ED9               	movwf	fsr2l,c
  4308  00259E  0E00               	movlw	high _LEDs
  4309  0025A0  20F4               	addwfc	prodh,w,c
  4310  0025A2  6EDA               	movwf	fsr2h,c
  4311  0025A4  C00F  FFDF         	movff	setAllLeds@value,indf2
  4312  0025A8  2A10               	incf	setAllLeds@i,f,c
  4313  0025AA  D7F0               	goto	l1993
  4314  0025AC                     __end_of_setAllLeds:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function _rand *****************
  4335 ;; Defined at:
  4336 ;;		line 12 in file "/Applications/microchip/xc8/v1.36/sources/common/rand.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  2   26[COMRAM] int 
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4350 ;;      Params:         2       0       0       0       0       0       0       0       0
  4351 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4352 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4353 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4354 ;;Total ram usage:        2 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    2
  4357 ;; This function calls:
  4358 ;;		___lmul
  4359 ;; This function is called by:
  4360 ;;		_fsm
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text21
  4365  00241C                     __ptext21:
  4366                           	opt stack 0
  4367  00241C                     _rand:
  4368                           	opt stack 27
  4369                           
  4370                           ;incstack = 0
  4371  00241C  C048  F00F         	movff	_randx,___lmul@multiplier
  4372  002420  C049  F010         	movff	_randx+1,___lmul@multiplier+1
  4373  002424  C04A  F011         	movff	_randx+2,___lmul@multiplier+2
  4374  002428  C04B  F012         	movff	_randx+3,___lmul@multiplier+3
  4375  00242C  0E6D               	movlw	109
  4376  00242E  6E13               	movwf	___lmul@multiplicand,c
  4377  002430  0E4E               	movlw	78
  4378  002432  6E14               	movwf	___lmul@multiplicand+1,c
  4379  002434  0EC6               	movlw	198
  4380  002436  6E15               	movwf	___lmul@multiplicand+2,c
  4381  002438  0E41               	movlw	65
  4382  00243A  6E16               	movwf	___lmul@multiplicand+3,c
  4383  00243C  EC90  F011         	call	___lmul	;wreg free
  4384  002440  C00F  F048         	movff	?___lmul,_randx
  4385  002444  C010  F049         	movff	?___lmul+1,_randx+1
  4386  002448  C011  F04A         	movff	?___lmul+2,_randx+2
  4387  00244C  C012  F04B         	movff	?___lmul+3,_randx+3
  4388  002450  0E39               	movlw	57
  4389  002452  2648               	addwf	_randx,f,c
  4390  002454  0E30               	movlw	48
  4391  002456  2249               	addwfc	_randx+1,f,c
  4392  002458  0E00               	movlw	0
  4393  00245A  224A               	addwfc	_randx+2,f,c
  4394  00245C  0E00               	movlw	0
  4395  00245E  224B               	addwfc	_randx+3,f,c
  4396  002460  0EFF               	movlw	255
  4397  002462  144A               	andwf	_randx+2,w,c
  4398  002464  6E1B               	movwf	?_rand,c
  4399  002466  0E7F               	movlw	127
  4400  002468  144B               	andwf	_randx+3,w,c
  4401  00246A  6E1C               	movwf	?_rand+1,c
  4402  00246C  0012               	return	
  4403  00246E                     __end_of_rand:
  4404                           	opt stack 0
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           prodh	equ	0xFF4
  4410                           prodl	equ	0xFF3
  4411                           intcon	equ	0xFF2
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function ___lmul *****************
  4424 ;; Defined at:
  4425 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul32.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  multiplier      4   14[COMRAM] unsigned long 
  4428 ;;  multiplicand    4   18[COMRAM] unsigned long 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  product         4   22[COMRAM] unsigned long 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  4   14[COMRAM] unsigned long 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4440 ;;      Params:         8       0       0       0       0       0       0       0       0
  4441 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4443 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4444 ;;Total ram usage:       12 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    1
  4447 ;; This function calls:
  4448 ;;		Nothing
  4449 ;; This function is called by:
  4450 ;;		_buzz
  4451 ;;		_rand
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text22
  4456  002320                     __ptext22:
  4457                           	opt stack 0
  4458  002320                     ___lmul:
  4459                           	opt stack 26
  4460                           
  4461                           ;incstack = 0
  4462  002320  0E00               	movlw	0
  4463  002322  6E17               	movwf	___lmul@product,c
  4464  002324  0E00               	movlw	0
  4465  002326  6E18               	movwf	___lmul@product+1,c
  4466  002328  0E00               	movlw	0
  4467  00232A  6E19               	movwf	___lmul@product+2,c
  4468  00232C  0E00               	movlw	0
  4469  00232E  6E1A               	movwf	___lmul@product+3,c
  4470  002330                     l1745:
  4471  002330  A00F               	btfss	___lmul@multiplier,0,c
  4472  002332  D008               	goto	l1749
  4473  002334  5013               	movf	___lmul@multiplicand,w,c
  4474  002336  2617               	addwf	___lmul@product,f,c
  4475  002338  5014               	movf	___lmul@multiplicand+1,w,c
  4476  00233A  2218               	addwfc	___lmul@product+1,f,c
  4477  00233C  5015               	movf	___lmul@multiplicand+2,w,c
  4478  00233E  2219               	addwfc	___lmul@product+2,f,c
  4479  002340  5016               	movf	___lmul@multiplicand+3,w,c
  4480  002342  221A               	addwfc	___lmul@product+3,f,c
  4481  002344                     l1749:
  4482  002344  90D8               	bcf	status,0,c
  4483  002346  3613               	rlcf	___lmul@multiplicand,f,c
  4484  002348  3614               	rlcf	___lmul@multiplicand+1,f,c
  4485  00234A  3615               	rlcf	___lmul@multiplicand+2,f,c
  4486  00234C  3616               	rlcf	___lmul@multiplicand+3,f,c
  4487  00234E  90D8               	bcf	status,0,c
  4488  002350  3212               	rrcf	___lmul@multiplier+3,f,c
  4489  002352  3211               	rrcf	___lmul@multiplier+2,f,c
  4490  002354  3210               	rrcf	___lmul@multiplier+1,f,c
  4491  002356  320F               	rrcf	___lmul@multiplier,f,c
  4492  002358  500F               	movf	___lmul@multiplier,w,c
  4493  00235A  1010               	iorwf	___lmul@multiplier+1,w,c
  4494  00235C  1011               	iorwf	___lmul@multiplier+2,w,c
  4495  00235E  1012               	iorwf	___lmul@multiplier+3,w,c
  4496  002360  A4D8               	btfss	status,2,c
  4497  002362  D7E6               	goto	l1745
  4498  002364  C017  F00F         	movff	___lmul@product,?___lmul
  4499  002368  C018  F010         	movff	___lmul@product+1,?___lmul+1
  4500  00236C  C019  F011         	movff	___lmul@product+2,?___lmul+2
  4501  002370  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  4502  002374  0012               	return		;funcret
  4503  002376                     __end_of___lmul:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           postdec1	equ	0xFE5
  4515                           fsr1l	equ	0xFE1
  4516                           indf2	equ	0xFDF
  4517                           postinc2	equ	0xFDE
  4518                           postdec2	equ	0xFDD
  4519                           fsr2h	equ	0xFDA
  4520                           fsr2l	equ	0xFD9
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function ___lbtoft *****************
  4524 ;; Defined at:
  4525 ;;		line 27 in file "/Applications/microchip/xc8/v1.36/sources/common/lbtoft.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  c               1    wreg     unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  c               1   25[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  3   22[COMRAM] float 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4539 ;;      Params:         3       0       0       0       0       0       0       0       0
  4540 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4542 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4543 ;;Total ram usage:        4 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    2
  4546 ;; This function calls:
  4547 ;;		___ftpack
  4548 ;; This function is called by:
  4549 ;;		_fsm
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text23
  4554  0025F4                     __ptext23:
  4555                           	opt stack 0
  4556  0025F4                     ___lbtoft:
  4557                           	opt stack 27
  4558                           
  4559                           ;incstack = 0
  4560                           ;___lbtoft@c stored from wreg
  4561  0025F4  6E1A               	movwf	___lbtoft@c,c
  4562  0025F6  501A               	movf	___lbtoft@c,w,c
  4563  0025F8  6E0F               	movwf	___ftpack@arg,c
  4564  0025FA  6A10               	clrf	___ftpack@arg+1,c
  4565  0025FC  6A11               	clrf	___ftpack@arg+2,c
  4566  0025FE  0E8E               	movlw	142
  4567  002600  6E12               	movwf	___ftpack@exp,c
  4568  002602  0E00               	movlw	0
  4569  002604  6E13               	movwf	___ftpack@sign,c
  4570  002606  ECF3  F00E         	call	___ftpack	;wreg free
  4571  00260A  C00F  F017         	movff	?___ftpack,?___lbtoft
  4572  00260E  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  4573  002612  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  4574  002616  0012               	return	
  4575  002618                     __end_of___lbtoft:
  4576                           	opt stack 0
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           postinc0	equ	0xFEE
  4585                           wreg	equ	0xFE8
  4586                           postdec1	equ	0xFE5
  4587                           fsr1l	equ	0xFE1
  4588                           indf2	equ	0xFDF
  4589                           postinc2	equ	0xFDE
  4590                           postdec2	equ	0xFDD
  4591                           fsr2h	equ	0xFDA
  4592                           fsr2l	equ	0xFD9
  4593                           status	equ	0xFD8
  4594                           
  4595 ;; *************** function ___ftmul *****************
  4596 ;; Defined at:
  4597 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  f1              3   32[COMRAM] float 
  4600 ;;  f2              3   35[COMRAM] float 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  f3_as_produc    3   42[COMRAM] unsigned um
  4603 ;;  sign            1   46[COMRAM] unsigned char 
  4604 ;;  cntr            1   45[COMRAM] unsigned char 
  4605 ;;  exp             1   41[COMRAM] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  3   32[COMRAM] float 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4615 ;;      Params:         6       0       0       0       0       0       0       0       0
  4616 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4617 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4618 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4619 ;;Total ram usage:       15 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    2
  4622 ;; This function calls:
  4623 ;;		___ftpack
  4624 ;; This function is called by:
  4625 ;;		_fsm
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text24
  4630  0018B8                     __ptext24:
  4631                           	opt stack 0
  4632  0018B8                     ___ftmul:
  4633                           	opt stack 27
  4634                           
  4635                           ;incstack = 0
  4636  0018B8  C023  F027         	movff	___ftmul@f1+2,??___ftmul
  4637  0018BC  6A28               	clrf	(??___ftmul+1)& (0+255),c
  4638  0018BE  6A29               	clrf	(??___ftmul+2)& (0+255),c
  4639  0018C0  3422               	rlcf	___ftmul@f1+1,w,c
  4640  0018C2  3627               	rlcf	??___ftmul& (0+255),f,c
  4641  0018C4  E301               	bnc	u1951
  4642  0018C6  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  4643  0018C8                     u1951:
  4644  0018C8  5027               	movf	??___ftmul,w,c
  4645  0018CA  6E2A               	movwf	___ftmul@exp,c
  4646  0018CC  502A               	movf	___ftmul@exp,w,c
  4647  0018CE  A4D8               	btfss	status,2,c
  4648  0018D0  D007               	goto	l2119
  4649  0018D2  0E00               	movlw	0
  4650  0018D4  6E21               	movwf	?___ftmul,c
  4651  0018D6  0E00               	movlw	0
  4652  0018D8  6E22               	movwf	?___ftmul+1,c
  4653  0018DA  0E00               	movlw	0
  4654  0018DC  6E23               	movwf	?___ftmul+2,c
  4655  0018DE  0012               	return	
  4656  0018E0                     l2119:
  4657  0018E0  C026  F027         	movff	___ftmul@f2+2,??___ftmul
  4658  0018E4  6A28               	clrf	(??___ftmul+1)& (0+255),c
  4659  0018E6  6A29               	clrf	(??___ftmul+2)& (0+255),c
  4660  0018E8  3425               	rlcf	___ftmul@f2+1,w,c
  4661  0018EA  3627               	rlcf	??___ftmul& (0+255),f,c
  4662  0018EC  E301               	bnc	u1971
  4663  0018EE  8028               	bsf	(??___ftmul+1)& (0+255),0,c
  4664  0018F0                     u1971:
  4665  0018F0  5027               	movf	??___ftmul,w,c
  4666  0018F2  6E2F               	movwf	___ftmul@sign,c
  4667  0018F4  502F               	movf	___ftmul@sign,w,c
  4668  0018F6  A4D8               	btfss	status,2,c
  4669  0018F8  D007               	goto	l2125
  4670  0018FA  0E00               	movlw	0
  4671  0018FC  6E21               	movwf	?___ftmul,c
  4672  0018FE  0E00               	movlw	0
  4673  001900  6E22               	movwf	?___ftmul+1,c
  4674  001902  0E00               	movlw	0
  4675  001904  6E23               	movwf	?___ftmul+2,c
  4676  001906  0012               	return	
  4677  001908                     l2125:
  4678  001908  502F               	movf	___ftmul@sign,w,c
  4679  00190A  0F7B               	addlw	123
  4680  00190C  262A               	addwf	___ftmul@exp,f,c
  4681  00190E  C023  F02F         	movff	___ftmul@f1+2,___ftmul@sign
  4682  001912  5026               	movf	___ftmul@f2+2,w,c
  4683  001914  1A2F               	xorwf	___ftmul@sign,f,c
  4684  001916  0E80               	movlw	128
  4685  001918  162F               	andwf	___ftmul@sign,f,c
  4686  00191A  8E22               	bsf	___ftmul@f1+1,7,c
  4687  00191C  8E25               	bsf	___ftmul@f2+1,7,c
  4688  00191E  0EFF               	movlw	255
  4689  001920  1624               	andwf	___ftmul@f2,f,c
  4690  001922  0EFF               	movlw	255
  4691  001924  1625               	andwf	___ftmul@f2+1,f,c
  4692  001926  0E00               	movlw	0
  4693  001928  1626               	andwf	___ftmul@f2+2,f,c
  4694  00192A  0E00               	movlw	0
  4695  00192C  6E2B               	movwf	___ftmul@f3_as_product,c
  4696  00192E  0E00               	movlw	0
  4697  001930  6E2C               	movwf	___ftmul@f3_as_product+1,c
  4698  001932  0E00               	movlw	0
  4699  001934  6E2D               	movwf	___ftmul@f3_as_product+2,c
  4700  001936  0E07               	movlw	7
  4701  001938  6E2E               	movwf	___ftmul@cntr,c
  4702  00193A                     l2139:
  4703  00193A  A021               	btfss	___ftmul@f1,0,c
  4704  00193C  D006               	goto	l2143
  4705  00193E  5024               	movf	___ftmul@f2,w,c
  4706  001940  262B               	addwf	___ftmul@f3_as_product,f,c
  4707  001942  5025               	movf	___ftmul@f2+1,w,c
  4708  001944  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  4709  001946  5026               	movf	___ftmul@f2+2,w,c
  4710  001948  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  4711  00194A                     l2143:
  4712  00194A  90D8               	bcf	status,0,c
  4713  00194C  3223               	rrcf	___ftmul@f1+2,f,c
  4714  00194E  3222               	rrcf	___ftmul@f1+1,f,c
  4715  001950  3221               	rrcf	___ftmul@f1,f,c
  4716  001952  90D8               	bcf	status,0,c
  4717  001954  3624               	rlcf	___ftmul@f2,f,c
  4718  001956  3625               	rlcf	___ftmul@f2+1,f,c
  4719  001958  3626               	rlcf	___ftmul@f2+2,f,c
  4720  00195A  2E2E               	decfsz	___ftmul@cntr,f,c
  4721  00195C  D7EE               	goto	l2139
  4722  00195E  0E09               	movlw	9
  4723  001960  6E2E               	movwf	___ftmul@cntr,c
  4724  001962                     l2149:
  4725  001962  A021               	btfss	___ftmul@f1,0,c
  4726  001964  D006               	goto	l2153
  4727  001966  5024               	movf	___ftmul@f2,w,c
  4728  001968  262B               	addwf	___ftmul@f3_as_product,f,c
  4729  00196A  5025               	movf	___ftmul@f2+1,w,c
  4730  00196C  222C               	addwfc	___ftmul@f3_as_product+1,f,c
  4731  00196E  5026               	movf	___ftmul@f2+2,w,c
  4732  001970  222D               	addwfc	___ftmul@f3_as_product+2,f,c
  4733  001972                     l2153:
  4734  001972  90D8               	bcf	status,0,c
  4735  001974  3223               	rrcf	___ftmul@f1+2,f,c
  4736  001976  3222               	rrcf	___ftmul@f1+1,f,c
  4737  001978  3221               	rrcf	___ftmul@f1,f,c
  4738  00197A  90D8               	bcf	status,0,c
  4739  00197C  322D               	rrcf	___ftmul@f3_as_product+2,f,c
  4740  00197E  322C               	rrcf	___ftmul@f3_as_product+1,f,c
  4741  001980  322B               	rrcf	___ftmul@f3_as_product,f,c
  4742  001982  2E2E               	decfsz	___ftmul@cntr,f,c
  4743  001984  D7EE               	goto	l2149
  4744  001986  C02B  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  4745  00198A  C02C  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4746  00198E  C02D  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4747  001992  C02A  F012         	movff	___ftmul@exp,___ftpack@exp
  4748  001996  C02F  F013         	movff	___ftmul@sign,___ftpack@sign
  4749  00199A  ECF3  F00E         	call	___ftpack	;wreg free
  4750  00199E  C00F  F021         	movff	?___ftpack,?___ftmul
  4751  0019A2  C010  F022         	movff	?___ftpack+1,?___ftmul+1
  4752  0019A6  C011  F023         	movff	?___ftpack+2,?___ftmul+2
  4753  0019AA  0012               	return	
  4754  0019AC                     __end_of___ftmul:
  4755                           	opt stack 0
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           intcon	equ	0xFF2
  4763                           postinc0	equ	0xFEE
  4764                           wreg	equ	0xFE8
  4765                           postdec1	equ	0xFE5
  4766                           fsr1l	equ	0xFE1
  4767                           indf2	equ	0xFDF
  4768                           postinc2	equ	0xFDE
  4769                           postdec2	equ	0xFDD
  4770                           fsr2h	equ	0xFDA
  4771                           fsr2l	equ	0xFD9
  4772                           status	equ	0xFD8
  4773                           
  4774 ;; *************** function ___ftge *****************
  4775 ;; Defined at:
  4776 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  ff1             3   59[COMRAM] float 
  4779 ;;  ff2             3   62[COMRAM] float 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;		None
  4782 ;; Return value:  Size  Location     Type
  4783 ;;		None               void
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4791 ;;      Params:         6       0       0       0       0       0       0       0       0
  4792 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4793 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4794 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4795 ;;Total ram usage:        9 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    1
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_fsm
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text25
  4806  001FD0                     __ptext25:
  4807                           	opt stack 0
  4808  001FD0                     ___ftge:
  4809                           	opt stack 28
  4810                           
  4811                           ;incstack = 0
  4812  001FD0  AE3E               	btfss	___ftge@ff1+2,7,c
  4813  001FD2  D016               	goto	l2213
  4814  001FD4  C03C  F042         	movff	___ftge@ff1,??___ftge
  4815  001FD8  C03D  F043         	movff	___ftge@ff1+1,??___ftge+1
  4816  001FDC  C03E  F044         	movff	___ftge@ff1+2,??___ftge+2
  4817  001FE0  1E42               	comf	??___ftge,f,c
  4818  001FE2  1E43               	comf	??___ftge+1,f,c
  4819  001FE4  1E44               	comf	??___ftge+2,f,c
  4820  001FE6  2A42               	incf	??___ftge,f,c
  4821  001FE8  0E00               	movlw	0
  4822  001FEA  2243               	addwfc	??___ftge+1,f,c
  4823  001FEC  2244               	addwfc	??___ftge+2,f,c
  4824  001FEE  0E00               	movlw	0
  4825  001FF0  2442               	addwf	??___ftge,w,c
  4826  001FF2  6E3C               	movwf	___ftge@ff1,c
  4827  001FF4  0E00               	movlw	0
  4828  001FF6  2043               	addwfc	??___ftge+1,w,c
  4829  001FF8  6E3D               	movwf	___ftge@ff1+1,c
  4830  001FFA  0E80               	movlw	128
  4831  001FFC  2044               	addwfc	??___ftge+2,w,c
  4832  001FFE  6E3E               	movwf	___ftge@ff1+2,c
  4833  002000                     l2213:
  4834  002000  AE41               	btfss	___ftge@ff2+2,7,c
  4835  002002  D016               	goto	l2217
  4836  002004  C03F  F042         	movff	___ftge@ff2,??___ftge
  4837  002008  C040  F043         	movff	___ftge@ff2+1,??___ftge+1
  4838  00200C  C041  F044         	movff	___ftge@ff2+2,??___ftge+2
  4839  002010  1E42               	comf	??___ftge,f,c
  4840  002012  1E43               	comf	??___ftge+1,f,c
  4841  002014  1E44               	comf	??___ftge+2,f,c
  4842  002016  2A42               	incf	??___ftge,f,c
  4843  002018  0E00               	movlw	0
  4844  00201A  2243               	addwfc	??___ftge+1,f,c
  4845  00201C  2244               	addwfc	??___ftge+2,f,c
  4846  00201E  0E00               	movlw	0
  4847  002020  2442               	addwf	??___ftge,w,c
  4848  002022  6E3F               	movwf	___ftge@ff2,c
  4849  002024  0E00               	movlw	0
  4850  002026  2043               	addwfc	??___ftge+1,w,c
  4851  002028  6E40               	movwf	___ftge@ff2+1,c
  4852  00202A  0E80               	movlw	128
  4853  00202C  2044               	addwfc	??___ftge+2,w,c
  4854  00202E  6E41               	movwf	___ftge@ff2+2,c
  4855  002030                     l2217:
  4856  002030  0E00               	movlw	0
  4857  002032  1A3C               	xorwf	___ftge@ff1,f,c
  4858  002034  0E00               	movlw	0
  4859  002036  1A3D               	xorwf	___ftge@ff1+1,f,c
  4860  002038  0E80               	movlw	128
  4861  00203A  1A3E               	xorwf	___ftge@ff1+2,f,c
  4862  00203C  0E00               	movlw	0
  4863  00203E  1A3F               	xorwf	___ftge@ff2,f,c
  4864  002040  0E00               	movlw	0
  4865  002042  1A40               	xorwf	___ftge@ff2+1,f,c
  4866  002044  0E80               	movlw	128
  4867  002046  1A41               	xorwf	___ftge@ff2+2,f,c
  4868  002048  503F               	movf	___ftge@ff2,w,c
  4869  00204A  5C3C               	subwf	___ftge@ff1,w,c
  4870  00204C  5040               	movf	___ftge@ff2+1,w,c
  4871  00204E  583D               	subwfb	___ftge@ff1+1,w,c
  4872  002050  5041               	movf	___ftge@ff2+2,w,c
  4873  002052  583E               	subwfb	___ftge@ff1+2,w,c
  4874  002054  B0D8               	btfsc	status,0,c
  4875  002056  D002               	goto	l2223
  4876  002058  90D8               	bcf	status,0,c
  4877  00205A  0012               	return	
  4878  00205C                     l2223:
  4879  00205C  80D8               	bsf	status,0,c
  4880  00205E  0012               	return	
  4881  002060                     __end_of___ftge:
  4882                           	opt stack 0
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           intcon	equ	0xFF2
  4890                           postinc0	equ	0xFEE
  4891                           wreg	equ	0xFE8
  4892                           postdec1	equ	0xFE5
  4893                           fsr1l	equ	0xFE1
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function ___ftadd *****************
  4902 ;; Defined at:
  4903 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  f1              3   47[COMRAM] float 
  4906 ;;  f2              3   50[COMRAM] float 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  exp1            1   58[COMRAM] unsigned char 
  4909 ;;  exp2            1   57[COMRAM] unsigned char 
  4910 ;;  sign            1   56[COMRAM] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  3   47[COMRAM] float 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4920 ;;      Params:         6       0       0       0       0       0       0       0       0
  4921 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4922 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4923 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4924 ;;Total ram usage:       12 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    2
  4927 ;; This function calls:
  4928 ;;		___ftpack
  4929 ;; This function is called by:
  4930 ;;		_fsm
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text26
  4935  0014E4                     __ptext26:
  4936                           	opt stack 0
  4937  0014E4                     ___ftadd:
  4938                           	opt stack 27
  4939                           
  4940                           ;incstack = 0
  4941  0014E4  C032  F036         	movff	___ftadd@f1+2,??___ftadd
  4942  0014E8  6A37               	clrf	(??___ftadd+1)& (0+255),c
  4943  0014EA  6A38               	clrf	(??___ftadd+2)& (0+255),c
  4944  0014EC  3431               	rlcf	___ftadd@f1+1,w,c
  4945  0014EE  3636               	rlcf	??___ftadd& (0+255),f,c
  4946  0014F0  E301               	bnc	u1741
  4947  0014F2  8037               	bsf	(??___ftadd+1)& (0+255),0,c
  4948  0014F4                     u1741:
  4949  0014F4  5036               	movf	??___ftadd,w,c
  4950  0014F6  6E3B               	movwf	___ftadd@exp1,c
  4951  0014F8  C035  F036         	movff	___ftadd@f2+2,??___ftadd
  4952  0014FC  6A37               	clrf	(??___ftadd+1)& (0+255),c
  4953  0014FE  6A38               	clrf	(??___ftadd+2)& (0+255),c
  4954  001500  3434               	rlcf	___ftadd@f2+1,w,c
  4955  001502  3636               	rlcf	??___ftadd& (0+255),f,c
  4956  001504  E301               	bnc	u1751
  4957  001506  8037               	bsf	(??___ftadd+1)& (0+255),0,c
  4958  001508                     u1751:
  4959  001508  5036               	movf	??___ftadd,w,c
  4960  00150A  6E3A               	movwf	___ftadd@exp2,c
  4961  00150C  503B               	movf	___ftadd@exp1,w,c
  4962  00150E  B4D8               	btfsc	status,2,c
  4963  001510  D00B               	goto	l515
  4964  001512  503A               	movf	___ftadd@exp2,w,c
  4965  001514  5C3B               	subwf	___ftadd@exp1,w,c
  4966  001516  B0D8               	btfsc	status,0,c
  4967  001518  D00E               	goto	l2051
  4968  00151A  503B               	movf	___ftadd@exp1,w,c
  4969  00151C  0800               	sublw	0
  4970  00151E  243A               	addwf	___ftadd@exp2,w,c
  4971  001520  6E36               	movwf	??___ftadd& (0+255),c
  4972  001522  0E18               	movlw	24
  4973  001524  6436               	cpfsgt	??___ftadd,c
  4974  001526  D007               	goto	l2051
  4975  001528                     l515:
  4976  001528  C033  F030         	movff	___ftadd@f2,?___ftadd
  4977  00152C  C034  F031         	movff	___ftadd@f2+1,?___ftadd+1
  4978  001530  C035  F032         	movff	___ftadd@f2+2,?___ftadd+2
  4979  001534  0012               	return	
  4980  001536                     l2051:
  4981  001536  503A               	movf	___ftadd@exp2,w,c
  4982  001538  B4D8               	btfsc	status,2,c
  4983  00153A  D00B               	goto	l519
  4984  00153C  503B               	movf	___ftadd@exp1,w,c
  4985  00153E  5C3A               	subwf	___ftadd@exp2,w,c
  4986  001540  B0D8               	btfsc	status,0,c
  4987  001542  D00E               	goto	l2057
  4988  001544  503A               	movf	___ftadd@exp2,w,c
  4989  001546  0800               	sublw	0
  4990  001548  243B               	addwf	___ftadd@exp1,w,c
  4991  00154A  6E36               	movwf	??___ftadd& (0+255),c
  4992  00154C  0E18               	movlw	24
  4993  00154E  6436               	cpfsgt	??___ftadd,c
  4994  001550  D007               	goto	l2057
  4995  001552                     l519:
  4996  001552  C030  F030         	movff	___ftadd@f1,?___ftadd
  4997  001556  C031  F031         	movff	___ftadd@f1+1,?___ftadd+1
  4998  00155A  C032  F032         	movff	___ftadd@f1+2,?___ftadd+2
  4999  00155E  0012               	return	
  5000  001560                     l2057:
  5001  001560  0E06               	movlw	6
  5002  001562  6E39               	movwf	___ftadd@sign,c
  5003  001564  BE32               	btfsc	___ftadd@f1+2,7,c
  5004  001566  8E39               	bsf	___ftadd@sign,7,c
  5005  001568  BE35               	btfsc	___ftadd@f2+2,7,c
  5006  00156A  8C39               	bsf	___ftadd@sign,6,c
  5007  00156C  8E31               	bsf	___ftadd@f1+1,7,c
  5008  00156E  0EFF               	movlw	255
  5009  001570  1630               	andwf	___ftadd@f1,f,c
  5010  001572  0EFF               	movlw	255
  5011  001574  1631               	andwf	___ftadd@f1+1,f,c
  5012  001576  0E00               	movlw	0
  5013  001578  1632               	andwf	___ftadd@f1+2,f,c
  5014  00157A  8E34               	bsf	___ftadd@f2+1,7,c
  5015  00157C  0EFF               	movlw	255
  5016  00157E  1633               	andwf	___ftadd@f2,f,c
  5017  001580  0EFF               	movlw	255
  5018  001582  1634               	andwf	___ftadd@f2+1,f,c
  5019  001584  0E00               	movlw	0
  5020  001586  1635               	andwf	___ftadd@f2+2,f,c
  5021  001588  503A               	movf	___ftadd@exp2,w,c
  5022  00158A  5C3B               	subwf	___ftadd@exp1,w,c
  5023  00158C  B0D8               	btfsc	status,0,c
  5024  00158E  D01B               	goto	l2083
  5025  001590                     l2073:
  5026  001590  90D8               	bcf	status,0,c
  5027  001592  3633               	rlcf	___ftadd@f2,f,c
  5028  001594  3634               	rlcf	___ftadd@f2+1,f,c
  5029  001596  3635               	rlcf	___ftadd@f2+2,f,c
  5030  001598  063A               	decf	___ftadd@exp2,f,c
  5031  00159A  503B               	movf	___ftadd@exp1,w,c
  5032  00159C  183A               	xorwf	___ftadd@exp2,w,c
  5033  00159E  B4D8               	btfsc	status,2,c
  5034  0015A0  D00D               	goto	l2081
  5035  0015A2  0639               	decf	___ftadd@sign,f,c
  5036  0015A4  C039  F036         	movff	___ftadd@sign,??___ftadd
  5037  0015A8  0E07               	movlw	7
  5038  0015AA  1636               	andwf	??___ftadd,f,c
  5039  0015AC  B4D8               	btfsc	status,2,c
  5040  0015AE  D006               	goto	l2081
  5041  0015B0  D7EF               	goto	l2073
  5042  0015B2                     l2079:
  5043  0015B2  90D8               	bcf	status,0,c
  5044  0015B4  3232               	rrcf	___ftadd@f1+2,f,c
  5045  0015B6  3231               	rrcf	___ftadd@f1+1,f,c
  5046  0015B8  3230               	rrcf	___ftadd@f1,f,c
  5047  0015BA  2A3B               	incf	___ftadd@exp1,f,c
  5048  0015BC                     l2081:
  5049  0015BC  503A               	movf	___ftadd@exp2,w,c
  5050  0015BE  183B               	xorwf	___ftadd@exp1,w,c
  5051  0015C0  B4D8               	btfsc	status,2,c
  5052  0015C2  D01F               	goto	l530
  5053  0015C4  D7F6               	goto	l2079
  5054  0015C6                     l2083:
  5055  0015C6  503B               	movf	___ftadd@exp1,w,c
  5056  0015C8  5C3A               	subwf	___ftadd@exp2,w,c
  5057  0015CA  B0D8               	btfsc	status,0,c
  5058  0015CC  D01A               	goto	l530
  5059  0015CE                     l2085:
  5060  0015CE  90D8               	bcf	status,0,c
  5061  0015D0  3630               	rlcf	___ftadd@f1,f,c
  5062  0015D2  3631               	rlcf	___ftadd@f1+1,f,c
  5063  0015D4  3632               	rlcf	___ftadd@f1+2,f,c
  5064  0015D6  063B               	decf	___ftadd@exp1,f,c
  5065  0015D8  503B               	movf	___ftadd@exp1,w,c
  5066  0015DA  183A               	xorwf	___ftadd@exp2,w,c
  5067  0015DC  B4D8               	btfsc	status,2,c
  5068  0015DE  D00D               	goto	l2093
  5069  0015E0  0639               	decf	___ftadd@sign,f,c
  5070  0015E2  C039  F036         	movff	___ftadd@sign,??___ftadd
  5071  0015E6  0E07               	movlw	7
  5072  0015E8  1636               	andwf	??___ftadd,f,c
  5073  0015EA  B4D8               	btfsc	status,2,c
  5074  0015EC  D006               	goto	l2093
  5075  0015EE  D7EF               	goto	l2085
  5076  0015F0                     l2091:
  5077  0015F0  90D8               	bcf	status,0,c
  5078  0015F2  3235               	rrcf	___ftadd@f2+2,f,c
  5079  0015F4  3234               	rrcf	___ftadd@f2+1,f,c
  5080  0015F6  3233               	rrcf	___ftadd@f2,f,c
  5081  0015F8  2A3A               	incf	___ftadd@exp2,f,c
  5082  0015FA                     l2093:
  5083  0015FA  503A               	movf	___ftadd@exp2,w,c
  5084  0015FC  183B               	xorwf	___ftadd@exp1,w,c
  5085  0015FE  A4D8               	btfss	status,2,c
  5086  001600  D7F7               	goto	l2091
  5087  001602                     l530:
  5088  001602  AE39               	btfss	___ftadd@sign,7,c
  5089  001604  D00C               	goto	l539
  5090  001606  0EFF               	movlw	255
  5091  001608  1A30               	xorwf	___ftadd@f1,f,c
  5092  00160A  0EFF               	movlw	255
  5093  00160C  1A31               	xorwf	___ftadd@f1+1,f,c
  5094  00160E  0EFF               	movlw	255
  5095  001610  1A32               	xorwf	___ftadd@f1+2,f,c
  5096  001612  0E01               	movlw	1
  5097  001614  2630               	addwf	___ftadd@f1,f,c
  5098  001616  0E00               	movlw	0
  5099  001618  2231               	addwfc	___ftadd@f1+1,f,c
  5100  00161A  0E00               	movlw	0
  5101  00161C  2232               	addwfc	___ftadd@f1+2,f,c
  5102  00161E                     l539:
  5103  00161E  AC39               	btfss	___ftadd@sign,6,c
  5104  001620  D00C               	goto	l2099
  5105  001622  0EFF               	movlw	255
  5106  001624  1A33               	xorwf	___ftadd@f2,f,c
  5107  001626  0EFF               	movlw	255
  5108  001628  1A34               	xorwf	___ftadd@f2+1,f,c
  5109  00162A  0EFF               	movlw	255
  5110  00162C  1A35               	xorwf	___ftadd@f2+2,f,c
  5111  00162E  0E01               	movlw	1
  5112  001630  2633               	addwf	___ftadd@f2,f,c
  5113  001632  0E00               	movlw	0
  5114  001634  2234               	addwfc	___ftadd@f2+1,f,c
  5115  001636  0E00               	movlw	0
  5116  001638  2235               	addwfc	___ftadd@f2+2,f,c
  5117  00163A                     l2099:
  5118  00163A  0E00               	movlw	0
  5119  00163C  6E39               	movwf	___ftadd@sign,c
  5120  00163E  5030               	movf	___ftadd@f1,w,c
  5121  001640  2633               	addwf	___ftadd@f2,f,c
  5122  001642  5031               	movf	___ftadd@f1+1,w,c
  5123  001644  2234               	addwfc	___ftadd@f2+1,f,c
  5124  001646  5032               	movf	___ftadd@f1+2,w,c
  5125  001648  2235               	addwfc	___ftadd@f2+2,f,c
  5126  00164A  AE35               	btfss	___ftadd@f2+2,7,c
  5127  00164C  D00E               	goto	l2109
  5128  00164E  0EFF               	movlw	255
  5129  001650  1A33               	xorwf	___ftadd@f2,f,c
  5130  001652  0EFF               	movlw	255
  5131  001654  1A34               	xorwf	___ftadd@f2+1,f,c
  5132  001656  0EFF               	movlw	255
  5133  001658  1A35               	xorwf	___ftadd@f2+2,f,c
  5134  00165A  0E01               	movlw	1
  5135  00165C  2633               	addwf	___ftadd@f2,f,c
  5136  00165E  0E00               	movlw	0
  5137  001660  2234               	addwfc	___ftadd@f2+1,f,c
  5138  001662  0E00               	movlw	0
  5139  001664  2235               	addwfc	___ftadd@f2+2,f,c
  5140  001666  0E01               	movlw	1
  5141  001668  6E39               	movwf	___ftadd@sign,c
  5142  00166A                     l2109:
  5143  00166A  C033  F00F         	movff	___ftadd@f2,___ftpack@arg
  5144  00166E  C034  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  5145  001672  C035  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  5146  001676  C03B  F012         	movff	___ftadd@exp1,___ftpack@exp
  5147  00167A  C039  F013         	movff	___ftadd@sign,___ftpack@sign
  5148  00167E  ECF3  F00E         	call	___ftpack	;wreg free
  5149  001682  C00F  F030         	movff	?___ftpack,?___ftadd
  5150  001686  C010  F031         	movff	?___ftpack+1,?___ftadd+1
  5151  00168A  C011  F032         	movff	?___ftpack+2,?___ftadd+2
  5152  00168E  0012               	return	
  5153  001690                     __end_of___ftadd:
  5154                           	opt stack 0
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           postdec1	equ	0xFE5
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           fsr2h	equ	0xFDA
  5170                           fsr2l	equ	0xFD9
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function ___awtoft *****************
  5174 ;; Defined at:
  5175 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  c               2   28[COMRAM] int 
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;  sign            1   31[COMRAM] unsigned char 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  3   28[COMRAM] float 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5189 ;;      Params:         3       0       0       0       0       0       0       0       0
  5190 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5192 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5193 ;;Total ram usage:        4 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    2
  5196 ;; This function calls:
  5197 ;;		___ftpack
  5198 ;; This function is called by:
  5199 ;;		_fsm
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           	psect	text27
  5204  0024F8                     __ptext27:
  5205                           	opt stack 0
  5206  0024F8                     ___awtoft:
  5207                           	opt stack 27
  5208                           
  5209                           ;incstack = 0
  5210  0024F8  0E00               	movlw	0
  5211  0024FA  6E20               	movwf	___awtoft@sign,c
  5212  0024FC  AE1E               	btfss	___awtoft@c+1,7,c
  5213  0024FE  D006               	goto	l2205
  5214  002500  6C1D               	negf	___awtoft@c,c
  5215  002502  1E1E               	comf	___awtoft@c+1,f,c
  5216  002504  B0D8               	btfsc	status,0,c
  5217  002506  2A1E               	incf	___awtoft@c+1,f,c
  5218  002508  0E01               	movlw	1
  5219  00250A  6E20               	movwf	___awtoft@sign,c
  5220  00250C                     l2205:
  5221  00250C  C01D  F00F         	movff	___awtoft@c,___ftpack@arg
  5222  002510  C01E  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  5223  002514  6A11               	clrf	___ftpack@arg+2,c
  5224  002516  0E8E               	movlw	142
  5225  002518  6E12               	movwf	___ftpack@exp,c
  5226  00251A  C020  F013         	movff	___awtoft@sign,___ftpack@sign
  5227  00251E  ECF3  F00E         	call	___ftpack	;wreg free
  5228  002522  C00F  F01D         	movff	?___ftpack,?___awtoft
  5229  002526  C010  F01E         	movff	?___ftpack+1,?___awtoft+1
  5230  00252A  C011  F01F         	movff	?___ftpack+2,?___awtoft+2
  5231  00252E  0012               	return	
  5232  002530                     __end_of___awtoft:
  5233                           	opt stack 0
  5234                           tblptru	equ	0xFF8
  5235                           tblptrh	equ	0xFF7
  5236                           tblptrl	equ	0xFF6
  5237                           tablat	equ	0xFF5
  5238                           prodh	equ	0xFF4
  5239                           prodl	equ	0xFF3
  5240                           intcon	equ	0xFF2
  5241                           postinc0	equ	0xFEE
  5242                           wreg	equ	0xFE8
  5243                           postdec1	equ	0xFE5
  5244                           fsr1l	equ	0xFE1
  5245                           indf2	equ	0xFDF
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function ___ftpack *****************
  5253 ;; Defined at:
  5254 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  arg             3   14[COMRAM] unsigned um
  5257 ;;  exp             1   17[COMRAM] unsigned char 
  5258 ;;  sign            1   18[COMRAM] unsigned char 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;		None
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  3   14[COMRAM] float 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5270 ;;      Params:         5       0       0       0       0       0       0       0       0
  5271 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5272 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5273 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5274 ;;Total ram usage:        8 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    1
  5277 ;; This function calls:
  5278 ;;		Nothing
  5279 ;; This function is called by:
  5280 ;;		___altoft
  5281 ;;		___awtoft
  5282 ;;		___ftadd
  5283 ;;		___ftdiv
  5284 ;;		___ftmul
  5285 ;;		___lbtoft
  5286 ;;		___lwtoft
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text28
  5291  001DE6                     __ptext28:
  5292                           	opt stack 0
  5293  001DE6                     ___ftpack:
  5294                           	opt stack 27
  5295                           
  5296                           ;incstack = 0
  5297  001DE6  5012               	movf	___ftpack@exp,w,c
  5298  001DE8  B4D8               	btfsc	status,2,c
  5299  001DEA  D005               	goto	l1699
  5300  001DEC  500F               	movf	___ftpack@arg,w,c
  5301  001DEE  1010               	iorwf	___ftpack@arg+1,w,c
  5302  001DF0  1011               	iorwf	___ftpack@arg+2,w,c
  5303  001DF2  A4D8               	btfss	status,2,c
  5304  001DF4  D00C               	goto	l1705
  5305  001DF6                     l1699:
  5306  001DF6  0E00               	movlw	0
  5307  001DF8  6E0F               	movwf	?___ftpack,c
  5308  001DFA  0E00               	movlw	0
  5309  001DFC  6E10               	movwf	?___ftpack+1,c
  5310  001DFE  0E00               	movlw	0
  5311  001E00  6E11               	movwf	?___ftpack+2,c
  5312  001E02  0012               	return	
  5313  001E04                     l1703:
  5314  001E04  2A12               	incf	___ftpack@exp,f,c
  5315  001E06  90D8               	bcf	status,0,c
  5316  001E08  3211               	rrcf	___ftpack@arg+2,f,c
  5317  001E0A  3210               	rrcf	___ftpack@arg+1,f,c
  5318  001E0C  320F               	rrcf	___ftpack@arg,f,c
  5319  001E0E                     l1705:
  5320  001E0E  0E00               	movlw	0
  5321  001E10  140F               	andwf	___ftpack@arg,w,c
  5322  001E12  6E14               	movwf	??___ftpack& (0+255),c
  5323  001E14  0E00               	movlw	0
  5324  001E16  1410               	andwf	___ftpack@arg+1,w,c
  5325  001E18  6E15               	movwf	(??___ftpack+1)& (0+255),c
  5326  001E1A  0EFE               	movlw	254
  5327  001E1C  1411               	andwf	___ftpack@arg+2,w,c
  5328  001E1E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5329  001E20  5014               	movf	??___ftpack,w,c
  5330  001E22  1015               	iorwf	??___ftpack+1,w,c
  5331  001E24  1016               	iorwf	??___ftpack+2,w,c
  5332  001E26  B4D8               	btfsc	status,2,c
  5333  001E28  D00C               	goto	l1711
  5334  001E2A  D7EC               	goto	l1703
  5335  001E2C                     l1707:
  5336  001E2C  2A12               	incf	___ftpack@exp,f,c
  5337  001E2E  0E01               	movlw	1
  5338  001E30  260F               	addwf	___ftpack@arg,f,c
  5339  001E32  0E00               	movlw	0
  5340  001E34  2210               	addwfc	___ftpack@arg+1,f,c
  5341  001E36  0E00               	movlw	0
  5342  001E38  2211               	addwfc	___ftpack@arg+2,f,c
  5343  001E3A  90D8               	bcf	status,0,c
  5344  001E3C  3211               	rrcf	___ftpack@arg+2,f,c
  5345  001E3E  3210               	rrcf	___ftpack@arg+1,f,c
  5346  001E40  320F               	rrcf	___ftpack@arg,f,c
  5347  001E42                     l1711:
  5348  001E42  0E00               	movlw	0
  5349  001E44  140F               	andwf	___ftpack@arg,w,c
  5350  001E46  6E14               	movwf	??___ftpack& (0+255),c
  5351  001E48  0E00               	movlw	0
  5352  001E4A  1410               	andwf	___ftpack@arg+1,w,c
  5353  001E4C  6E15               	movwf	(??___ftpack+1)& (0+255),c
  5354  001E4E  0EFF               	movlw	255
  5355  001E50  1411               	andwf	___ftpack@arg+2,w,c
  5356  001E52  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5357  001E54  5014               	movf	??___ftpack,w,c
  5358  001E56  1015               	iorwf	??___ftpack+1,w,c
  5359  001E58  1016               	iorwf	??___ftpack+2,w,c
  5360  001E5A  B4D8               	btfsc	status,2,c
  5361  001E5C  D006               	goto	l1715
  5362  001E5E  D7E6               	goto	l1707
  5363  001E60                     l1713:
  5364  001E60  0612               	decf	___ftpack@exp,f,c
  5365  001E62  90D8               	bcf	status,0,c
  5366  001E64  360F               	rlcf	___ftpack@arg,f,c
  5367  001E66  3610               	rlcf	___ftpack@arg+1,f,c
  5368  001E68  3611               	rlcf	___ftpack@arg+2,f,c
  5369  001E6A                     l1715:
  5370  001E6A  BE10               	btfsc	___ftpack@arg+1,7,c
  5371  001E6C  D003               	goto	l492
  5372  001E6E  0E02               	movlw	2
  5373  001E70  6012               	cpfslt	___ftpack@exp,c
  5374  001E72  D7F6               	goto	l1713
  5375  001E74                     l492:
  5376  001E74  A012               	btfss	___ftpack@exp,0,c
  5377  001E76  9E10               	bcf	___ftpack@arg+1,7,c
  5378  001E78  90D8               	bcf	status,0,c
  5379  001E7A  3212               	rrcf	___ftpack@exp,f,c
  5380  001E7C  5012               	movf	___ftpack@exp,w,c
  5381  001E7E  1211               	iorwf	___ftpack@arg+2,f,c
  5382  001E80  5013               	movf	___ftpack@sign,w,c
  5383  001E82  A4D8               	btfss	status,2,c
  5384  001E84  8E11               	bsf	___ftpack@arg+2,7,c
  5385  001E86  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  5386  001E8A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  5387  001E8E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  5388  001E92  0012               	return	
  5389  001E94                     __end_of___ftpack:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           postinc0	equ	0xFEE
  5399                           wreg	equ	0xFE8
  5400                           postdec1	equ	0xFE5
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function ___awmod *****************
  5410 ;; Defined at:
  5411 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/awmod.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  dividend        2   28[COMRAM] int 
  5414 ;;  divisor         2   30[COMRAM] int 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  sign            1   33[COMRAM] unsigned char 
  5417 ;;  counter         1   32[COMRAM] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  2   28[COMRAM] int 
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5427 ;;      Params:         4       0       0       0       0       0       0       0       0
  5428 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5430 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5431 ;;Total ram usage:        6 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    1
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_fsm
  5438 ;;		_PWM_ISR
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text29
  5443  0021E2                     __ptext29:
  5444                           	opt stack 0
  5445  0021E2                     ___awmod:
  5446                           	opt stack 28
  5447                           
  5448                           ;incstack = 0
  5449  0021E2  0E00               	movlw	0
  5450  0021E4  6E22               	movwf	___awmod@sign,c
  5451  0021E6  AE1E               	btfss	___awmod@dividend+1,7,c
  5452  0021E8  D006               	goto	l2169
  5453  0021EA  6C1D               	negf	___awmod@dividend,c
  5454  0021EC  1E1E               	comf	___awmod@dividend+1,f,c
  5455  0021EE  B0D8               	btfsc	status,0,c
  5456  0021F0  2A1E               	incf	___awmod@dividend+1,f,c
  5457  0021F2  0E01               	movlw	1
  5458  0021F4  6E22               	movwf	___awmod@sign,c
  5459  0021F6                     l2169:
  5460  0021F6  AE20               	btfss	___awmod@divisor+1,7,c
  5461  0021F8  D004               	goto	l2173
  5462  0021FA  6C1F               	negf	___awmod@divisor,c
  5463  0021FC  1E20               	comf	___awmod@divisor+1,f,c
  5464  0021FE  B0D8               	btfsc	status,0,c
  5465  002200  2A20               	incf	___awmod@divisor+1,f,c
  5466  002202                     l2173:
  5467  002202  501F               	movf	___awmod@divisor,w,c
  5468  002204  1020               	iorwf	___awmod@divisor+1,w,c
  5469  002206  B4D8               	btfsc	status,2,c
  5470  002208  D018               	goto	l2189
  5471  00220A  0E01               	movlw	1
  5472  00220C  6E21               	movwf	___awmod@counter,c
  5473  00220E  D004               	goto	l2179
  5474  002210                     l2177:
  5475  002210  90D8               	bcf	status,0,c
  5476  002212  361F               	rlcf	___awmod@divisor,f,c
  5477  002214  3620               	rlcf	___awmod@divisor+1,f,c
  5478  002216  2A21               	incf	___awmod@counter,f,c
  5479  002218                     l2179:
  5480  002218  AE20               	btfss	___awmod@divisor+1,7,c
  5481  00221A  D7FA               	goto	l2177
  5482  00221C                     l2181:
  5483  00221C  501F               	movf	___awmod@divisor,w,c
  5484  00221E  5C1D               	subwf	___awmod@dividend,w,c
  5485  002220  5020               	movf	___awmod@divisor+1,w,c
  5486  002222  581E               	subwfb	___awmod@dividend+1,w,c
  5487  002224  A0D8               	btfss	status,0,c
  5488  002226  D004               	goto	l2185
  5489  002228  501F               	movf	___awmod@divisor,w,c
  5490  00222A  5E1D               	subwf	___awmod@dividend,f,c
  5491  00222C  5020               	movf	___awmod@divisor+1,w,c
  5492  00222E  5A1E               	subwfb	___awmod@dividend+1,f,c
  5493  002230                     l2185:
  5494  002230  90D8               	bcf	status,0,c
  5495  002232  3220               	rrcf	___awmod@divisor+1,f,c
  5496  002234  321F               	rrcf	___awmod@divisor,f,c
  5497  002236  2E21               	decfsz	___awmod@counter,f,c
  5498  002238  D7F1               	goto	l2181
  5499  00223A                     l2189:
  5500  00223A  5022               	movf	___awmod@sign,w,c
  5501  00223C  B4D8               	btfsc	status,2,c
  5502  00223E  D004               	goto	l2193
  5503  002240  6C1D               	negf	___awmod@dividend,c
  5504  002242  1E1E               	comf	___awmod@dividend+1,f,c
  5505  002244  B0D8               	btfsc	status,0,c
  5506  002246  2A1E               	incf	___awmod@dividend+1,f,c
  5507  002248                     l2193:
  5508  002248  C01D  F01D         	movff	___awmod@dividend,?___awmod
  5509  00224C  C01E  F01E         	movff	___awmod@dividend+1,?___awmod+1
  5510  002250  0012               	return	
  5511  002252                     __end_of___awmod:
  5512                           	opt stack 0
  5513                           tblptru	equ	0xFF8
  5514                           tblptrh	equ	0xFF7
  5515                           tblptrl	equ	0xFF6
  5516                           tablat	equ	0xFF5
  5517                           prodh	equ	0xFF4
  5518                           prodl	equ	0xFF3
  5519                           intcon	equ	0xFF2
  5520                           postinc0	equ	0xFEE
  5521                           wreg	equ	0xFE8
  5522                           postdec1	equ	0xFE5
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _interrupt_handler *****************
  5532 ;; Defined at:
  5533 ;;		line 76 in file "config.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;		None
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		None
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5547 ;;      Params:         0       0       0       0       0       0       0       0       0
  5548 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5549 ;;      Temps:         14       0       0       0       0       0       0       0       0
  5550 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5551 ;;Total ram usage:       14 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; This function calls:
  5554 ;;		Nothing
  5555 ;; This function is called by:
  5556 ;;		Interrupt level 2
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	intcode
  5561  001008                     __pintcode:
  5562                           	opt stack 0
  5563  001008                     _interrupt_handler:
  5564                           	opt stack 25
  5565                           
  5566                           ;incstack = 0
  5567  001008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5568  00100A  CFFA F001          	movff	pclath,??_interrupt_handler
  5569  00100E  CFFB F002          	movff	pclatu,??_interrupt_handler+1
  5570  001012  ED29  F011         	call	int_func,f	;refresh shadow registers
  5571                           pclatu	equ	0xFFB
  5572                           pclath	equ	0xFFA
  5573                           tblptru	equ	0xFF8
  5574                           tblptrh	equ	0xFF7
  5575                           tblptrl	equ	0xFF6
  5576                           tablat	equ	0xFF5
  5577                           prodh	equ	0xFF4
  5578                           prodl	equ	0xFF3
  5579                           intcon	equ	0xFF2
  5580                           postinc0	equ	0xFEE
  5581                           wreg	equ	0xFE8
  5582                           postdec1	equ	0xFE5
  5583                           fsr1l	equ	0xFE1
  5584                           indf2	equ	0xFDF
  5585                           postinc2	equ	0xFDE
  5586                           postdec2	equ	0xFDD
  5587                           fsr2h	equ	0xFDA
  5588                           fsr2l	equ	0xFD9
  5589                           status	equ	0xFD8
  5590                           
  5591                           	psect	intcode_body
  5592  002252                     __pintcode_body:
  5593                           	opt stack 25
  5594  002252                     int_func:
  5595                           	opt stack 25
  5596  002252  0006               	pop		; remove dummy address from shadow register refresh
  5597  002254  CFE9 F003          	movff	fsr0l,??_interrupt_handler+2
  5598  002258  CFEA F004          	movff	fsr0h,??_interrupt_handler+3
  5599  00225C  CFE1 F005          	movff	fsr1l,??_interrupt_handler+4
  5600  002260  CFE2 F006          	movff	fsr1h,??_interrupt_handler+5
  5601  002264  CFD9 F007          	movff	fsr2l,??_interrupt_handler+6
  5602  002268  CFDA F008          	movff	fsr2h,??_interrupt_handler+7
  5603  00226C  CFF3 F009          	movff	prodl,??_interrupt_handler+8
  5604  002270  CFF4 F00A          	movff	prodh,??_interrupt_handler+9
  5605  002274  CFF6 F00B          	movff	tblptrl,??_interrupt_handler+10
  5606  002278  CFF7 F00C          	movff	tblptrh,??_interrupt_handler+11
  5607  00227C  CFF8 F00D          	movff	tblptru,??_interrupt_handler+12
  5608  002280  CFF5 F00E          	movff	tablat,??_interrupt_handler+13
  5609  002284  C00E  FFF5         	movff	??_interrupt_handler+13,tablat
  5610  002288  C00D  FFF8         	movff	??_interrupt_handler+12,tblptru
  5611  00228C  C00C  FFF7         	movff	??_interrupt_handler+11,tblptrh
  5612  002290  C00B  FFF6         	movff	??_interrupt_handler+10,tblptrl
  5613  002294  C00A  FFF4         	movff	??_interrupt_handler+9,prodh
  5614  002298  C009  FFF3         	movff	??_interrupt_handler+8,prodl
  5615  00229C  C008  FFDA         	movff	??_interrupt_handler+7,fsr2h
  5616  0022A0  C007  FFD9         	movff	??_interrupt_handler+6,fsr2l
  5617  0022A4  C006  FFE2         	movff	??_interrupt_handler+5,fsr1h
  5618  0022A8  C005  FFE1         	movff	??_interrupt_handler+4,fsr1l
  5619  0022AC  C004  FFEA         	movff	??_interrupt_handler+3,fsr0h
  5620  0022B0  C003  FFE9         	movff	??_interrupt_handler+2,fsr0l
  5621  0022B4  C002  FFFB         	movff	??_interrupt_handler+1,pclatu
  5622  0022B8  C001  FFFA         	movff	??_interrupt_handler,pclath
  5623  0022BC  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5624  0022BE  0011               	retfie		f
  5625  0022C0                     __end_of_interrupt_handler:
  5626                           	opt stack 0
  5627                           pclatu	equ	0xFFB
  5628                           pclath	equ	0xFFA
  5629                           tblptru	equ	0xFF8
  5630                           tblptrh	equ	0xFF7
  5631                           tblptrl	equ	0xFF6
  5632                           tablat	equ	0xFF5
  5633                           prodh	equ	0xFF4
  5634                           prodl	equ	0xFF3
  5635                           intcon	equ	0xFF2
  5636                           postinc0	equ	0xFEE
  5637                           fsr0h	equ	0xFEA
  5638                           fsr0l	equ	0xFE9
  5639                           wreg	equ	0xFE8
  5640                           postdec1	equ	0xFE5
  5641                           fsr1h	equ	0xFE2
  5642                           fsr1l	equ	0xFE1
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           postdec2	equ	0xFDD
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           pclatu	equ	0xFFB
  5650                           pclath	equ	0xFFA
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           postinc0	equ	0xFEE
  5659                           fsr0h	equ	0xFEA
  5660                           fsr0l	equ	0xFE9
  5661                           wreg	equ	0xFE8
  5662                           postdec1	equ	0xFE5
  5663                           fsr1h	equ	0xFE2
  5664                           fsr1l	equ	0xFE1
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672                           	psect	rparam
  5673  0000                     pclatu	equ	0xFFB
  5674                           pclath	equ	0xFFA
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           postinc0	equ	0xFEE
  5683                           fsr0h	equ	0xFEA
  5684                           fsr0l	equ	0xFE9
  5685                           wreg	equ	0xFE8
  5686                           postdec1	equ	0xFE5
  5687                           fsr1h	equ	0xFE2
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696                           	psect	temp
  5697  000051                     btemp:
  5698                           	opt stack 0
  5699  000051                     	ds	1
  5700  0000                     int$flags	set	btemp
  5701                           pclatu	equ	0xFFB
  5702                           pclath	equ	0xFFA
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           intcon	equ	0xFF2
  5710                           postinc0	equ	0xFEE
  5711                           fsr0h	equ	0xFEA
  5712                           fsr0l	equ	0xFE9
  5713                           wreg	equ	0xFE8
  5714                           postdec1	equ	0xFE5
  5715                           fsr1h	equ	0xFE2
  5716                           fsr1l	equ	0xFE1
  5717                           indf2	equ	0xFDF
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           fsr2h	equ	0xFDA
  5721                           fsr2l	equ	0xFD9
  5722                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    6
    Data        460
    BSS         28
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     71      80
    BANK0           160     25     131
    BANK1           256      0     228
    BANK2           256      0     156
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _multiplex->_go_through_cols
    _go_through_cols->_myDelay_us
    _init->___lwtoft
    _hardware_init->_OpenTimer0
    ___lwtoft->___ftpack
    _fsm->_stepper_pulse
    _superMario->_buzz
    _stepper_pulse->_myDelay_us
    _starWars->_buzz
    _buzz->_myDelay_us
    _myDelay_us->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___altoft
    ___altoft->___ftpack
    ___aldiv->___lmul
    _rand->___lmul
    ___lbtoft->___ftpack
    ___ftmul->___awtoft
    ___ftge->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    ___awtoft->_rand
    ___awmod->_rand

Critical Paths under _interrupt_handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_fsm
    _fsm->_starWars
    _superMario->_buzz
    _starWars->_buzz

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   50045
                                _fsm
                               _init
                          _multiplex
 ---------------------------------------------------------------------------------
 (1) _multiplex                                            0     0      0     454
                    _go_through_cols
 ---------------------------------------------------------------------------------
 (2) _go_through_cols                                      4     4      0     454
                                             66 COMRAM     4     4      0
                         _myDelay_us
 ---------------------------------------------------------------------------------
 (1) _init                                                 3     3      0    2317
                                             25 COMRAM     3     3      0
                           ___lwtoft
                      _hardware_init
 ---------------------------------------------------------------------------------
 (2) _hardware_init                                        0     0      0      44
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (3) _OpenTimer0                                           3     3      0      44
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2273
                                             22 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _fsm                                                  5     5      0   47274
                                             20 BANK0      5     5      0
                            ___awmod
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lbtoft
                            ___lwmod
                               _buzz
                               _rand
                         _setAllLeds
                           _starWars
                      _stepper_pulse
                         _superMario
 ---------------------------------------------------------------------------------
 (2) _superMario                                           4     2      2    8886
                                             68 COMRAM     2     0      2
                                             16 BANK0      2     2      0
                            ___lwdiv
                               _buzz
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _stepper_pulse                                        5     2      3    4670
                                             66 COMRAM     5     2      3
                            ___ftdiv
                            ___fttol
                            ___lwmod
                         _myDelay_us
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     415
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _starWars                                             6     4      2    8596
                                             68 COMRAM     2     0      2
                                             16 BANK0      4     4      0
                               _buzz
 ---------------------------------------------------------------------------------
 (3) _buzz                                                18    12      6    8457
                                             66 COMRAM     2     2      0
                                              0 BANK0     16    10      6
                            ___aldiv
                           ___altoft
                            ___ftdiv
                            ___fttol
                             ___lmul
                            ___lwdiv (ARG)
                         _myDelay_ms
                         _myDelay_us
 ---------------------------------------------------------------------------------
 (3) _myDelay_us                                           4     2      2     366
                                             62 COMRAM     4     2      2
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _myDelay_ms                                           5     3      2     110
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     444
                                             47 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3209
                                             32 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2389
                                             22 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     428
                                             26 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAllLeds                                           2     2      0      90
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     450
                                             26 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     450
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2209
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2871
                                             32 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             59 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3615
                                             47 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2534
                                             28 COMRAM     4     1      3
                           ___ftpack
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2187
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     552
                                             28 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                   14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fsm
     ___awmod
       _rand (ARG)
         ___lmul
     ___awtoft
       ___ftpack
       _rand (ARG)
         ___lmul
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         _rand (ARG)
           ___lmul
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftge
       ___awtoft (ARG)
         ___ftpack
         _rand (ARG)
           ___lmul
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _rand (ARG)
             ___lmul
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
         _rand (ARG)
           ___lmul
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwmod
     _buzz
       ___aldiv
         ___lmul (ARG)
       ___altoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___lmul
       ___lwdiv (ARG)
       _myDelay_ms (ARG)
       _myDelay_us (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _rand
       ___lmul
     _setAllLeds
     _starWars
       _buzz
         ___aldiv
           ___lmul (ARG)
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___lmul
         ___lwdiv (ARG)
         _myDelay_ms (ARG)
         _myDelay_us (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
     _stepper_pulse
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___lwmod
       _myDelay_us
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _superMario
       ___lwdiv
       _buzz
         ___aldiv
           ___lmul (ARG)
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___lmul
         ___lwdiv (ARG)
         _myDelay_ms (ARG)
         _myDelay_us (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _init
     ___lwtoft
       ___ftpack
     _hardware_init
       _OpenTimer0
   _multiplex
     _go_through_cols
       _myDelay_us
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)

 _interrupt_handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      9C       9       60.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E4       7       89.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      83       5       81.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     47      50       1       85.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     253      20        0.0%
DATA                 0      0     253       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 21 12:09:31 2016

              ___altoft@exp 001F               ___altoft@sign 0020    __size_of_go_through_cols 008E  
              ___ftadd@exp1 003B                ___ftadd@exp2 003A                ___ftadd@sign 0039  
                       l200 14E2                         l203 1B88                         l204 1B8A  
                       l160 10BE                         l242 25E6                         l248 254E  
                       l257 176C                         l169 114E                         l530 1602  
                       l515 1528                         l188 121A                         l550 1A60  
                       l519 1552                         l539 161E                         l492 1E74  
                       l670 2412                         l680 24EE                         _fsm 1022  
              ___awmod@sign 0022                         prod 000FF3                         wreg 000FE8  
               _total_steps 101F                ___ftdiv@cntr 002A                ___ftdiv@sign 002F  
                      l2051 1536                        l2205 250C                        l2109 166A  
                      l2213 2000                        l2125 1908                        l2223 205C  
                      l2143 194A                        l2119 18E0                        l2081 15BC  
                      l2073 1590                        l2057 1560                        l2217 2030  
                      l2153 1972                        l2091 15F0                        l2083 15C6  
                      l2139 193A                        l2181 221C                        l2173 2202  
                      l2093 15FA                        l2085 15CE                        l2149 1962  
                      l1711 1E42                        l1703 1E04                        l2079 15B2  
                      l2193 2248                        l2185 2230                        l2177 2210  
                      l2169 21F6                        l1713 1E60                        l1705 1E0E  
                      l2513 10F8                        l2505 10D4                        l2179 2218  
                      l1715 1E6A                        l1707 1E2C                        l2099 163A  
                      l2451 16B2                        l2603 1414                        l2189 223A  
                      l1805 218C                        l1901 18A6                        l1733 25DA  
                      l2461 1796                        l2613 1454                        l2605 141C  
                      l2517 110A                        l1807 2198                        l2551 11AE  
                      l2543 1184                        l2535 116A                        l2527 1136  
                      l2471 1024                        l1745 2330                        l1761 1C74  
                      l1825 19FC                        l2625 1498                        l2561 11D8  
                      l2545 118C                        l2537 1172                        l2633 261C  
                      l1819 19D4                        l1739 253A                        l2571 11F8  
                      l2563 11E0                        l2555 11B8                        l1749 2344  
                      l1773 1CAE                        l1845 1A3A                        l1941 23E8  
                      l2477 1058                        l2629 14A0                        l1775 1CBA  
                      l1767 1C8C                        l1951 2408                        l1943 23EC  
                      l2575 121E                        l2567 11E6                        l1793 1D12  
                      l1785 1CEE                        l1777 1CBE                        l1865 17F0  
                      l1961 24CC                        l2585 1296                        l1699 1DF6  
                      l1883 1856                        l1963 24D0                        l1939 23E0  
                      l2595 13EE                        l2579 126A                        l1789 1CFC  
                      l1893 187E                        l2589 12A0                        l1895 188A  
                      l1887 1866                        l1967 24E4                        l1959 24C4  
                      l2599 13F4                        l1993 258C                        l1897 1890  
                      l1985 1C08                        ?_fsm 0001                        l1997 2594  
                      u2115 1DB4                        u1510 180E                        u1441 19BC  
                      u1515 1806                        u1461 19E4                        u2440 103C  
                      u1570 23AE                        u1491 17D4                        u1660 1B84  
                      u1741 14F4                        u2446 103E                        u1751 1508  
                      u2551 1144                        u2640 1210                        u1578 23B0  
                      u2571 1160                        u2717 25DC                        u1951 18C8  
                      u2727 2540                        u1971 18F0                        _LEDs 00A8  
                      _main 2618                ___ftpack@arg 000F                        _init 1D24  
                      _buzz 1690                        _rand 241C                ___ftpack@exp 0012  
                      fsr0h 000FEA                        fsr1h 000FE2                        fsr0l 000FE9  
                      fsr2h 000FDA                        fsr1l 000FE1                        indf2 000FDF  
                      fsr2l 000FD9                        fsm@i 00D8                        btemp 0051  
    __size_of_stepper_pulse 00E2                        pclat 000FFA                        prodh 000FF4  
                      prodl 000FF3                        start 1016                ___ftmul@cntr 002E  
              ___param_bank 000010                ___ftmul@sign 002F                ___fttol@exp1 003E  
                     ??_fsm 0048                ___fttol@lval 003A             __end_of___aldiv 1D24  
                     ?_main 0001                       ?_init 0001                       ?_buzz 00C1  
                     ?_rand 001B             __end_of___ftadd 1690             __end_of___awmod 2252  
           __end_of___ftdiv 1A92             __end_of___ftmul 19AC             __end_of___fttol 18B8  
           __end_of___lwdiv 241C             __end_of___lwmod 24F8             ??_hardware_init 0012  
                     _TMR0H 000FD7                       _TMR1H 000FCF                       _TMR0L 000FD6  
                     _TMR1L 000FCE      _ImperialMarchDurations 0100         ___lmul@multiplicand 0013  
             ___awtoft@sign 0020                       _randx 0048               ___ftpack@sign 0013  
                     buzz@i 00CB                       tablat 000FF5                       status 000FD8  
        _ImperialMarchNotes 0060             __initialization 1E94                __end_of_main 2626  
              __end_of_init 1DE6                __end_of_buzz 17C4                __end_of_rand 246E  
             _steps_per_led 00DD                      ??_main 0048               ___fttol@sign1 0039  
                    ??_init 001A                      ??_buzz 0043                      ??_rand 001D  
             _stepper_pulse 1B76               __activetblptr 000002           ??_go_through_cols 0043  
                    _ADCON1 000FC1            __end_of___altoft 21E2            __end_of___awtoft 2530  
          __end_of___ftpack 1E94            __end_of___lbtoft 2618                  _OpenTimer0 2376  
          __end_of___lwtoft 25D0                 myDelay_ms@i 0012                 myDelay_us@i 0041  
                    ___ftge 1FD0                      ___lmul 2320                   ??___aldiv 0023  
                 ??___ftadd 0036                   ??___awmod 0021                   ??___ftdiv 0027  
                 ??___ftmul 0027                   ??___fttol 0034                   ??___lwdiv 0013  
                 ??___lwmod 0013                 buzz@repeats 00C7                      clear_0 1E9A  
           ___awmod@divisor 001F                      _target 00BF              ?_stepper_pulse 0043  
           ___awmod@counter 0021       ___ftmul@f3_as_product 002B                __pdataCOMRAM 0048  
     go_through_cols@offset 0046                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8            __end_of_starWars 2320  
           _SuperMarioNotes 0148               starWars@index 0045               _last_new_note 101B  
                __accesstop 0060     __end_of__initialization 1F26                  ___altoft@c 0017  
                ___ftadd@f1 0030                  ___ftadd@f2 0033                  ___ftge@ff1 003C  
                ___ftge@ff2 003F               ___rparam_used 000001                  ___ftdiv@f1 0021  
                ___ftdiv@f2 0024                  ___ftdiv@f3 002B                  ___awtoft@c 001D  
                ___lbtoft@c 001A                  ___ftmul@f1 0021                  ___ftmul@f2 0024  
             _last_win_note 101D                  ___fttol@f1 0030              __pcstackCOMRAM 0001  
              __pidataBANK0 246E                __pidataBANK1 1A92                __pidataBANK2 1F34  
                ___lwtoft@c 0017                 setAllLeds@i 0010                  __pbssBANK0 00A8  
               ?_OpenTimer0 0001               _current_state 00BE                  __pnvCOMRAM 004F  
                   ?___ftge 003C                     ?___lmul 000F             ??_stepper_pulse 0046  
                 ?___altoft 0017              ___lmul@product 0017                   ?___awtoft 001D  
                 ?___ftpack 000F                   ?___lbtoft 0017                  _hard_speed 00DA  
                 ?___lwtoft 0017          __size_of_multiplex 002A                myDelay_ms@ms 000F  
              myDelay_us@us 003F           _stepper_direction 004F                     __Hparam 0000  
                   __Lparam 0000                     ___aldiv 1C58                  _myDelay_ms 2530  
                _myDelay_us 25D0             __size_of___ftge 0090             __size_of___lmul 0056  
                   ___ftadd 14E4             _go_through_cols 2060                     ___awmod 21E2  
                   ___ftdiv 19AC                   ?_starWars 0045                     ___ftmul 18B8  
                   ___fttol 17C4                     ___lwdiv 23CA                     ___lwmod 24B6  
              __psmallconst 101A                  ??___altoft 001B                     __pcinit 1E94  
                ??___awtoft 0020                  ??___ftpack 0014                  ??___lbtoft 001A  
              buzz@duration 00C5                     __ramtop 0800         __size_of_OpenTimer0 0054  
                   __ptext0 2618                     __ptext1 255C                     __ptext2 2060  
                   __ptext3 1D24                     __ptext4 2626                     __ptext5 2376  
                   __ptext6 25AC                     __ptext7 1022                     __ptext8 20EE  
                   __ptext9 23CA                  ??___lwtoft 001A                   _T0CONbits 000FD5  
                 _T1CONbits 000FCD                     _counter 004D                __size_of_fsm 04C2  
          ___awmod@dividend 001D            ___aldiv@dividend 001B       __end_of_hardware_init 2632  
                _setAllLeds 2586              __pintcode_body 2252        end_of_initialization 1F26  
             __Lmediumconst 0000                     int_func 2252           __end_of_multiplex 2586  
          ___aldiv@quotient 0025                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE                  ??_starWars 00D1  
                 _PORTAbits 000F80                   _PORTBbits 000F81                   _TRISAbits 000F92  
                 _TRISBbits 000F93                   _TRISCbits 000F94          stepper_pulse@speed 0043  
               ___ftdiv@exp 002E     __end_of_go_through_cols 20EE                  _superMario 20EE  
          _state_to_recover 004E                 ___ftmul@exp 002A                 ?_myDelay_ms 000F  
               ?_myDelay_us 003F              __end_of___ftge 2060              __end_of___lmul 2376  
             __pidataCOMRAM 2632         start_initialization 1E94                 ?_setAllLeds 0001  
               __end_of_fsm 14E4                ??_OpenTimer0 000F              buzz@halfPeriod 00CF  
                  ??___ftge 0042                    ??___lmul 0017                 __pdataBANK0 0060  
               __pdataBANK1 0100                 __pdataBANK2 0200          __end_of_OpenTimer0 23CA  
         __size_of___altoft 0078           __size_of___awtoft 0038           __size_of___ftpack 00AE  
         __size_of___lbtoft 0024                 __pbssCOMRAM 004C           __size_of___lwtoft 0024  
             __pcstackBANK0 00C1         __size_of_myDelay_ms 002C         __size_of_myDelay_us 0024  
                 __pnvBANK0 00DA            ?_go_through_cols 0001                 ?_superMario 0045  
          ___lwdiv@dividend 000F         __size_of_setAllLeds 0026                   __pintcode 1008  
                  ?___aldiv 001B                    ?___ftadd 0030                    ?___awmod 001D  
                  ?___ftdiv 0021                    ?___ftmul 0021                    ?___fttol 0030  
                  ?___lwdiv 000F                    ?___lwmod 000F       __end_of_stepper_pulse 1C58  
         __size_of_starWars 0060         OpenTimer0@intEnable 0011           _interrupt_handler 1008  
               __smallconst 101A          ?_interrupt_handler 0001            _hard_speed_timer 00E0  
          ___lwdiv@quotient 0013         ??_interrupt_handler 0001             ___aldiv@divisor 001F  
           ___aldiv@counter 0023                    _LATAbits 000F89                    _LATBbits 000F8A  
                  _LATCbits 000F8B                    _IPR1bits 000F9F                    _PIE1bits 000F9D  
                  _PIR1bits 000F9E             setAllLeds@value 000F                   _prev_hall 00E2  
                 _multiplex 255C   __end_of_interrupt_handler 22C0                    _PWM_duty 004C  
       __size_of_superMario 007C           ___lmul@multiplier 000F                   copy_data0 1EBA  
                 copy_data1 1EDA                   copy_data2 1EFA                   copy_data3 1F1A  
     __end_of_last_new_note 101D                    __Hrparam 0000       __end_of_last_win_note 101F  
                  __Lrparam 0000         _SuperMarioDurations 0200                ??_myDelay_ms 0011  
    __size_of_hardware_init 000C                ??_myDelay_us 0041            __size_of___aldiv 00CC  
                ?_multiplex 0001            __size_of___ftadd 01AC            __size_of___awmod 0070  
          __size_of___ftdiv 00E6                    ___altoft 216A            __size_of___ftmul 00F4  
          __size_of___fttol 00F4            __size_of___lwdiv 0052            __size_of___lwmod 0042  
                  ___awtoft 24F8                    ___ftpack 1DE6                    ___lbtoft 25F4  
                  _fsm$1614 00D5                    ___lwtoft 25AC                ??_setAllLeds 000F  
           ___lwdiv@divisor 0011             ___lwdiv@counter 0015                    __ptext10 1B76  
                  __ptext11 24B6                    __ptext20 2586                    __ptext12 22C0  
                  __ptext21 241C                    __ptext13 1690                    __ptext22 2320  
                  __ptext14 25D0                    __ptext23 25F4                    __ptext15 2530  
                  __ptext24 18B8                    __ptext16 17C4                    __ptext25 1FD0  
                  __ptext17 19AC                    __ptext26 14E4                    __ptext18 216A  
                  __ptext27 24F8                    __ptext19 1C58                    __ptext28 1DE6  
                  __ptext29 21E2          __end_of_myDelay_ms 255C          __end_of_myDelay_us 25F4  
             __size_of_main 000E               __size_of_init 00C2               __size_of_buzz 0134  
             __size_of_rand 0052                    _note_new 00B8                    _note_win 00BA  
                  fsm@i_968 00D9                    int$flags 0051          __end_of_setAllLeds 25AC  
                  _position 00BC                    _starWars 22C0  __size_of_interrupt_handler 12B8  
           superMario@index 0045                  _INTCONbits 000FF2                    buzz@freq 00C1  
             _hardware_init 2626                    intlevel2 0000            ___lwmod@dividend 000F  
       __end_of_total_steps 1021                ??_superMario 00D1                _was_released 00C0  
               ??_multiplex 0047             ___lwmod@divisor 0011             ___lwmod@counter 0013  
              ___aldiv@sign 0024              ?_hardware_init 0001          __end_of_superMario 216A  
