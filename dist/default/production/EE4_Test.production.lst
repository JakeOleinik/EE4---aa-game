

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Apr 26 16:27:07 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	idataBANK2,global,class=CODE,delta=1
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           	psect	idataCOMRAM
    60  002836                     __pidataCOMRAM:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _randx
    64  002836  0001               	dw	1
    65  002838  0000               	dw	0
    66                           
    67                           	psect	idataBANK0
    68  0024CC                     __pidataBANK0:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _imperialMarchNotes
    72  0024CC  01B8               	dw	440
    73  0024CE  0000               	dw	0
    74  0024D0  01B8               	dw	440
    75  0024D2  0000               	dw	0
    76  0024D4  01B8               	dw	440
    77  0024D6  0000               	dw	0
    78  0024D8  015D               	dw	349
    79  0024DA  0000               	dw	0
    80  0024DC  020B               	dw	523
    81  0024DE  0000               	dw	0
    82  0024E0  01B8               	dw	440
    83  0024E2  0000               	dw	0
    84  0024E4  015D               	dw	349
    85  0024E6  0000               	dw	0
    86  0024E8  020B               	dw	523
    87  0024EA  0000               	dw	0
    88  0024EC  01B8               	dw	440
    89  0024EE  0000               	dw	0
    90  0024F0  0293               	dw	659
    91  0024F2  0000               	dw	0
    92  0024F4  0293               	dw	659
    93  0024F6  0000               	dw	0
    94  0024F8  0293               	dw	659
    95  0024FA  0000               	dw	0
    96  0024FC  02BA               	dw	698
    97  0024FE  0000               	dw	0
    98  002500  020B               	dw	523
    99  002502  0000               	dw	0
   100  002504  01B8               	dw	440
   101  002506  0000               	dw	0
   102  002508  015D               	dw	349
   103  00250A  0000               	dw	0
   104  00250C  020B               	dw	523
   105  00250E  0000               	dw	0
   106  002510  01B8               	dw	440
   107  002512  0000               	dw	0
   108                           
   109                           ;initializer for _nothingElseMattersDurations
   110  002514  0002               	dw	2
   111  002516  0002               	dw	2
   112  002518  0002               	dw	2
   113  00251A  0002               	dw	2
   114  00251C  0002               	dw	2
   115  00251E  0002               	dw	2
   116                           
   117                           ;initializer for _nothingElseMattersNotes
   118  002520  00A5               	dw	165
   119  002522  00C4               	dw	196
   120  002524  00F5               	dw	245
   121  002526  014A               	dw	330
   122  002528  00F5               	dw	245
   123  00252A  00C4               	dw	196
   124                           
   125                           	psect	idataBANK1
   126  001BB2                     __pidataBANK1:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _imperialMarchDurations
   130  001BB2  0032               	dw	50
   131  001BB4  0014               	dw	20
   132  001BB6  0032               	dw	50
   133  001BB8  0014               	dw	20
   134  001BBA  0032               	dw	50
   135  001BBC  0014               	dw	20
   136  001BBE  0028               	dw	40
   137  001BC0  0005               	dw	5
   138  001BC2  0014               	dw	20
   139  001BC4  0005               	dw	5
   140  001BC6  003C               	dw	60
   141  001BC8  000A               	dw	10
   142  001BCA  0028               	dw	40
   143  001BCC  0005               	dw	5
   144  001BCE  0014               	dw	20
   145  001BD0  0005               	dw	5
   146  001BD2  003C               	dw	60
   147  001BD4  0050               	dw	80
   148  001BD6  0032               	dw	50
   149  001BD8  0014               	dw	20
   150  001BDA  0032               	dw	50
   151  001BDC  0014               	dw	20
   152  001BDE  0032               	dw	50
   153  001BE0  0014               	dw	20
   154  001BE2  0028               	dw	40
   155  001BE4  0005               	dw	5
   156  001BE6  0014               	dw	20
   157  001BE8  0005               	dw	5
   158  001BEA  003C               	dw	60
   159  001BEC  000A               	dw	10
   160  001BEE  0028               	dw	40
   161  001BF0  0005               	dw	5
   162  001BF2  0014               	dw	20
   163  001BF4  0005               	dw	5
   164  001BF6  003C               	dw	60
   165  001BF8  0050               	dw	80
   166                           
   167                           ;initializer for _nothingElseMattersFullNotes
   168  001BFA  00A5               	dw	165
   169  001BFC  00C4               	dw	196
   170  001BFE  00F5               	dw	245
   171  001C00  014A               	dw	330
   172  001C02  00F5               	dw	245
   173  001C04  00C4               	dw	196
   174  001C06  00A5               	dw	165
   175  001C08  00C4               	dw	196
   176  001C0A  00F5               	dw	245
   177  001C0C  014A               	dw	330
   178  001C0E  00F5               	dw	245
   179  001C10  00C4               	dw	196
   180  001C12  00A5               	dw	165
   181  001C14  00C4               	dw	196
   182  001C16  00F5               	dw	245
   183  001C18  014A               	dw	330
   184  001C1A  00F5               	dw	245
   185  001C1C  00C4               	dw	196
   186  001C1E  00A5               	dw	165
   187  001C20  00C4               	dw	196
   188  001C22  00F5               	dw	245
   189  001C24  014A               	dw	330
   190  001C26  00F5               	dw	245
   191  001C28  01EE               	dw	494
   192  001C2A  014A               	dw	330
   193  001C2C  01EE               	dw	494
   194  001C2E  014A               	dw	330
   195  001C30  00A5               	dw	165
   196  001C32  01EE               	dw	494
   197  001C34  0106               	dw	262
   198  001C36  01EE               	dw	494
   199  001C38  01B8               	dw	440
   200  001C3A  01EE               	dw	494
   201  001C3C  01B8               	dw	440
   202  001C3E  014A               	dw	330
   203                           
   204                           ;initializer for _superMarioNotes
   205  001C40  0A4D               	dw	2637
   206  001C42  0A4D               	dw	2637
   207  001C44  0000               	dw	0
   208  001C46  0A4D               	dw	2637
   209  001C48  0000               	dw	0
   210  001C4A  082D               	dw	2093
   211  001C4C  0A4D               	dw	2637
   212  001C4E  0000               	dw	0
   213  001C50  0C40               	dw	3136
   214  001C52  0000               	dw	0
   215  001C54  0000               	dw	0
   216  001C56  0000               	dw	0
   217  001C58  0620               	dw	1568
   218  001C5A  0000               	dw	0
   219  001C5C  0000               	dw	0
   220  001C5E  0000               	dw	0
   221  001C60  082D               	dw	2093
   222  001C62  0000               	dw	0
   223  001C64  0000               	dw	0
   224  001C66  0620               	dw	1568
   225  001C68  0000               	dw	0
   226  001C6A  0000               	dw	0
   227  001C6C  0527               	dw	1319
   228  001C6E  0000               	dw	0
   229  001C70  0000               	dw	0
   230  001C72  06E0               	dw	1760
   231  001C74  0000               	dw	0
   232  001C76  07B8               	dw	1976
   233  001C78  0000               	dw	0
   234  001C7A  0749               	dw	1865
   235  001C7C  06E0               	dw	1760
   236  001C7E  0000               	dw	0
   237  001C80  0620               	dw	1568
   238  001C82  0A4D               	dw	2637
   239  001C84  0C40               	dw	3136
   240  001C86  0DC0               	dw	3520
   241  001C88  0000               	dw	0
   242  001C8A  0AEA               	dw	2794
   243  001C8C  0C40               	dw	3136
   244  001C8E  0000               	dw	0
   245  001C90  0A4D               	dw	2637
   246  001C92  0000               	dw	0
   247  001C94  082D               	dw	2093
   248  001C96  092D               	dw	2349
   249  001C98  07B8               	dw	1976
   250  001C9A  0000               	dw	0
   251  001C9C  0000               	dw	0
   252                           
   253                           	psect	idataBANK2
   254  00212C                     __pidataBANK2:
   255                           	opt stack 0
   256                           
   257                           ;initializer for _nothingElseMattersFullDurations
   258  00212C  0004               	dw	4
   259  00212E  0004               	dw	4
   260  002130  0004               	dw	4
   261  002132  0004               	dw	4
   262  002134  0004               	dw	4
   263  002136  0004               	dw	4
   264  002138  0004               	dw	4
   265  00213A  0004               	dw	4
   266  00213C  0004               	dw	4
   267  00213E  0004               	dw	4
   268  002140  0004               	dw	4
   269  002142  0004               	dw	4
   270  002144  0004               	dw	4
   271  002146  0004               	dw	4
   272  002148  0004               	dw	4
   273  00214A  0004               	dw	4
   274  00214C  0004               	dw	4
   275  00214E  0004               	dw	4
   276  002150  0004               	dw	4
   277  002152  0004               	dw	4
   278  002154  0004               	dw	4
   279  002156  0004               	dw	4
   280  002158  0004               	dw	4
   281  00215A  0004               	dw	4
   282  00215C  0010               	dw	16
   283  00215E  0002               	dw	2
   284  002160  0008               	dw	8
   285  002162  0008               	dw	8
   286  002164  0002               	dw	2
   287  002166  0004               	dw	4
   288  002168  0004               	dw	4
   289  00216A  0004               	dw	4
   290  00216C  0004               	dw	4
   291  00216E  0004               	dw	4
   292  002170  0004               	dw	4
   293                           
   294                           ;initializer for _superMarioDurations
   295  002172  000C               	dw	12
   296  002174  000C               	dw	12
   297  002176  000C               	dw	12
   298  002178  000C               	dw	12
   299  00217A  000C               	dw	12
   300  00217C  000C               	dw	12
   301  00217E  000C               	dw	12
   302  002180  000C               	dw	12
   303  002182  000C               	dw	12
   304  002184  000C               	dw	12
   305  002186  000C               	dw	12
   306  002188  000C               	dw	12
   307  00218A  000C               	dw	12
   308  00218C  000C               	dw	12
   309  00218E  000C               	dw	12
   310  002190  000C               	dw	12
   311  002192  000C               	dw	12
   312  002194  000C               	dw	12
   313  002196  000C               	dw	12
   314  002198  000C               	dw	12
   315  00219A  000C               	dw	12
   316  00219C  000C               	dw	12
   317  00219E  000C               	dw	12
   318  0021A0  000C               	dw	12
   319  0021A2  000C               	dw	12
   320  0021A4  000C               	dw	12
   321  0021A6  000C               	dw	12
   322  0021A8  000C               	dw	12
   323  0021AA  000C               	dw	12
   324  0021AC  000C               	dw	12
   325  0021AE  000C               	dw	12
   326  0021B0  000C               	dw	12
   327  0021B2  0009               	dw	9
   328  0021B4  0009               	dw	9
   329  0021B6  0009               	dw	9
   330  0021B8  000C               	dw	12
   331  0021BA  000C               	dw	12
   332  0021BC  000C               	dw	12
   333  0021BE  000C               	dw	12
   334  0021C0  000C               	dw	12
   335  0021C2  000C               	dw	12
   336  0021C4  000C               	dw	12
   337  0021C6  000C               	dw	12
   338  0021C8  000C               	dw	12
   339  0021CA  000C               	dw	12
   340  0021CC  000C               	dw	12
   341  0021CE  000C               	dw	12
   342                           
   343                           	psect	smallconst
   344  00101A                     __psmallconst:
   345                           	opt stack 0
   346  00101A  00                 	db	0
   347  00101B                     _last_new_note:
   348                           	opt stack 0
   349  00101B  0006               	dw	6
   350  00101D                     __end_of_last_new_note:
   351                           	opt stack 0
   352  00101D                     _last_win_note:
   353                           	opt stack 0
   354  00101D  002F               	dw	47
   355  00101F                     __end_of_last_win_note:
   356                           	opt stack 0
   357  00101F                     _total_steps:
   358                           	opt stack 0
   359  00101F  0320               	dw	800
   360  001021                     __end_of_total_steps:
   361                           	opt stack 0
   362  001021  00                 	db	0	; dummy byte at the end
   363  0000                     
   364                           	psect	nvBANK0
   365  0000F4                     __pnvBANK0:
   366                           	opt stack 0
   367  0000F4                     _hard_speed:
   368                           	opt stack 0
   369  0000F4                     	ds	3
   370  0000F7                     _steps_per_led:
   371                           	opt stack 0
   372  0000F7                     	ds	3
   373  0000FA                     _hard_speed_timer:
   374                           	opt stack 0
   375  0000FA                     	ds	2
   376  0000FC                     _stepper_direction:
   377                           	opt stack 0
   378  0000FC                     	ds	2
   379  0000FE                     _prev_hall:
   380                           	opt stack 0
   381  0000FE                     	ds	1
   382  0000                     _ADCON1	set	4033
   383  0000                     _INTCONbits	set	4082
   384  0000                     _IPR1bits	set	3999
   385  0000                     _LATAbits	set	3977
   386  0000                     _LATBbits	set	3978
   387  0000                     _LATCbits	set	3979
   388  0000                     _PIE1bits	set	3997
   389  0000                     _PIR1bits	set	3998
   390  0000                     _PORTAbits	set	3968
   391  0000                     _PORTBbits	set	3969
   392  0000                     _T0CONbits	set	4053
   393  0000                     _T1CONbits	set	4045
   394  0000                     _TMR0H	set	4055
   395  0000                     _TMR0L	set	4054
   396  0000                     _TMR1H	set	4047
   397  0000                     _TMR1L	set	4046
   398  0000                     _TRISAbits	set	3986
   399  0000                     _TRISBbits	set	3987
   400  0000                     _TRISCbits	set	3988
   401                           
   402                           ; #config settings
   403                           
   404                           	psect	cinit
   405  0021D0                     __pcinit:
   406                           	opt stack 0
   407  0021D0                     start_initialization:
   408                           	opt stack 0
   409  0021D0                     __initialization:
   410                           	opt stack 0
   411                           
   412                           ; Clear objects allocated to BANK0 (28 bytes)
   413  0021D0  EE00  F0C0         	lfsr	0,__pbssBANK0
   414  0021D4  0E1C               	movlw	28
   415  0021D6                     clear_0:
   416  0021D6  6AEE               	clrf	postinc0,c
   417  0021D8  06E8               	decf	wreg,f,c
   418  0021DA  E1FD               	bnz	clear_0
   419                           
   420                           ; Clear objects allocated to COMRAM (2 bytes)
   421  0021DC  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   422  0021DE  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   423                           
   424                           ; Initialize objects allocated to BANK2 (164 bytes)
   425                           ; load TBLPTR registers with __pidataBANK2
   426  0021E0  0E2C               	movlw	low __pidataBANK2
   427  0021E2  6EF6               	movwf	tblptrl,c
   428  0021E4  0E21               	movlw	high __pidataBANK2
   429  0021E6  6EF7               	movwf	tblptrh,c
   430  0021E8  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   431  0021EA  6EF8               	movwf	tblptru,c
   432  0021EC  EE02  F000         	lfsr	0,__pdataBANK2
   433  0021F0  EE10 F0A4          	lfsr	1,164
   434  0021F4                     copy_data0:
   435  0021F4  0009               	tblrd		*+
   436  0021F6  CFF5 FFEE          	movff	tablat,postinc0
   437  0021FA  50E5               	movf	postdec1,w,c
   438  0021FC  50E1               	movf	fsr1l,w,c
   439  0021FE  E1FA               	bnz	copy_data0
   440                           
   441                           ; Initialize objects allocated to BANK1 (236 bytes)
   442                           ; load TBLPTR registers with __pidataBANK1
   443  002200  0EB2               	movlw	low __pidataBANK1
   444  002202  6EF6               	movwf	tblptrl,c
   445  002204  0E1B               	movlw	high __pidataBANK1
   446  002206  6EF7               	movwf	tblptrh,c
   447  002208  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   448  00220A  6EF8               	movwf	tblptru,c
   449  00220C  EE01  F000         	lfsr	0,__pdataBANK1
   450  002210  EE10 F0EC          	lfsr	1,236
   451  002214                     copy_data1:
   452  002214  0009               	tblrd		*+
   453  002216  CFF5 FFEE          	movff	tablat,postinc0
   454  00221A  50E5               	movf	postdec1,w,c
   455  00221C  50E1               	movf	fsr1l,w,c
   456  00221E  E1FA               	bnz	copy_data1
   457                           
   458                           ; Initialize objects allocated to BANK0 (96 bytes)
   459                           ; load TBLPTR registers with __pidataBANK0
   460  002220  0ECC               	movlw	low __pidataBANK0
   461  002222  6EF6               	movwf	tblptrl,c
   462  002224  0E24               	movlw	high __pidataBANK0
   463  002226  6EF7               	movwf	tblptrh,c
   464  002228  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   465  00222A  6EF8               	movwf	tblptru,c
   466  00222C  EE00  F060         	lfsr	0,__pdataBANK0
   467  002230  EE10 F060          	lfsr	1,96
   468  002234                     copy_data2:
   469  002234  0009               	tblrd		*+
   470  002236  CFF5 FFEE          	movff	tablat,postinc0
   471  00223A  50E5               	movf	postdec1,w,c
   472  00223C  50E1               	movf	fsr1l,w,c
   473  00223E  E1FA               	bnz	copy_data2
   474                           
   475                           ; Initialize objects allocated to COMRAM (4 bytes)
   476                           ; load TBLPTR registers with __pidataCOMRAM
   477  002240  0E36               	movlw	low __pidataCOMRAM
   478  002242  6EF6               	movwf	tblptrl,c
   479  002244  0E28               	movlw	high __pidataCOMRAM
   480  002246  6EF7               	movwf	tblptrh,c
   481  002248  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   482  00224A  6EF8               	movwf	tblptru,c
   483  00224C  EE00  F04B         	lfsr	0,__pdataCOMRAM
   484  002250  EE10 F004          	lfsr	1,4
   485  002254                     copy_data3:
   486  002254  0009               	tblrd		*+
   487  002256  CFF5 FFEE          	movff	tablat,postinc0
   488  00225A  50E5               	movf	postdec1,w,c
   489  00225C  50E1               	movf	fsr1l,w,c
   490  00225E  E1FA               	bnz	copy_data3
   491  002260                     end_of_initialization:
   492                           	opt stack 0
   493  002260                     __end_of__initialization:
   494                           	opt stack 0
   495  002260  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   496  002262  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   497  002264  0E00               	movlw	low (__Lmediumconst shr (0+16))
   498  002266  6EF8               	movwf	tblptru,c
   499  002268  0100               	movlb	0
   500  00226A  EF07  F014         	goto	_main	;jump to C main() function
   501                           tblptru	equ	0xFF8
   502                           tblptrh	equ	0xFF7
   503                           tblptrl	equ	0xFF6
   504                           tablat	equ	0xFF5
   505                           postinc0	equ	0xFEE
   506                           wreg	equ	0xFE8
   507                           postdec1	equ	0xFE5
   508                           fsr1l	equ	0xFE1
   509                           
   510                           	psect	bssCOMRAM
   511  00004F                     __pbssCOMRAM:
   512                           	opt stack 0
   513  00004F                     _PWM_duty:
   514                           	opt stack 0
   515  00004F                     	ds	1
   516  000050                     _counter:
   517                           	opt stack 0
   518  000050                     	ds	1
   519                           tblptru	equ	0xFF8
   520                           tblptrh	equ	0xFF7
   521                           tblptrl	equ	0xFF6
   522                           tablat	equ	0xFF5
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           postdec1	equ	0xFE5
   526                           fsr1l	equ	0xFE1
   527                           
   528                           	psect	dataCOMRAM
   529  00004B                     __pdataCOMRAM:
   530                           	opt stack 0
   531  00004B                     _randx:
   532                           	opt stack 0
   533  00004B                     	ds	4
   534                           tblptru	equ	0xFF8
   535                           tblptrh	equ	0xFF7
   536                           tblptrl	equ	0xFF6
   537                           tablat	equ	0xFF5
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	bssBANK0
   544  0000C0                     __pbssBANK0:
   545                           	opt stack 0
   546  0000C0                     _LEDs:
   547                           	opt stack 0
   548  0000C0                     	ds	16
   549  0000D0                     _note_new:
   550                           	opt stack 0
   551  0000D0                     	ds	2
   552  0000D2                     _note_win:
   553                           	opt stack 0
   554  0000D2                     	ds	2
   555  0000D4                     _position:
   556                           	opt stack 0
   557  0000D4                     	ds	2
   558  0000D6                     _seed_nr:
   559                           	opt stack 0
   560  0000D6                     	ds	2
   561  0000D8                     _current_state:
   562                           	opt stack 0
   563  0000D8                     	ds	1
   564  0000D9                     _nr_toggles:
   565                           	opt stack 0
   566  0000D9                     	ds	1
   567  0000DA                     _target:
   568                           	opt stack 0
   569  0000DA                     	ds	1
   570  0000DB                     _was_released:
   571                           	opt stack 0
   572  0000DB                     	ds	1
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           postdec1	equ	0xFE5
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	dataBANK0
   583  000060                     __pdataBANK0:
   584                           	opt stack 0
   585  000060                     _imperialMarchNotes:
   586                           	opt stack 0
   587  000060                     	ds	72
   588  0000A8                     _nothingElseMattersDurations:
   589                           	opt stack 0
   590  0000A8                     	ds	12
   591  0000B4                     _nothingElseMattersNotes:
   592                           	opt stack 0
   593  0000B4                     	ds	12
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	dataBANK1
   604  000100                     __pdataBANK1:
   605                           	opt stack 0
   606  000100                     _imperialMarchDurations:
   607                           	opt stack 0
   608  000100                     	ds	72
   609  000148                     _nothingElseMattersFullNotes:
   610                           	opt stack 0
   611  000148                     	ds	70
   612  00018E                     _superMarioNotes:
   613                           	opt stack 0
   614  00018E                     	ds	94
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           postdec1	equ	0xFE5
   622                           fsr1l	equ	0xFE1
   623                           
   624                           	psect	dataBANK2
   625  000200                     __pdataBANK2:
   626                           	opt stack 0
   627  000200                     _nothingElseMattersFullDurations:
   628                           	opt stack 0
   629  000200                     	ds	70
   630  000246                     _superMarioDurations:
   631                           	opt stack 0
   632  000246                     	ds	94
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           
   642                           	psect	cstackBANK1
   643  0001EC                     __pcstackBANK1:
   644                           	opt stack 0
   645  0001EC                     ??_nothingElseMatters:
   646  0001EC                     ??_superMario:
   647                           
   648                           ; 1 bytes @ 0x0
   649  0001EC                     	ds	2
   650  0001EE                     _fsm$1630:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x2
   654  0001EE                     	ds	3
   655  0001F1                     fsm@i:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x5
   659  0001F1                     	ds	1
   660  0001F2                     fsm@i_978:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x6
   664  0001F2                     	ds	1
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           postdec1	equ	0xFE5
   672                           fsr1l	equ	0xFE1
   673                           
   674                           	psect	cstackBANK0
   675  0000DC                     __pcstackBANK0:
   676                           	opt stack 0
   677  0000DC                     myDelay_us@us:
   678                           	opt stack 0
   679  0000DC                     ___ftge@ff1:
   680                           	opt stack 0
   681                           
   682                           ; 3 bytes @ 0x0
   683  0000DC                     	ds	2
   684  0000DE                     myDelay_us@i:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x2
   688  0000DE                     	ds	1
   689  0000DF                     ___ftge@ff2:
   690                           	opt stack 0
   691                           
   692                           ; 3 bytes @ 0x3
   693  0000DF                     	ds	1
   694  0000E0                     ??_go_through_cols:
   695  0000E0                     stepper_pulse@speed:
   696                           	opt stack 0
   697  0000E0                     buzz@freq:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x4
   701  0000E0                     	ds	3
   702  0000E3                     ??_stepper_pulse:
   703  0000E3                     go_through_cols@offset:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x7
   707  0000E3                     	ds	1
   708  0000E4                     buzz@duration:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x8
   712  0000E4                     	ds	2
   713  0000E6                     ??_buzz:
   714                           
   715                           ; 1 bytes @ 0xA
   716  0000E6                     	ds	2
   717  0000E8                     buzz@repeats:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0xC
   721  0000E8                     	ds	4
   722  0000EC                     buzz@i:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x10
   726  0000EC                     	ds	4
   727  0000F0                     buzz@halfPeriod:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x14
   731  0000F0                     	ds	2
   732  0000F2                     nothingElseMatters@index:
   733                           	opt stack 0
   734  0000F2                     superMario@index:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x16
   738  0000F2                     	ds	2
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1l	equ	0xFE1
   747                           
   748                           	psect	cstackCOMRAM
   749  000001                     __pcstackCOMRAM:
   750                           	opt stack 0
   751  000001                     ??_interrupt_handler:
   752  000001                     
   753                           ; 1 bytes @ 0x0
   754  000001                     	ds	14
   755  00000F                     ??_OpenTimer0:
   756  00000F                     ?___lwdiv:
   757                           	opt stack 0
   758  00000F                     ?___lwmod:
   759                           	opt stack 0
   760  00000F                     ?___ftpack:
   761                           	opt stack 0
   762  00000F                     ?___lmul:
   763                           	opt stack 0
   764  00000F                     setAllLeds@value:
   765                           	opt stack 0
   766  00000F                     myDelay_ms@ms:
   767                           	opt stack 0
   768  00000F                     ___lwdiv@dividend:
   769                           	opt stack 0
   770  00000F                     ___lwmod@dividend:
   771                           	opt stack 0
   772  00000F                     srand@x:
   773                           	opt stack 0
   774  00000F                     ___ftpack@arg:
   775                           	opt stack 0
   776  00000F                     ___lmul@multiplier:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0xE
   780  00000F                     	ds	1
   781  000010                     setAllLeds@i:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0xF
   785  000010                     	ds	1
   786  000011                     ??_myDelay_ms:
   787  000011                     OpenTimer0@intEnable:
   788                           	opt stack 0
   789  000011                     ___lwdiv@divisor:
   790                           	opt stack 0
   791  000011                     ___lwmod@divisor:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x10
   795  000011                     	ds	1
   796  000012                     ___ftpack@exp:
   797                           	opt stack 0
   798  000012                     myDelay_ms@i:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x11
   802  000012                     	ds	1
   803  000013                     ___ftpack@sign:
   804                           	opt stack 0
   805  000013                     ___lwdiv@counter:
   806                           	opt stack 0
   807  000013                     ___lwmod@counter:
   808                           	opt stack 0
   809  000013                     ___lmul@multiplicand:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x12
   813  000013                     	ds	1
   814  000014                     ??___ftpack:
   815  000014                     ___lwdiv@quotient:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x13
   819  000014                     	ds	3
   820  000017                     ?___altoft:
   821                           	opt stack 0
   822  000017                     ?___lbtoft:
   823                           	opt stack 0
   824  000017                     ?___lwtoft:
   825                           	opt stack 0
   826  000017                     ___lwtoft@c:
   827                           	opt stack 0
   828  000017                     ___lmul@product:
   829                           	opt stack 0
   830  000017                     ___altoft@c:
   831                           	opt stack 0
   832                           
   833                           ; 4 bytes @ 0x16
   834  000017                     	ds	3
   835  00001A                     ??_init:
   836  00001A                     ___lbtoft@c:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x19
   840  00001A                     	ds	1
   841  00001B                     ??___altoft:
   842  00001B                     ?_rand:
   843                           	opt stack 0
   844  00001B                     ?___aldiv:
   845                           	opt stack 0
   846  00001B                     ___aldiv@dividend:
   847                           	opt stack 0
   848                           
   849                           ; 4 bytes @ 0x1A
   850  00001B                     	ds	2
   851  00001D                     ?___awmod:
   852                           	opt stack 0
   853  00001D                     ___awmod@dividend:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x1C
   857  00001D                     	ds	2
   858  00001F                     ___altoft@exp:
   859                           	opt stack 0
   860  00001F                     ___awmod@divisor:
   861                           	opt stack 0
   862  00001F                     ___aldiv@divisor:
   863                           	opt stack 0
   864                           
   865                           ; 4 bytes @ 0x1E
   866  00001F                     	ds	1
   867  000020                     ___altoft@sign:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x1F
   871  000020                     	ds	1
   872  000021                     ___awmod@counter:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x20
   876  000021                     	ds	1
   877  000022                     ___awmod@sign:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x21
   881  000022                     	ds	1
   882  000023                     ?___wmul:
   883                           	opt stack 0
   884  000023                     ___aldiv@counter:
   885                           	opt stack 0
   886  000023                     ___wmul@multiplier:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x22
   890  000023                     	ds	1
   891  000024                     ___aldiv@sign:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x23
   895  000024                     	ds	1
   896  000025                     ___wmul@multiplicand:
   897                           	opt stack 0
   898  000025                     ___aldiv@quotient:
   899                           	opt stack 0
   900                           
   901                           ; 4 bytes @ 0x24
   902  000025                     	ds	2
   903  000027                     ___wmul@product:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x26
   907  000027                     	ds	2
   908  000029                     ?___awtoft:
   909                           	opt stack 0
   910  000029                     ___awtoft@c:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x28
   914  000029                     	ds	3
   915  00002C                     ___awtoft@sign:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x2B
   919  00002C                     	ds	1
   920  00002D                     ?___ftdiv:
   921                           	opt stack 0
   922  00002D                     ?___ftmul:
   923                           	opt stack 0
   924  00002D                     ___ftdiv@f1:
   925                           	opt stack 0
   926  00002D                     ___ftmul@f1:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x2C
   930  00002D                     	ds	3
   931  000030                     ___ftdiv@f2:
   932                           	opt stack 0
   933  000030                     ___ftmul@f2:
   934                           	opt stack 0
   935                           
   936                           ; 3 bytes @ 0x2F
   937  000030                     	ds	3
   938  000033                     ??___ftdiv:
   939  000033                     ??___ftmul:
   940                           
   941                           ; 1 bytes @ 0x32
   942  000033                     	ds	3
   943  000036                     ___ftdiv@cntr:
   944                           	opt stack 0
   945  000036                     ___ftmul@exp:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x35
   949  000036                     	ds	1
   950  000037                     ___ftdiv@f3:
   951                           	opt stack 0
   952  000037                     ___ftmul@f3_as_product:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x36
   956  000037                     	ds	3
   957  00003A                     ___ftdiv@exp:
   958                           	opt stack 0
   959  00003A                     ___ftmul@cntr:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x39
   963  00003A                     	ds	1
   964  00003B                     ___ftdiv@sign:
   965                           	opt stack 0
   966  00003B                     ___ftmul@sign:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x3A
   970  00003B                     	ds	1
   971  00003C                     ?___ftadd:
   972                           	opt stack 0
   973  00003C                     ?___fttol:
   974                           	opt stack 0
   975  00003C                     ___ftadd@f1:
   976                           	opt stack 0
   977  00003C                     ___fttol@f1:
   978                           	opt stack 0
   979                           
   980                           ; 3 bytes @ 0x3B
   981  00003C                     	ds	3
   982  00003F                     ___ftadd@f2:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x3E
   986  00003F                     	ds	1
   987  000040                     ??___fttol:
   988                           
   989                           ; 1 bytes @ 0x3F
   990  000040                     	ds	2
   991  000042                     ??___ftadd:
   992                           
   993                           ; 1 bytes @ 0x41
   994  000042                     	ds	3
   995  000045                     ___ftadd@sign:
   996                           	opt stack 0
   997  000045                     ___fttol@sign1:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x44
  1001  000045                     	ds	1
  1002  000046                     ___ftadd@exp2:
  1003                           	opt stack 0
  1004  000046                     ___fttol@lval:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0x45
  1008  000046                     	ds	1
  1009  000047                     ___ftadd@exp1:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x46
  1013  000047                     	ds	1
  1014  000048                     ??___ftge:
  1015                           
  1016                           ; 1 bytes @ 0x47
  1017  000048                     	ds	2
  1018  00004A                     ___fttol@exp1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x49
  1022  00004A                     	ds	1
  1023  00004B                     tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           ; 1 bytes @ 0x4A
  1033 ;;
  1034 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1035 ;;
  1036 ;; *************** function _main *****************
  1037 ;; Defined at:
  1038 ;;		line 63 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  1    wreg      void 
  1045 ;; Registers used:
  1046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1052 ;;      Params:         0       0       0       0       0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1055 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1056 ;;Total ram usage:        0 bytes
  1057 ;; Hardware stack levels required when called:    6
  1058 ;; This function calls:
  1059 ;;		_fsm
  1060 ;;		_init
  1061 ;;		_multiplex
  1062 ;; This function is called by:
  1063 ;;		Startup code after reset
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text0
  1068  00280E                     __ptext0:
  1069                           	opt stack 0
  1070  00280E                     _main:
  1071                           	opt stack 25
  1072                           
  1073                           ;main.c: 64: init();
  1074                           
  1075                           ;incstack = 0
  1076  00280E  EC28  F00F         	call	_init	;wreg free
  1077  002812                     l3316:
  1078                           
  1079                           ;main.c: 66: fsm();
  1080  002812  EC11  F008         	call	_fsm	;wreg free
  1081                           
  1082                           ;main.c: 67: multiplex();
  1083  002816  ECA8  F013         	call	_multiplex	;wreg free
  1084  00281A  D7FB               	goto	l3316
  1085  00281C                     __end_of_main:
  1086                           	opt stack 0
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096 ;; *************** function _multiplex *****************
  1097 ;; Defined at:
  1098 ;;		line 349 in file "main.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1112 ;;      Params:         0       0       0       0       0       0       0       0       0
  1113 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1115 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1116 ;;Total ram usage:        0 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    3
  1119 ;; This function calls:
  1120 ;;		_go_through_cols
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text1
  1127  002750                     __ptext1:
  1128                           	opt stack 0
  1129  002750                     _multiplex:
  1130                           	opt stack 27
  1131                           
  1132                           ;main.c: 350: LATBbits.LATB1 = 0;
  1133                           
  1134                           ;incstack = 0
  1135  002750  928A               	bcf	3978,1,c	;volatile
  1136                           
  1137                           ;main.c: 351: go_through_cols(0);
  1138  002752  0E00               	movlw	0
  1139  002754  ECE6  F00F         	call	_go_through_cols
  1140                           
  1141                           ;main.c: 352: LATBbits.LATB1 = 1;
  1142  002758  828A               	bsf	3978,1,c	;volatile
  1143                           
  1144                           ;main.c: 354: LATBbits.LATB2 = 0;
  1145  00275A  948A               	bcf	3978,2,c	;volatile
  1146                           
  1147                           ;main.c: 355: go_through_cols(4);
  1148  00275C  0E04               	movlw	4
  1149  00275E  ECE6  F00F         	call	_go_through_cols
  1150                           
  1151                           ;main.c: 356: LATBbits.LATB2 = 1;
  1152  002762  848A               	bsf	3978,2,c	;volatile
  1153                           
  1154                           ;main.c: 358: LATBbits.LATB3 = 0;
  1155  002764  968A               	bcf	3978,3,c	;volatile
  1156                           
  1157                           ;main.c: 359: go_through_cols(8);
  1158  002766  0E08               	movlw	8
  1159  002768  ECE6  F00F         	call	_go_through_cols
  1160                           
  1161                           ;main.c: 360: LATBbits.LATB3 = 1;
  1162  00276C  868A               	bsf	3978,3,c	;volatile
  1163                           
  1164                           ;main.c: 362: LATBbits.LATB4 = 0;
  1165  00276E  988A               	bcf	3978,4,c	;volatile
  1166                           
  1167                           ;main.c: 363: go_through_cols(12);
  1168  002770  0E0C               	movlw	12
  1169  002772  ECE6  F00F         	call	_go_through_cols
  1170                           
  1171                           ;main.c: 364: LATBbits.LATB4 = 1;
  1172  002776  888A               	bsf	3978,4,c	;volatile
  1173  002778  0012               	return		;funcret
  1174  00277A                     __end_of_multiplex:
  1175                           	opt stack 0
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           postdec1	equ	0xFE5
  1183                           fsr1l	equ	0xFE1
  1184                           
  1185 ;; *************** function _go_through_cols *****************
  1186 ;; Defined at:
  1187 ;;		line 335 in file "main.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  offset          1    wreg     unsigned char 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  offset          1    7[BANK0 ] unsigned char 
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1201 ;;      Params:         0       0       0       0       0       0       0       0       0
  1202 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1203 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1204 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1205 ;;Total ram usage:        4 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    2
  1208 ;; This function calls:
  1209 ;;		_myDelay_us
  1210 ;; This function is called by:
  1211 ;;		_multiplex
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text2
  1216  001FCC                     __ptext2:
  1217                           	opt stack 0
  1218  001FCC                     _go_through_cols:
  1219                           	opt stack 27
  1220                           
  1221                           ;incstack = 0
  1222                           ;go_through_cols@offset stored from wreg
  1223  001FCC  0100               	movlb	0	; () banked
  1224  001FCE  6FE3               	movwf	go_through_cols@offset& (0+255),b
  1225                           
  1226                           ;main.c: 336: if (LEDs[offset]==1) LATBbits.LATB5 =1;
  1227  001FD0  0100               	movlb	0	; () banked
  1228  001FD2  51E3               	movf	go_through_cols@offset& (0+255),w,b
  1229  001FD4  0D01               	mullw	1
  1230  001FD6  0EC0               	movlw	low _LEDs
  1231  001FD8  24F3               	addwf	prodl,w,c
  1232  001FDA  6ED9               	movwf	fsr2l,c
  1233  001FDC  0E00               	movlw	high _LEDs
  1234  001FDE  20F4               	addwfc	prodh,w,c
  1235  001FE0  6EDA               	movwf	fsr2h,c
  1236  001FE2  04DE               	decf	postinc2,w,c
  1237  001FE4  B4D8               	btfsc	status,2,c
  1238                           
  1239                           ; BSR set to: 0
  1240  001FE6  8A8A               	bsf	3978,5,c	;volatile
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 337: if (LEDs[offset+1]==1) LATBbits.LATB6 =1;
  1244                           
  1245                           ; BSR set to: 0
  1246  001FE8  0100               	movlb	0	; () banked
  1247  001FEA  51E3               	movf	go_through_cols@offset& (0+255),w,b
  1248  001FEC  0100               	movlb	0	; () banked
  1249  001FEE  6FE0               	movwf	??_go_through_cols& (0+255),b
  1250  001FF0  6BE1               	clrf	(??_go_through_cols+1)& (0+255),b
  1251  001FF2  0E01               	movlw	1
  1252  001FF4  0100               	movlb	0	; () banked
  1253  001FF6  27E0               	addwf	??_go_through_cols& (0+255),f,b
  1254  001FF8  0E00               	movlw	0
  1255  001FFA  23E1               	addwfc	(??_go_through_cols+1)& (0+255),f,b
  1256  001FFC  0EC0               	movlw	low _LEDs
  1257  001FFE  0100               	movlb	0	; () banked
  1258  002000  25E0               	addwf	??_go_through_cols& (0+255),w,b
  1259  002002  6ED9               	movwf	fsr2l,c
  1260  002004  0E00               	movlw	high _LEDs
  1261  002006  0100               	movlb	0	; () banked
  1262  002008  21E1               	addwfc	(??_go_through_cols+1)& (0+255),w,b
  1263  00200A  6EDA               	movwf	fsr2h,c
  1264  00200C  04DE               	decf	postinc2,w,c
  1265  00200E  B4D8               	btfsc	status,2,c
  1266                           
  1267                           ; BSR set to: 0
  1268  002010  8C8A               	bsf	3978,6,c	;volatile
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 338: if (LEDs[offset+2]==1) LATBbits.LATB7 =1;
  1272                           
  1273                           ; BSR set to: 0
  1274  002012  0100               	movlb	0	; () banked
  1275  002014  51E3               	movf	go_through_cols@offset& (0+255),w,b
  1276  002016  0100               	movlb	0	; () banked
  1277  002018  6FE0               	movwf	??_go_through_cols& (0+255),b
  1278  00201A  6BE1               	clrf	(??_go_through_cols+1)& (0+255),b
  1279  00201C  0E02               	movlw	2
  1280  00201E  0100               	movlb	0	; () banked
  1281  002020  27E0               	addwf	??_go_through_cols& (0+255),f,b
  1282  002022  0E00               	movlw	0
  1283  002024  23E1               	addwfc	(??_go_through_cols+1)& (0+255),f,b
  1284  002026  0EC0               	movlw	low _LEDs
  1285  002028  0100               	movlb	0	; () banked
  1286  00202A  25E0               	addwf	??_go_through_cols& (0+255),w,b
  1287  00202C  6ED9               	movwf	fsr2l,c
  1288  00202E  0E00               	movlw	high _LEDs
  1289  002030  0100               	movlb	0	; () banked
  1290  002032  21E1               	addwfc	(??_go_through_cols+1)& (0+255),w,b
  1291  002034  6EDA               	movwf	fsr2h,c
  1292  002036  04DE               	decf	postinc2,w,c
  1293  002038  B4D8               	btfsc	status,2,c
  1294                           
  1295                           ; BSR set to: 0
  1296  00203A  8E8A               	bsf	3978,7,c	;volatile
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 339: if (LEDs[offset+3]==1) LATAbits.LATA0 =1;
  1300                           
  1301                           ; BSR set to: 0
  1302  00203C  0100               	movlb	0	; () banked
  1303  00203E  51E3               	movf	go_through_cols@offset& (0+255),w,b
  1304  002040  0100               	movlb	0	; () banked
  1305  002042  6FE0               	movwf	??_go_through_cols& (0+255),b
  1306  002044  6BE1               	clrf	(??_go_through_cols+1)& (0+255),b
  1307  002046  0E03               	movlw	3
  1308  002048  0100               	movlb	0	; () banked
  1309  00204A  27E0               	addwf	??_go_through_cols& (0+255),f,b
  1310  00204C  0E00               	movlw	0
  1311  00204E  23E1               	addwfc	(??_go_through_cols+1)& (0+255),f,b
  1312  002050  0EC0               	movlw	low _LEDs
  1313  002052  0100               	movlb	0	; () banked
  1314  002054  25E0               	addwf	??_go_through_cols& (0+255),w,b
  1315  002056  6ED9               	movwf	fsr2l,c
  1316  002058  0E00               	movlw	high _LEDs
  1317  00205A  0100               	movlb	0	; () banked
  1318  00205C  21E1               	addwfc	(??_go_through_cols+1)& (0+255),w,b
  1319  00205E  6EDA               	movwf	fsr2h,c
  1320  002060  04DE               	decf	postinc2,w,c
  1321  002062  B4D8               	btfsc	status,2,c
  1322                           
  1323                           ; BSR set to: 0
  1324  002064  8089               	bsf	3977,0,c	;volatile
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;main.c: 341: myDelay_us(150);
  1328                           
  1329                           ; BSR set to: 0
  1330  002066  0E00               	movlw	0
  1331  002068  0100               	movlb	0	; () banked
  1332  00206A  6FDD               	movwf	(myDelay_us@us+1)& (0+255),b
  1333  00206C  0E96               	movlw	150
  1334  00206E  6FDC               	movwf	myDelay_us@us& (0+255),b
  1335  002070  EC7A  F013         	call	_myDelay_us	;wreg free
  1336                           
  1337                           ;main.c: 343: LATBbits.LATB5 = 0;
  1338  002074  9A8A               	bcf	3978,5,c	;volatile
  1339                           
  1340                           ;main.c: 344: LATBbits.LATB6 = 0;
  1341  002076  9C8A               	bcf	3978,6,c	;volatile
  1342                           
  1343                           ;main.c: 345: LATBbits.LATB7 = 0;
  1344  002078  9E8A               	bcf	3978,7,c	;volatile
  1345                           
  1346                           ;main.c: 346: LATAbits.LATA0 = 0;
  1347  00207A  9089               	bcf	3977,0,c	;volatile
  1348  00207C  0012               	return		;funcret
  1349  00207E                     __end_of_go_through_cols:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodh	equ	0xFF4
  1356                           prodl	equ	0xFF3
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           postdec1	equ	0xFE5
  1360                           fsr1l	equ	0xFE1
  1361                           postinc2	equ	0xFDE
  1362                           fsr2h	equ	0xFDA
  1363                           fsr2l	equ	0xFD9
  1364                           status	equ	0xFD8
  1365                           
  1366 ;; *************** function _init *****************
  1367 ;; Defined at:
  1368 ;;		line 75 in file "main.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1382 ;;      Params:         0       0       0       0       0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1384 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1385 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1386 ;;Total ram usage:        3 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    3
  1389 ;; This function calls:
  1390 ;;		___lwtoft
  1391 ;;		_hardware_init
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text3
  1398  001E50                     __ptext3:
  1399                           	opt stack 0
  1400  001E50                     _init:
  1401                           	opt stack 27
  1402                           
  1403                           ;main.c: 76: TRISCbits.TRISC6 = 0;
  1404                           
  1405                           ;incstack = 0
  1406  001E50  9C94               	bcf	3988,6,c	;volatile
  1407                           
  1408                           ;main.c: 77: TRISCbits.TRISC7 = 0;
  1409  001E52  9E94               	bcf	3988,7,c	;volatile
  1410                           
  1411                           ;main.c: 78: TRISBbits.TRISB0 = 1;
  1412  001E54  8093               	bsf	3987,0,c	;volatile
  1413                           
  1414                           ;main.c: 79: TRISBbits.TRISB1 = 0;
  1415  001E56  9293               	bcf	3987,1,c	;volatile
  1416                           
  1417                           ;main.c: 80: TRISBbits.TRISB2 = 0;
  1418  001E58  9493               	bcf	3987,2,c	;volatile
  1419                           
  1420                           ;main.c: 81: TRISBbits.TRISB3 = 0;
  1421  001E5A  9693               	bcf	3987,3,c	;volatile
  1422                           
  1423                           ;main.c: 82: TRISBbits.TRISB4 = 0;
  1424  001E5C  9893               	bcf	3987,4,c	;volatile
  1425                           
  1426                           ;main.c: 83: TRISBbits.TRISB5 = 0;
  1427  001E5E  9A93               	bcf	3987,5,c	;volatile
  1428                           
  1429                           ;main.c: 84: TRISBbits.TRISB6 = 0;
  1430  001E60  9C93               	bcf	3987,6,c	;volatile
  1431                           
  1432                           ;main.c: 85: TRISBbits.TRISB7 = 0;
  1433  001E62  9E93               	bcf	3987,7,c	;volatile
  1434                           
  1435                           ;main.c: 86: TRISAbits.TRISA0 = 0;
  1436  001E64  9092               	bcf	3986,0,c	;volatile
  1437                           
  1438                           ;main.c: 87: TRISAbits.TRISA1 = 0;
  1439  001E66  9292               	bcf	3986,1,c	;volatile
  1440                           
  1441                           ;main.c: 88: TRISAbits.TRISA2 = 0;
  1442  001E68  9492               	bcf	3986,2,c	;volatile
  1443                           
  1444                           ;main.c: 89: TRISAbits.TRISA3 = 0;
  1445  001E6A  9692               	bcf	3986,3,c	;volatile
  1446                           
  1447                           ;main.c: 90: TRISAbits.TRISA4 = 1;
  1448  001E6C  8892               	bsf	3986,4,c	;volatile
  1449                           
  1450                           ;main.c: 91: TRISAbits.TRISA5 = 1;
  1451  001E6E  8A92               	bsf	3986,5,c	;volatile
  1452                           
  1453                           ;main.c: 93: LATCbits.LATC6 = 0;
  1454  001E70  9C8B               	bcf	3979,6,c	;volatile
  1455                           
  1456                           ;main.c: 94: LATCbits.LATC7 = 0;
  1457  001E72  9E8B               	bcf	3979,7,c	;volatile
  1458                           
  1459                           ;main.c: 95: LATBbits.LATB1 = 0;
  1460  001E74  928A               	bcf	3978,1,c	;volatile
  1461                           
  1462                           ;main.c: 96: LATBbits.LATB2 = 0;
  1463  001E76  948A               	bcf	3978,2,c	;volatile
  1464                           
  1465                           ;main.c: 97: LATBbits.LATB3 = 0;
  1466  001E78  968A               	bcf	3978,3,c	;volatile
  1467                           
  1468                           ;main.c: 98: LATBbits.LATB4 = 0;
  1469  001E7A  988A               	bcf	3978,4,c	;volatile
  1470                           
  1471                           ;main.c: 99: LATBbits.LATB5 = 0;
  1472  001E7C  9A8A               	bcf	3978,5,c	;volatile
  1473                           
  1474                           ;main.c: 100: LATBbits.LATB6 = 0;
  1475  001E7E  9C8A               	bcf	3978,6,c	;volatile
  1476                           
  1477                           ;main.c: 101: LATBbits.LATB7 = 0;
  1478  001E80  9E8A               	bcf	3978,7,c	;volatile
  1479                           
  1480                           ;main.c: 102: LATAbits.LATA0 = 0;
  1481  001E82  9089               	bcf	3977,0,c	;volatile
  1482                           
  1483                           ;main.c: 103: LATAbits.LATA1 = 1;
  1484  001E84  8289               	bsf	3977,1,c	;volatile
  1485                           
  1486                           ;main.c: 104: LATAbits.LATA2 = 0;
  1487  001E86  9489               	bcf	3977,2,c	;volatile
  1488                           
  1489                           ;main.c: 105: LATAbits.LATA3 = 0;
  1490  001E88  9689               	bcf	3977,3,c	;volatile
  1491                           
  1492                           ;main.c: 107: current_state = CALIBRATION;
  1493  001E8A  0E00               	movlw	0
  1494  001E8C  0100               	movlb	0	; () banked
  1495  001E8E  6FD8               	movwf	_current_state& (0+255),b
  1496                           
  1497                           ;main.c: 109: note_new = 0;
  1498  001E90  0E00               	movlw	0
  1499  001E92  0100               	movlb	0	; () banked
  1500  001E94  6FD1               	movwf	(_note_new+1)& (0+255),b
  1501  001E96  0E00               	movlw	0
  1502  001E98  6FD0               	movwf	_note_new& (0+255),b
  1503                           
  1504                           ;main.c: 110: note_win = 0;
  1505  001E9A  0E00               	movlw	0
  1506  001E9C  0100               	movlb	0	; () banked
  1507  001E9E  6FD3               	movwf	(_note_win+1)& (0+255),b
  1508  001EA0  0E00               	movlw	0
  1509  001EA2  6FD2               	movwf	_note_win& (0+255),b
  1510                           
  1511                           ;main.c: 111: hard_speed = 1.0;
  1512  001EA4  0E00               	movlw	0
  1513  001EA6  0100               	movlb	0	; () banked
  1514  001EA8  6FF4               	movwf	_hard_speed& (0+255),b
  1515  001EAA  0E80               	movlw	128
  1516  001EAC  0100               	movlb	0	; () banked
  1517  001EAE  6FF5               	movwf	(_hard_speed+1)& (0+255),b
  1518  001EB0  0E3F               	movlw	63
  1519  001EB2  0100               	movlb	0	; () banked
  1520  001EB4  6FF6               	movwf	(_hard_speed+2)& (0+255),b
  1521                           
  1522                           ;main.c: 112: hard_speed_timer = 500;
  1523  001EB6  0E01               	movlw	1
  1524  001EB8  0100               	movlb	0	; () banked
  1525  001EBA  6FFB               	movwf	(_hard_speed_timer+1)& (0+255),b
  1526  001EBC  0EF4               	movlw	244
  1527  001EBE  6FFA               	movwf	_hard_speed_timer& (0+255),b
  1528                           
  1529                           ;main.c: 113: stepper_direction = 1;
  1530  001EC0  0E00               	movlw	0
  1531  001EC2  0100               	movlb	0	; () banked
  1532  001EC4  6FFD               	movwf	(_stepper_direction+1)& (0+255),b
  1533  001EC6  0E01               	movlw	1
  1534  001EC8  6FFC               	movwf	_stepper_direction& (0+255),b
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 114: steps_per_led = total_steps/16;
  1538  001ECA  0E1F               	movlw	low _total_steps
  1539  001ECC  6EF6               	movwf	tblptrl,c
  1540  001ECE                     	if	1	;There is more than 1 active tblptr byte
  1541  001ECE  0E10               	movlw	high _total_steps
  1542  001ED0  6EF7               	movwf	tblptrh,c
  1543  001ED2                     	endif
  1544  001ED2                     	if	0	;There are less than 3 active tblptr bytes
  1545  001ED2                     	endif
  1546  001ED2  0009               	tblrd		*+
  1547  001ED4  CFF5 F01A          	movff	tablat,??_init
  1548  001ED8  0009               	tblrd		*+
  1549  001EDA  CFF5 F01B          	movff	tablat,??_init+1
  1550  001EDE  0E04               	movlw	4
  1551  001EE0  6E1C               	movwf	(??_init+2)& (0+255),c
  1552  001EE2                     u3305:
  1553  001EE2  90D8               	bcf	status,0,c
  1554  001EE4  321B               	rrcf	??_init+1,f,c
  1555  001EE6  321A               	rrcf	??_init,f,c
  1556  001EE8  2E1C               	decfsz	(??_init+2)& (0+255),f,c
  1557  001EEA  D7FB               	goto	u3305
  1558  001EEC  C01A  F017         	movff	??_init,___lwtoft@c
  1559  001EF0  C01B  F018         	movff	??_init+1,___lwtoft@c+1
  1560  001EF4  ECE3  F013         	call	___lwtoft	;wreg free
  1561  001EF8  C017  F0F7         	movff	?___lwtoft,_steps_per_led
  1562  001EFC  C018  F0F8         	movff	?___lwtoft+1,_steps_per_led+1
  1563  001F00  C019  F0F9         	movff	?___lwtoft+2,_steps_per_led+2
  1564                           
  1565                           ;main.c: 115: hardware_init();
  1566  001F04  EC15  F014         	call	_hardware_init	;wreg free
  1567                           
  1568                           ;main.c: 116: prev_hall = PORTAbits.RA5;
  1569  001F08  0E00               	movlw	0
  1570  001F0A  BA80               	btfsc	3968,5,c	;volatile
  1571  001F0C  0E01               	movlw	1
  1572  001F0E  0100               	movlb	0	; () banked
  1573  001F10  6FFE               	movwf	_prev_hall& (0+255),b
  1574                           
  1575                           ; BSR set to: 0
  1576  001F12  0012               	return		;funcret
  1577  001F14                     __end_of_init:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1l	equ	0xFE1
  1589                           postinc2	equ	0xFDE
  1590                           fsr2h	equ	0xFDA
  1591                           fsr2l	equ	0xFD9
  1592                           status	equ	0xFD8
  1593                           
  1594 ;; *************** function _hardware_init *****************
  1595 ;; Defined at:
  1596 ;;		line 39 in file "config.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;		None
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;		None
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1610 ;;      Params:         0       0       0       0       0       0       0       0       0
  1611 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1613 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1614 ;;Total ram usage:        0 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    2
  1617 ;; This function calls:
  1618 ;;		_OpenTimer0
  1619 ;; This function is called by:
  1620 ;;		_init
  1621 ;;		_initBuzz
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text4
  1626  00282A                     __ptext4:
  1627                           	opt stack 0
  1628  00282A                     _hardware_init:
  1629                           	opt stack 27
  1630                           
  1631                           ;config.c: 40: ADCON1 = 0x0F;
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;incstack = 0
  1635  00282A  0E0F               	movlw	15
  1636  00282C  6EC1               	movwf	4033,c	;volatile
  1637                           
  1638                           ;config.c: 50: OpenTimer0(0);
  1639  00282E  0E00               	movlw	0
  1640  002830  ECC1  F012         	call	_OpenTimer0
  1641  002834  0012               	return		;funcret
  1642  002836                     __end_of_hardware_init:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1l	equ	0xFE1
  1654                           postinc2	equ	0xFDE
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function _OpenTimer0 *****************
  1660 ;; Defined at:
  1661 ;;		line 97 in file "config.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;  intEnable       1    wreg     unsigned char 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  intEnable       1   16[COMRAM] unsigned char 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1675 ;;      Params:         0       0       0       0       0       0       0       0       0
  1676 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1677 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1678 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1679 ;;Total ram usage:        3 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    1
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_hardware_init
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text5
  1690  002582                     __ptext5:
  1691                           	opt stack 0
  1692  002582                     _OpenTimer0:
  1693                           	opt stack 27
  1694                           
  1695                           ;incstack = 0
  1696                           ;OpenTimer0@intEnable stored from wreg
  1697  002582  6E11               	movwf	OpenTimer0@intEnable,c
  1698                           
  1699                           ;config.c: 98: T0CONbits.T08BIT = 1;
  1700  002584  8CD5               	bsf	4053,6,c	;volatile
  1701                           
  1702                           ;config.c: 99: T0CONbits.T0CS = 0;
  1703  002586  9AD5               	bcf	4053,5,c	;volatile
  1704                           
  1705                           ;config.c: 100: T0CONbits.PSA = 0;
  1706  002588  96D5               	bcf	4053,3,c	;volatile
  1707                           
  1708                           ;config.c: 101: T0CONbits.T0PS = 0b101;
  1709  00258A  50D5               	movf	4053,w,c	;volatile
  1710  00258C  0BF8               	andlw	-8
  1711  00258E  0905               	iorlw	5
  1712  002590  6ED5               	movwf	4053,c	;volatile
  1713                           
  1714                           ;config.c: 102: TMR0H = 0;
  1715  002592  0E00               	movlw	0
  1716  002594  6ED7               	movwf	4055,c	;volatile
  1717                           
  1718                           ;config.c: 103: TMR0L = 69;
  1719  002596  0E45               	movlw	69
  1720  002598  6ED6               	movwf	4054,c	;volatile
  1721                           
  1722                           ;config.c: 105: INTCONbits.TMR0IE = intEnable & 0x01;
  1723  00259A  C011  F00F         	movff	OpenTimer0@intEnable,??_OpenTimer0
  1724  00259E  0E01               	movlw	1
  1725  0025A0  160F               	andwf	??_OpenTimer0,f,c
  1726  0025A2  3A0F               	swapf	??_OpenTimer0,f,c
  1727  0025A4  460F               	rlncf	??_OpenTimer0,f,c
  1728  0025A6  50F2               	movf	intcon,w,c	;volatile
  1729  0025A8  180F               	xorwf	??_OpenTimer0,w,c
  1730  0025AA  0BDF               	andlw	-33
  1731  0025AC  180F               	xorwf	??_OpenTimer0,w,c
  1732  0025AE  6EF2               	movwf	intcon,c	;volatile
  1733                           
  1734                           ;config.c: 106: INTCONbits.GIE = (intEnable & 0x01) | INTCONbits.GIE;
  1735  0025B0  AEF2               	btfss	intcon,7,c	;volatile
  1736  0025B2  D003               	goto	u1580
  1737  0025B4  6A0F               	clrf	??_OpenTimer0& (0+255),c
  1738  0025B6  2A0F               	incf	??_OpenTimer0& (0+255),f,c
  1739  0025B8  D001               	goto	u1588
  1740  0025BA                     u1580:
  1741  0025BA  6A0F               	clrf	??_OpenTimer0& (0+255),c
  1742  0025BC                     u1588:
  1743  0025BC  5011               	movf	OpenTimer0@intEnable,w,c
  1744  0025BE  0B01               	andlw	1
  1745  0025C0  100F               	iorwf	??_OpenTimer0,w,c
  1746  0025C2  6E10               	movwf	(??_OpenTimer0+1)& (0+255),c
  1747  0025C4  3210               	rrcf	??_OpenTimer0+1,f,c
  1748  0025C6  3210               	rrcf	??_OpenTimer0+1,f,c
  1749  0025C8  50F2               	movf	intcon,w,c	;volatile
  1750  0025CA  1810               	xorwf	??_OpenTimer0+1,w,c
  1751  0025CC  0B7F               	andlw	-129
  1752  0025CE  1810               	xorwf	??_OpenTimer0+1,w,c
  1753  0025D0  6EF2               	movwf	intcon,c	;volatile
  1754                           
  1755                           ;config.c: 107: INTCONbits.TMR0IF = 0;
  1756  0025D2  94F2               	bcf	intcon,2,c	;volatile
  1757  0025D4  0012               	return		;funcret
  1758  0025D6                     __end_of_OpenTimer0:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           prodh	equ	0xFF4
  1765                           prodl	equ	0xFF3
  1766                           intcon	equ	0xFF2
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           postdec1	equ	0xFE5
  1770                           fsr1l	equ	0xFE1
  1771                           postinc2	equ	0xFDE
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function ___lwtoft *****************
  1777 ;; Defined at:
  1778 ;;		line 28 in file "/Applications/microchip/xc8/v1.36/sources/common/lwtoft.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  c               2   22[COMRAM] unsigned int 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  3   22[COMRAM] float 
  1785 ;; Registers used:
  1786 ;;		wreg, status,2, status,0, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1792 ;;      Params:         3       0       0       0       0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1795 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1796 ;;Total ram usage:        3 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    2
  1799 ;; This function calls:
  1800 ;;		___ftpack
  1801 ;; This function is called by:
  1802 ;;		_init
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text6
  1807  0027C6                     __ptext6:
  1808                           	opt stack 0
  1809  0027C6                     ___lwtoft:
  1810                           	opt stack 27
  1811                           
  1812                           ;incstack = 0
  1813  0027C6  C017  F00F         	movff	___lwtoft@c,___ftpack@arg
  1814  0027CA  C018  F010         	movff	___lwtoft@c+1,___ftpack@arg+1
  1815  0027CE  6A11               	clrf	___ftpack@arg+2,c
  1816  0027D0  0E8E               	movlw	142
  1817  0027D2  6E12               	movwf	___ftpack@exp,c
  1818  0027D4  0E00               	movlw	0
  1819  0027D6  6E13               	movwf	___ftpack@sign,c
  1820  0027D8  EC3F  F010         	call	___ftpack	;wreg free
  1821  0027DC  C00F  F017         	movff	?___ftpack,?___lwtoft
  1822  0027E0  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  1823  0027E4  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  1824  0027E8  0012               	return	
  1825  0027EA                     __end_of___lwtoft:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           intcon	equ	0xFF2
  1834                           postinc0	equ	0xFEE
  1835                           wreg	equ	0xFE8
  1836                           postdec1	equ	0xFE5
  1837                           fsr1l	equ	0xFE1
  1838                           postinc2	equ	0xFDE
  1839                           fsr2h	equ	0xFDA
  1840                           fsr2l	equ	0xFD9
  1841                           status	equ	0xFD8
  1842                           
  1843 ;; *************** function _fsm *****************
  1844 ;; Defined at:
  1845 ;;		line 121 in file "main.c"
  1846 ;; Parameters:    Size  Location     Type
  1847 ;;		None
  1848 ;; Auto vars:     Size  Location     Type
  1849 ;;  i               1    6[BANK1 ] unsigned char 
  1850 ;;  i               1    5[BANK1 ] unsigned char 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1860 ;;      Params:         0       0       0       0       0       0       0       0       0
  1861 ;;      Locals:         0       0       5       0       0       0       0       0       0
  1862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1863 ;;      Totals:         0       0       5       0       0       0       0       0       0
  1864 ;;Total ram usage:        5 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; Hardware stack levels required when called:    5
  1867 ;; This function calls:
  1868 ;;		___awmod
  1869 ;;		___awtoft
  1870 ;;		___ftadd
  1871 ;;		___ftdiv
  1872 ;;		___ftge
  1873 ;;		___ftmul
  1874 ;;		___lbtoft
  1875 ;;		___lwmod
  1876 ;;		___wmul
  1877 ;;		_buzz
  1878 ;;		_nothingElseMatters
  1879 ;;		_rand
  1880 ;;		_setAllLeds
  1881 ;;		_srand
  1882 ;;		_stepper_pulse
  1883 ;;		_superMario
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text7
  1890  001022                     __ptext7:
  1891                           	opt stack 0
  1892  001022                     _fsm:
  1893                           	opt stack 25
  1894                           
  1895                           ;main.c: 123: switch (current_state) {
  1896                           
  1897                           ;incstack = 0
  1898  001022  D2C6               	goto	l3284
  1899  001024                     l3100:
  1900                           
  1901                           ;main.c: 126: stepper_pulse(1);
  1902  001024  0E00               	movlw	0
  1903  001026  0100               	movlb	0	; () banked
  1904  001028  6FE0               	movwf	stepper_pulse@speed& (0+255),b
  1905  00102A  0E80               	movlw	128
  1906  00102C  0100               	movlb	0	; () banked
  1907  00102E  6FE1               	movwf	(stepper_pulse@speed+1)& (0+255),b
  1908  001030  0E3F               	movlw	63
  1909  001032  0100               	movlb	0	; () banked
  1910  001034  6FE2               	movwf	(stepper_pulse@speed+2)& (0+255),b
  1911  001036  EC61  F00D         	call	_stepper_pulse	;wreg free
  1912                           
  1913                           ;main.c: 129: if (PORTAbits.RA5 != prev_hall) {
  1914  00103A  AA80               	btfss	3968,5,c	;volatile
  1915  00103C  D002               	goto	u3310
  1916  00103E  0E01               	movlw	1
  1917  001040  D001               	goto	u3316
  1918  001042                     u3310:
  1919  001042  0E00               	movlw	0
  1920  001044                     u3316:
  1921  001044  0100               	movlb	0	; () banked
  1922  001046  19FE               	xorwf	_prev_hall& (0+255),w,b
  1923  001048  B4D8               	btfsc	status,2,c
  1924  00104A  0012               	return	
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 130: prev_hall = PORTAbits.RA5;
  1928  00104C  0E00               	movlw	0
  1929  00104E  BA80               	btfsc	3968,5,c	;volatile
  1930  001050  0E01               	movlw	1
  1931  001052  0100               	movlb	0	; () banked
  1932  001054  6FFE               	movwf	_prev_hall& (0+255),b
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 131: if (nr_toggles == 1) {
  1936  001056  0100               	movlb	0	; () banked
  1937  001058  05D9               	decf	_nr_toggles& (0+255),w,b
  1938  00105A  A4D8               	btfss	status,2,c
  1939  00105C  D009               	goto	l3110
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;main.c: 132: position = 0;
  1943  00105E  0E00               	movlw	0
  1944  001060  0100               	movlb	0	; () banked
  1945  001062  6FD5               	movwf	(_position+1)& (0+255),b
  1946  001064  0E00               	movlw	0
  1947  001066  6FD4               	movwf	_position& (0+255),b
  1948                           
  1949                           ;main.c: 133: current_state = NEW_GAME;
  1950  001068  0E01               	movlw	1
  1951  00106A  0100               	movlb	0	; () banked
  1952  00106C  6FD8               	movwf	_current_state& (0+255),b
  1953                           
  1954                           ;main.c: 134: }
  1955  00106E  0012               	return	
  1956  001070                     l3110:
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;main.c: 135: else {
  1960                           ;main.c: 136: nr_toggles+=1;
  1961  001070  0100               	movlb	0	; () banked
  1962  001072  2BD9               	incf	_nr_toggles& (0+255),f,b
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 137: }
  1966                           ;main.c: 138: }
  1967                           ;main.c: 140: break;
  1968                           
  1969                           ; BSR set to: 0
  1970  001074  0012               	return	
  1971  001076                     l173:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;main.c: 144: LATAbits.LATA2 = 1;
  1975  001076  8489               	bsf	3977,2,c	;volatile
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 145: setAllLeds(0);
  1979  001078  0E00               	movlw	0
  1980  00107A  ECBD  F013         	call	_setAllLeds
  1981                           
  1982                           ;main.c: 146: seed_nr++;
  1983  00107E  0100               	movlb	0	; () banked
  1984  001080  4BD6               	infsnz	_seed_nr& (0+255),f,b
  1985  001082  2BD7               	incf	(_seed_nr+1)& (0+255),f,b
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;main.c: 147: seed_nr%=1000;
  1989  001084  C0D6  F00F         	movff	_seed_nr,___lwmod@dividend
  1990  001088  C0D7  F010         	movff	_seed_nr+1,___lwmod@dividend+1
  1991  00108C  0E03               	movlw	3
  1992  00108E  6E12               	movwf	___lwmod@divisor+1,c
  1993  001090  0EE8               	movlw	232
  1994  001092  6E11               	movwf	___lwmod@divisor,c
  1995  001094  EC3D  F013         	call	___lwmod	;wreg free
  1996  001098  C00F  F0D6         	movff	?___lwmod,_seed_nr
  1997  00109C  C010  F0D7         	movff	?___lwmod+1,_seed_nr+1
  1998                           
  1999                           ;main.c: 149: note_new%=last_new_note;
  2000  0010A0  C0D0  F00F         	movff	_note_new,___lwmod@dividend
  2001  0010A4  C0D1  F010         	movff	_note_new+1,___lwmod@dividend+1
  2002  0010A8  0E1B               	movlw	low _last_new_note
  2003  0010AA  6EF6               	movwf	tblptrl,c
  2004  0010AC                     	if	1	;There is more than 1 active tblptr byte
  2005  0010AC  0E10               	movlw	high _last_new_note
  2006  0010AE  6EF7               	movwf	tblptrh,c
  2007  0010B0                     	endif
  2008  0010B0                     	if	0	;There are less than 3 active tblptr bytes
  2009  0010B0                     	endif
  2010  0010B0  0009               	tblrd		*+
  2011  0010B2  CFF5 F011          	movff	tablat,___lwmod@divisor
  2012  0010B6  000A               	tblrd		*-
  2013  0010B8  CFF5 F012          	movff	tablat,___lwmod@divisor+1
  2014  0010BC  EC3D  F013         	call	___lwmod	;wreg free
  2015  0010C0  C00F  F0D0         	movff	?___lwmod,_note_new
  2016  0010C4  C010  F0D1         	movff	?___lwmod+1,_note_new+1
  2017                           
  2018                           ;main.c: 150: was_released = 0;
  2019  0010C8  0E00               	movlw	0
  2020  0010CA  0100               	movlb	0	; () banked
  2021  0010CC  6FDB               	movwf	_was_released& (0+255),b
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;main.c: 151: note_win = 0;
  2025  0010CE  0E00               	movlw	0
  2026  0010D0  0100               	movlb	0	; () banked
  2027  0010D2  6FD3               	movwf	(_note_win+1)& (0+255),b
  2028  0010D4  0E00               	movlw	0
  2029  0010D6  6FD2               	movwf	_note_win& (0+255),b
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;main.c: 152: LATAbits.LATA1 = 1;
  2033  0010D8  8289               	bsf	3977,1,c	;volatile
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;main.c: 153: nothingElseMatters(note_new);
  2037  0010DA  C0D0  F0F2         	movff	_note_new,nothingElseMatters@index
  2038  0010DE  C0D1  F0F3         	movff	_note_new+1,nothingElseMatters@index+1
  2039  0010E2  EC79  F011         	call	_nothingElseMatters	;wreg free
  2040                           
  2041                           ;main.c: 154: note_new++;
  2042  0010E6  0100               	movlb	0	; () banked
  2043  0010E8  4BD0               	infsnz	_note_new& (0+255),f,b
  2044  0010EA  2BD1               	incf	(_note_new+1)& (0+255),f,b
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 157: if (PORTAbits.RA4 == 0) {
  2048  0010EC  B880               	btfsc	3968,4,c	;volatile
  2049  0010EE  0012               	return	
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 158: srand(seed_nr);
  2053  0010F0  C0D6  F00F         	movff	_seed_nr,srand@x
  2054  0010F4  C0D7  F010         	movff	_seed_nr+1,srand@x+1
  2055  0010F8  EC0E  F014         	call	_srand	;wreg free
  2056                           
  2057                           ;main.c: 159: if (PORTBbits.RB0 == 0) {
  2058  0010FC  B081               	btfsc	3969,0,c	;volatile
  2059  0010FE  D007               	goto	l3140
  2060                           
  2061                           ;main.c: 160: current_state = MOVE_HARD;
  2062  001100  0E03               	movlw	3
  2063  001102  0100               	movlb	0	; () banked
  2064  001104  6FD8               	movwf	_current_state& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 161: setAllLeds(0);
  2068  001106  0E00               	movlw	0
  2069  001108  ECBD  F013         	call	_setAllLeds
  2070                           
  2071                           ;main.c: 162: }
  2072  00110C  0012               	return	
  2073  00110E                     l3140:
  2074                           
  2075                           ;main.c: 163: else {
  2076                           ;main.c: 164: current_state = MOVE_EASY;
  2077  00110E  0E02               	movlw	2
  2078  001110  0100               	movlb	0	; () banked
  2079  001112  6FD8               	movwf	_current_state& (0+255),b
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;main.c: 165: setAllLeds(0);
  2083  001114  0E00               	movlw	0
  2084  001116  ECBD  F013         	call	_setAllLeds
  2085                           
  2086                           ;main.c: 166: }
  2087                           ;main.c: 167: }
  2088                           ;main.c: 170: break;
  2089  00111A  0012               	return	
  2090  00111C                     l3144:
  2091                           
  2092                           ;main.c: 174: stepper_pulse(0.8);
  2093  00111C  0ECD               	movlw	205
  2094  00111E  0100               	movlb	0	; () banked
  2095  001120  6FE0               	movwf	stepper_pulse@speed& (0+255),b
  2096  001122  0E4C               	movlw	76
  2097  001124  0100               	movlb	0	; () banked
  2098  001126  6FE1               	movwf	(stepper_pulse@speed+1)& (0+255),b
  2099  001128  0E3F               	movlw	63
  2100  00112A  0100               	movlb	0	; () banked
  2101  00112C  6FE2               	movwf	(stepper_pulse@speed+2)& (0+255),b
  2102  00112E  EC61  F00D         	call	_stepper_pulse	;wreg free
  2103                           
  2104                           ;main.c: 176: if (PORTBbits.RB0 == 0)
  2105  001132  B081               	btfsc	3969,0,c	;volatile
  2106  001134  D003               	goto	l3150
  2107                           
  2108                           ;main.c: 177: current_state = MOVE_HARD;
  2109  001136  0E03               	movlw	3
  2110  001138  0100               	movlb	0	; () banked
  2111  00113A  6FD8               	movwf	_current_state& (0+255),b
  2112  00113C                     l3150:
  2113                           
  2114                           ;main.c: 180: if (PORTAbits.RA4 == 0) {
  2115  00113C  B880               	btfsc	3968,4,c	;volatile
  2116  00113E  D008               	goto	l3156
  2117                           
  2118                           ;main.c: 181: if (was_released == 1)
  2119  001140  0100               	movlb	0	; () banked
  2120  001142  05DB               	decf	_was_released& (0+255),w,b
  2121  001144  A4D8               	btfss	status,2,c
  2122  001146  0012               	return	
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;main.c: 182: current_state = FIRE;
  2126  001148  0E05               	movlw	5
  2127  00114A  0100               	movlb	0	; () banked
  2128  00114C  6FD8               	movwf	_current_state& (0+255),b
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;main.c: 183: }
  2132  00114E  0012               	return	
  2133  001150                     l3156:
  2134                           
  2135                           ;main.c: 184: else {
  2136                           ;main.c: 185: if (was_released == 0)
  2137  001150  0100               	movlb	0	; () banked
  2138  001152  51DB               	movf	_was_released& (0+255),w,b
  2139  001154  0100               	movlb	0	; () banked
  2140  001156  A4D8               	btfss	status,2,c
  2141  001158  0012               	return	
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;main.c: 186: current_state = RELEASE;
  2145  00115A  0E04               	movlw	4
  2146  00115C  0100               	movlb	0	; () banked
  2147  00115E  6FD8               	movwf	_current_state& (0+255),b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;main.c: 187: }
  2151                           ;main.c: 190: break;
  2152                           
  2153                           ; BSR set to: 0
  2154  001160  0012               	return	
  2155  001162                     l3160:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 194: stepper_pulse(hard_speed);
  2159  001162  C0F4  F0E0         	movff	_hard_speed,stepper_pulse@speed
  2160  001166  C0F5  F0E1         	movff	_hard_speed+1,stepper_pulse@speed+1
  2161  00116A  C0F6  F0E2         	movff	_hard_speed+2,stepper_pulse@speed+2
  2162  00116E  EC61  F00D         	call	_stepper_pulse	;wreg free
  2163                           
  2164                           ;main.c: 195: hard_speed_timer--;
  2165  001172  0100               	movlb	0	; () banked
  2166  001174  07FA               	decf	_hard_speed_timer& (0+255),f,b
  2167  001176  A0D8               	btfss	status,0,c
  2168  001178  07FB               	decf	(_hard_speed_timer+1)& (0+255),f,b
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;main.c: 197: if (PORTBbits.RB0 == 1)
  2172  00117A  A081               	btfss	3969,0,c	;volatile
  2173  00117C  D003               	goto	l3168
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;main.c: 198: current_state = MOVE_EASY;
  2177  00117E  0E02               	movlw	2
  2178  001180  0100               	movlb	0	; () banked
  2179  001182  6FD8               	movwf	_current_state& (0+255),b
  2180  001184                     l3168:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;main.c: 201: if (was_released == 1) {
  2184  001184  0100               	movlb	0	; () banked
  2185  001186  05DB               	decf	_was_released& (0+255),w,b
  2186  001188  A4D8               	btfss	status,2,c
  2187  00118A  D012               	goto	l185
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;main.c: 202: if (PORTAbits.RA4 == 0) {
  2191  00118C  B880               	btfsc	3968,4,c	;volatile
  2192  00118E  D004               	goto	l3174
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;main.c: 203: current_state = FIRE;
  2196  001190  0E05               	movlw	5
  2197  001192  0100               	movlb	0	; () banked
  2198  001194  6FD8               	movwf	_current_state& (0+255),b
  2199                           
  2200                           ;main.c: 204: }
  2201  001196  0012               	return	
  2202  001198                     l3174:
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;main.c: 205: else if (hard_speed_timer <= 5) {
  2206  001198  0100               	movlb	0	; () banked
  2207  00119A  51FB               	movf	(_hard_speed_timer+1)& (0+255),w,b
  2208  00119C  E104               	bnz	u3431
  2209  00119E  0E06               	movlw	6
  2210  0011A0  0100               	movlb	0	; () banked
  2211  0011A2  5DFA               	subwf	_hard_speed_timer& (0+255),w,b
  2212  0011A4  B0D8               	btfsc	status,0,c
  2213  0011A6                     u3431:
  2214  0011A6  0012               	return	
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 206: current_state = CHANGE_SPEED;
  2218  0011A8  0E06               	movlw	6
  2219  0011AA  0100               	movlb	0	; () banked
  2220  0011AC  6FD8               	movwf	_current_state& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;main.c: 207: }
  2224                           ;main.c: 208: }
  2225                           
  2226                           ; BSR set to: 0
  2227  0011AE  0012               	return	
  2228  0011B0                     l185:
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;main.c: 209: else if (PORTAbits.RA4 == 0) {
  2232  0011B0  B880               	btfsc	3968,4,c	;volatile
  2233  0011B2  D00C               	goto	l3182
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 210: if (hard_speed_timer <= 5) {
  2237  0011B4  0100               	movlb	0	; () banked
  2238  0011B6  51FB               	movf	(_hard_speed_timer+1)& (0+255),w,b
  2239  0011B8  E104               	bnz	u3451
  2240  0011BA  0E06               	movlw	6
  2241  0011BC  0100               	movlb	0	; () banked
  2242  0011BE  5DFA               	subwf	_hard_speed_timer& (0+255),w,b
  2243  0011C0  B0D8               	btfsc	status,0,c
  2244  0011C2                     u3451:
  2245  0011C2  0012               	return	
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;main.c: 211: current_state = CHANGE_SPEED;
  2249  0011C4  0E06               	movlw	6
  2250  0011C6  0100               	movlb	0	; () banked
  2251  0011C8  6FD8               	movwf	_current_state& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;main.c: 212: }
  2255                           ;main.c: 213: }
  2256  0011CA  0012               	return	
  2257  0011CC                     l3182:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;main.c: 214: else {
  2261                           ;main.c: 215: current_state = RELEASE;
  2262  0011CC  0E04               	movlw	4
  2263  0011CE  0100               	movlb	0	; () banked
  2264  0011D0  6FD8               	movwf	_current_state& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main.c: 216: }
  2268                           ;main.c: 220: break;
  2269                           
  2270                           ; BSR set to: 0
  2271  0011D2  0012               	return	
  2272  0011D4                     l3184:
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 225: was_released = 1;
  2276  0011D4  0E01               	movlw	1
  2277  0011D6  0100               	movlb	0	; () banked
  2278  0011D8  6FDB               	movwf	_was_released& (0+255),b
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 227: if (PORTBbits.RB0 == 1)
  2282  0011DA  A081               	btfss	3969,0,c	;volatile
  2283  0011DC  D004               	goto	l3190
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;main.c: 228: current_state = MOVE_EASY;
  2287  0011DE  0E02               	movlw	2
  2288  0011E0  0100               	movlb	0	; () banked
  2289  0011E2  6FD8               	movwf	_current_state& (0+255),b
  2290  0011E4  0012               	return	
  2291  0011E6                     l3190:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 229: else
  2295                           ;main.c: 230: current_state = MOVE_HARD;
  2296  0011E6  0E03               	movlw	3
  2297  0011E8  0100               	movlb	0	; () banked
  2298  0011EA  6FD8               	movwf	_current_state& (0+255),b
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;main.c: 231: break;
  2302  0011EC  0012               	return	
  2303  0011EE                     l3192:
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;main.c: 235: LEDs[target] = 1;
  2307  0011EE  0100               	movlb	0	; () banked
  2308  0011F0  51DA               	movf	_target& (0+255),w,b
  2309  0011F2  0D01               	mullw	1
  2310  0011F4  0EC0               	movlw	low _LEDs
  2311  0011F6  24F3               	addwf	prodl,w,c
  2312  0011F8  6ED9               	movwf	fsr2l,c
  2313  0011FA  0E00               	movlw	high _LEDs
  2314  0011FC  20F4               	addwfc	prodh,w,c
  2315  0011FE  6EDA               	movwf	fsr2h,c
  2316  001200  0E01               	movlw	1
  2317  001202  6EDF               	movwf	indf2,c
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;main.c: 236: char i = 0;
  2321  001204  0E00               	movlw	0
  2322  001206  0101               	movlb	1	; () banked
  2323  001208  6FF1               	movwf	fsm@i& (0+255),b
  2324                           
  2325                           ; BSR set to: 1
  2326                           ;main.c: 237: for (i = 0; i <= 15; i++) {
  2327  00120A  0E00               	movlw	0
  2328  00120C  0101               	movlb	1	; () banked
  2329  00120E  6FF1               	movwf	fsm@i& (0+255),b
  2330  001210                     l3198:
  2331                           
  2332                           ; BSR set to: 1
  2333  001210  0E0F               	movlw	15
  2334  001212  0101               	movlb	1	; () banked
  2335  001214  65F1               	cpfsgt	fsm@i& (0+255),b
  2336  001216  D001               	goto	l3202
  2337  001218  D017               	goto	l3214
  2338  00121A                     l3202:
  2339                           
  2340                           ; BSR set to: 1
  2341                           ;main.c: 238: if (LEDs[i] == 0) {
  2342  00121A  0101               	movlb	1	; () banked
  2343  00121C  51F1               	movf	fsm@i& (0+255),w,b
  2344  00121E  0D01               	mullw	1
  2345  001220  0EC0               	movlw	low _LEDs
  2346  001222  24F3               	addwf	prodl,w,c
  2347  001224  6ED9               	movwf	fsr2l,c
  2348  001226  0E00               	movlw	high _LEDs
  2349  001228  20F4               	addwfc	prodh,w,c
  2350  00122A  6EDA               	movwf	fsr2h,c
  2351  00122C  50DF               	movf	indf2,w,c
  2352  00122E  A4D8               	btfss	status,2,c
  2353  001230  D008               	goto	l3210
  2354                           
  2355                           ; BSR set to: 1
  2356                           ;main.c: 239: if (PORTBbits.RB0 == 1)
  2357  001232  A081               	btfss	3969,0,c	;volatile
  2358  001234  D002               	goto	l3208
  2359                           
  2360                           ; BSR set to: 1
  2361                           ;main.c: 240: current_state = MOVE_EASY;
  2362  001236  0E02               	movlw	2
  2363  001238  D001               	goto	L1
  2364  00123A                     l3208:
  2365                           
  2366                           ;main.c: 241: else
  2367                           ;main.c: 242: current_state = MOVE_HARD;
  2368  00123A  0E03               	movlw	3
  2369  00123C                     L1:
  2370  00123C  0100               	movlb	0	; () banked
  2371  00123E  6FD8               	movwf	_current_state& (0+255),b
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 243: break;
  2375  001240  D003               	goto	l3214
  2376  001242                     l3210:
  2377  001242  0101               	movlb	1	; () banked
  2378  001244  2BF1               	incf	fsm@i& (0+255),f,b
  2379  001246  D7E4               	goto	l3198
  2380  001248                     l3214:
  2381                           
  2382                           ;main.c: 244: }
  2383                           ;main.c: 245: }
  2384                           ;main.c: 246: if (i == 16)
  2385  001248  0E10               	movlw	16
  2386  00124A  0101               	movlb	1	; () banked
  2387  00124C  19F1               	xorwf	fsm@i& (0+255),w,b
  2388  00124E  A4D8               	btfss	status,2,c
  2389  001250  0012               	return	
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;main.c: 247: current_state = GAME_WON;
  2393  001252  0E08               	movlw	8
  2394  001254  0100               	movlb	0	; () banked
  2395  001256  6FD8               	movwf	_current_state& (0+255),b
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;main.c: 248: break;
  2399  001258  0012               	return	
  2400  00125A                     l3218:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;main.c: 252: if (rand()%2 >= 1)
  2404  00125A  EC14  F013         	call	_rand	;wreg free
  2405  00125E  0E01               	movlw	1
  2406  001260  161B               	andwf	?_rand,f,c
  2407  001262  0E00               	movlw	0
  2408  001264  161C               	andwf	?_rand+1,f,c
  2409  001266  BE1C               	btfsc	?_rand+1,7,c
  2410  001268  D00B               	goto	l204
  2411  00126A  501C               	movf	?_rand+1,w,c
  2412  00126C  E103               	bnz	u3520
  2413  00126E  041B               	decf	?_rand,w,c
  2414  001270  A0D8               	btfss	status,0,c
  2415  001272  D006               	goto	l204
  2416  001274                     u3520:
  2417                           
  2418                           ;main.c: 253: stepper_direction = 1;
  2419  001274  0E00               	movlw	0
  2420  001276  0100               	movlb	0	; () banked
  2421  001278  6FFD               	movwf	(_stepper_direction+1)& (0+255),b
  2422  00127A  0E01               	movlw	1
  2423  00127C  6FFC               	movwf	_stepper_direction& (0+255),b
  2424  00127E  D003               	goto	l3222
  2425  001280                     l204:
  2426                           
  2427                           ;main.c: 254: else
  2428                           ;main.c: 255: stepper_direction = -1;
  2429  001280  0100               	movlb	0	; () banked
  2430  001282  69FC               	setf	_stepper_direction& (0+255),b
  2431  001284  69FD               	setf	(_stepper_direction+1)& (0+255),b
  2432  001286                     l3222:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;main.c: 257: hard_speed_timer = (int)(rand()%1000+100);
  2436  001286  EC14  F013         	call	_rand	;wreg free
  2437  00128A  C01B  F01D         	movff	?_rand,___awmod@dividend
  2438  00128E  C01C  F01E         	movff	?_rand+1,___awmod@dividend+1
  2439  001292  0E03               	movlw	3
  2440  001294  6E20               	movwf	___awmod@divisor+1,c
  2441  001296  0EE8               	movlw	232
  2442  001298  6E1F               	movwf	___awmod@divisor,c
  2443  00129A  ECF7  F011         	call	___awmod	;wreg free
  2444  00129E  0E64               	movlw	100
  2445  0012A0  241D               	addwf	?___awmod,w,c
  2446  0012A2  0100               	movlb	0	; () banked
  2447  0012A4  6FFA               	movwf	_hard_speed_timer& (0+255),b
  2448  0012A6  0E00               	movlw	0
  2449  0012A8  201E               	addwfc	?___awmod+1,w,c
  2450  0012AA  0100               	movlb	0	; () banked
  2451  0012AC  6FFB               	movwf	(_hard_speed_timer+1)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;main.c: 258: hard_speed = 0.7+10*(rand()%100)/100.0;
  2455  0012AE  0E00               	movlw	0
  2456  0012B0  6E30               	movwf	___ftdiv@f2,c
  2457  0012B2  0EC8               	movlw	200
  2458  0012B4  6E31               	movwf	___ftdiv@f2+1,c
  2459  0012B6  0E42               	movlw	66
  2460  0012B8  6E32               	movwf	___ftdiv@f2+2,c
  2461  0012BA  0E00               	movlw	0
  2462  0012BC  6E20               	movwf	___awmod@divisor+1,c
  2463  0012BE  0E64               	movlw	100
  2464  0012C0  6E1F               	movwf	___awmod@divisor,c
  2465  0012C2  EC14  F013         	call	_rand	;wreg free
  2466  0012C6  C01B  F01D         	movff	?_rand,___awmod@dividend
  2467  0012CA  C01C  F01E         	movff	?_rand+1,___awmod@dividend+1
  2468  0012CE  ECF7  F011         	call	___awmod	;wreg free
  2469  0012D2  C01D  F023         	movff	?___awmod,___wmul@multiplier
  2470  0012D6  C01E  F024         	movff	?___awmod+1,___wmul@multiplier+1
  2471  0012DA  0E00               	movlw	0
  2472  0012DC  6E26               	movwf	___wmul@multiplicand+1,c
  2473  0012DE  0E0A               	movlw	10
  2474  0012E0  6E25               	movwf	___wmul@multiplicand,c
  2475  0012E2  ECD0  F013         	call	___wmul	;wreg free
  2476  0012E6  C023  F029         	movff	?___wmul,___awtoft@c
  2477  0012EA  C024  F02A         	movff	?___wmul+1,___awtoft@c+1
  2478  0012EE  EC5E  F013         	call	___awtoft	;wreg free
  2479  0012F2  C029  F02D         	movff	?___awtoft,___ftdiv@f1
  2480  0012F6  C02A  F02E         	movff	?___awtoft+1,___ftdiv@f1+1
  2481  0012FA  C02B  F02F         	movff	?___awtoft+2,___ftdiv@f1+2
  2482  0012FE  EC4F  F00E         	call	___ftdiv	;wreg free
  2483  001302  C02D  F03C         	movff	?___ftdiv,___ftadd@f1
  2484  001306  C02E  F03D         	movff	?___ftdiv+1,___ftadd@f1+1
  2485  00130A  C02F  F03E         	movff	?___ftdiv+2,___ftadd@f1+2
  2486  00130E  0E33               	movlw	51
  2487  001310  6E3F               	movwf	___ftadd@f2,c
  2488  001312  0E33               	movlw	51
  2489  001314  6E40               	movwf	___ftadd@f2+1,c
  2490  001316  0E3F               	movlw	63
  2491  001318  6E41               	movwf	___ftadd@f2+2,c
  2492  00131A  ECFA  F00A         	call	___ftadd	;wreg free
  2493  00131E  C03C  F0F4         	movff	?___ftadd,_hard_speed
  2494  001322  C03D  F0F5         	movff	?___ftadd+1,_hard_speed+1
  2495  001326  C03E  F0F6         	movff	?___ftadd+2,_hard_speed+2
  2496                           
  2497                           ;main.c: 260: current_state = MOVE_HARD;
  2498  00132A  0E03               	movlw	3
  2499  00132C  0100               	movlb	0	; () banked
  2500  00132E  6FD8               	movwf	_current_state& (0+255),b
  2501                           
  2502                           ;main.c: 261: break;
  2503  001330  0012               	return	
  2504  001332                     l3228:
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 264: was_released = 0;
  2508  001332  0E00               	movlw	0
  2509  001334  0100               	movlb	0	; () banked
  2510  001336  6FDB               	movwf	_was_released& (0+255),b
  2511                           
  2512                           ;main.c: 267: for (char i = 0;i<=16;i++) {
  2513  001338  0E00               	movlw	0
  2514  00133A  0101               	movlb	1	; () banked
  2515  00133C  6FF2               	movwf	fsm@i_978& (0+255),b
  2516  00133E                     l3230:
  2517                           
  2518                           ; BSR set to: 1
  2519  00133E  0E10               	movlw	16
  2520  001340  0101               	movlb	1	; () banked
  2521  001342  65F2               	cpfsgt	fsm@i_978& (0+255),b
  2522  001344  D001               	goto	l3234
  2523  001346  D0AC               	goto	l3244
  2524  001348                     l3234:
  2525                           
  2526                           ; BSR set to: 1
  2527                           ;main.c: 268: if ((float)position >= ((i-1)*steps_per_led+steps_per_led/2) && (float)pos
      +                          ition <= (i*steps_per_led+steps_per_led/2+1)) {
  2528  001348  C0D4  F029         	movff	_position,___awtoft@c
  2529  00134C  C0D5  F02A         	movff	_position+1,___awtoft@c+1
  2530  001350  EC5E  F013         	call	___awtoft	;wreg free
  2531  001354  C029  F0DC         	movff	?___awtoft,___ftge@ff1
  2532  001358  C02A  F0DD         	movff	?___awtoft+1,___ftge@ff1+1
  2533  00135C  C02B  F0DE         	movff	?___awtoft+2,___ftge@ff1+2
  2534  001360  0E00               	movlw	0
  2535  001362  6E30               	movwf	___ftdiv@f2,c
  2536  001364  0E00               	movlw	0
  2537  001366  6E31               	movwf	___ftdiv@f2+1,c
  2538  001368  0E40               	movlw	64
  2539  00136A  6E32               	movwf	___ftdiv@f2+2,c
  2540  00136C  C0F7  F02D         	movff	_steps_per_led,___ftdiv@f1
  2541  001370  C0F8  F02E         	movff	_steps_per_led+1,___ftdiv@f1+1
  2542  001374  C0F9  F02F         	movff	_steps_per_led+2,___ftdiv@f1+2
  2543  001378  EC4F  F00E         	call	___ftdiv	;wreg free
  2544  00137C  C02D  F03F         	movff	?___ftdiv,___ftadd@f2
  2545  001380  C02E  F040         	movff	?___ftdiv+1,___ftadd@f2+1
  2546  001384  C02F  F041         	movff	?___ftdiv+2,___ftadd@f2+2
  2547  001388  C0F7  F030         	movff	_steps_per_led,___ftmul@f2
  2548  00138C  C0F8  F031         	movff	_steps_per_led+1,___ftmul@f2+1
  2549  001390  C0F9  F032         	movff	_steps_per_led+2,___ftmul@f2+2
  2550  001394  0EFF               	movlw	255
  2551  001396  0101               	movlb	1	; () banked
  2552  001398  25F2               	addwf	fsm@i_978& (0+255),w,b
  2553  00139A  6E29               	movwf	___awtoft@c,c
  2554  00139C  6A2A               	clrf	___awtoft@c+1,c
  2555  00139E  0EFF               	movlw	255
  2556  0013A0  222A               	addwfc	___awtoft@c+1,f,c
  2557  0013A2  EC5E  F013         	call	___awtoft	;wreg free
  2558  0013A6  C029  F02D         	movff	?___awtoft,___ftmul@f1
  2559  0013AA  C02A  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  2560  0013AE  C02B  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  2561  0013B2  ECE7  F00C         	call	___ftmul	;wreg free
  2562  0013B6  C02D  F03C         	movff	?___ftmul,___ftadd@f1
  2563  0013BA  C02E  F03D         	movff	?___ftmul+1,___ftadd@f1+1
  2564  0013BE  C02F  F03E         	movff	?___ftmul+2,___ftadd@f1+2
  2565  0013C2  ECFA  F00A         	call	___ftadd	;wreg free
  2566  0013C6  C03C  F0DF         	movff	?___ftadd,___ftge@ff2
  2567  0013CA  C03D  F0E0         	movff	?___ftadd+1,___ftge@ff2+1
  2568  0013CE  C03E  F0E1         	movff	?___ftadd+2,___ftge@ff2+2
  2569  0013D2  EC8A  F00F         	call	___ftge	;wreg free
  2570  0013D6  0100               	movlb	0	; () banked
  2571  0013D8  A0D8               	btfss	status,0,c
  2572  0013DA  D05F               	goto	l3240
  2573                           
  2574                           ; BSR set to: 0
  2575  0013DC  0E00               	movlw	0
  2576  0013DE  6E30               	movwf	___ftdiv@f2,c
  2577  0013E0  0E00               	movlw	0
  2578  0013E2  6E31               	movwf	___ftdiv@f2+1,c
  2579  0013E4  0E40               	movlw	64
  2580  0013E6  6E32               	movwf	___ftdiv@f2+2,c
  2581  0013E8  C0F7  F02D         	movff	_steps_per_led,___ftdiv@f1
  2582  0013EC  C0F8  F02E         	movff	_steps_per_led+1,___ftdiv@f1+1
  2583  0013F0  C0F9  F02F         	movff	_steps_per_led+2,___ftdiv@f1+2
  2584  0013F4  EC4F  F00E         	call	___ftdiv	;wreg free
  2585  0013F8  C02D  F03F         	movff	?___ftdiv,___ftadd@f2
  2586  0013FC  C02E  F040         	movff	?___ftdiv+1,___ftadd@f2+1
  2587  001400  C02F  F041         	movff	?___ftdiv+2,___ftadd@f2+2
  2588  001404  C0F7  F030         	movff	_steps_per_led,___ftmul@f2
  2589  001408  C0F8  F031         	movff	_steps_per_led+1,___ftmul@f2+1
  2590  00140C  C0F9  F032         	movff	_steps_per_led+2,___ftmul@f2+2
  2591  001410  0101               	movlb	1	; () banked
  2592  001412  51F2               	movf	fsm@i_978& (0+255),w,b
  2593  001414  ECF5  F013         	call	___lbtoft
  2594  001418  C017  F02D         	movff	?___lbtoft,___ftmul@f1
  2595  00141C  C018  F02E         	movff	?___lbtoft+1,___ftmul@f1+1
  2596  001420  C019  F02F         	movff	?___lbtoft+2,___ftmul@f1+2
  2597  001424  ECE7  F00C         	call	___ftmul	;wreg free
  2598  001428  C02D  F03C         	movff	?___ftmul,___ftadd@f1
  2599  00142C  C02E  F03D         	movff	?___ftmul+1,___ftadd@f1+1
  2600  001430  C02F  F03E         	movff	?___ftmul+2,___ftadd@f1+2
  2601  001434  ECFA  F00A         	call	___ftadd	;wreg free
  2602  001438  C03C  F1EE         	movff	?___ftadd,_fsm$1630
  2603  00143C  C03D  F1EF         	movff	?___ftadd+1,_fsm$1630+1
  2604  001440  C03E  F1F0         	movff	?___ftadd+2,_fsm$1630+2
  2605  001444  0E00               	movlw	0
  2606  001446  6E3F               	movwf	___ftadd@f2,c
  2607  001448  0E80               	movlw	128
  2608  00144A  6E40               	movwf	___ftadd@f2+1,c
  2609  00144C  0E3F               	movlw	63
  2610  00144E  6E41               	movwf	___ftadd@f2+2,c
  2611  001450  C1EE  F03C         	movff	_fsm$1630,___ftadd@f1
  2612  001454  C1EF  F03D         	movff	_fsm$1630+1,___ftadd@f1+1
  2613  001458  C1F0  F03E         	movff	_fsm$1630+2,___ftadd@f1+2
  2614  00145C  ECFA  F00A         	call	___ftadd	;wreg free
  2615  001460  C03C  F0DC         	movff	?___ftadd,___ftge@ff1
  2616  001464  C03D  F0DD         	movff	?___ftadd+1,___ftge@ff1+1
  2617  001468  C03E  F0DE         	movff	?___ftadd+2,___ftge@ff1+2
  2618  00146C  C0D4  F029         	movff	_position,___awtoft@c
  2619  001470  C0D5  F02A         	movff	_position+1,___awtoft@c+1
  2620  001474  EC5E  F013         	call	___awtoft	;wreg free
  2621  001478  C029  F0DF         	movff	?___awtoft,___ftge@ff2
  2622  00147C  C02A  F0E0         	movff	?___awtoft+1,___ftge@ff2+1
  2623  001480  C02B  F0E1         	movff	?___awtoft+2,___ftge@ff2+2
  2624  001484  EC8A  F00F         	call	___ftge	;wreg free
  2625  001488  0100               	movlb	0	; () banked
  2626  00148A  A0D8               	btfss	status,0,c
  2627  00148C  D006               	goto	l3240
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 269: target = i%16;
  2631  00148E  0101               	movlb	1	; () banked
  2632  001490  51F2               	movf	fsm@i_978& (0+255),w,b
  2633  001492  0B0F               	andlw	15
  2634  001494  0100               	movlb	0	; () banked
  2635  001496  6FDA               	movwf	_target& (0+255),b
  2636                           
  2637                           ;main.c: 270: break;
  2638  001498  D003               	goto	l3244
  2639  00149A                     l3240:
  2640                           
  2641                           ; BSR set to: 0
  2642  00149A  0101               	movlb	1	; () banked
  2643  00149C  2BF2               	incf	fsm@i_978& (0+255),f,b
  2644  00149E  D74F               	goto	l3230
  2645  0014A0                     l3244:
  2646                           
  2647                           ;main.c: 271: }
  2648                           ;main.c: 272: }
  2649                           ;main.c: 273: if (LEDs[target] == 0) {
  2650  0014A0  0100               	movlb	0	; () banked
  2651  0014A2  51DA               	movf	_target& (0+255),w,b
  2652  0014A4  0D01               	mullw	1
  2653  0014A6  0EC0               	movlw	low _LEDs
  2654  0014A8  24F3               	addwf	prodl,w,c
  2655  0014AA  6ED9               	movwf	fsr2l,c
  2656  0014AC  0E00               	movlw	high _LEDs
  2657  0014AE  20F4               	addwfc	prodh,w,c
  2658  0014B0  6EDA               	movwf	fsr2h,c
  2659  0014B2  50DF               	movf	indf2,w,c
  2660  0014B4  A4D8               	btfss	status,2,c
  2661  0014B6  D004               	goto	l3248
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 274: current_state = LIGHT_UP;
  2665  0014B8  0E07               	movlw	7
  2666  0014BA  0100               	movlb	0	; () banked
  2667  0014BC  6FD8               	movwf	_current_state& (0+255),b
  2668                           
  2669                           ;main.c: 275: }
  2670  0014BE  0012               	return	
  2671  0014C0                     l3248:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;main.c: 276: else current_state = GAME_LOST;
  2675  0014C0  0E09               	movlw	9
  2676  0014C2  0100               	movlb	0	; () banked
  2677  0014C4  6FD8               	movwf	_current_state& (0+255),b
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 278: break;
  2681  0014C6  0012               	return	
  2682  0014C8                     l3250:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 282: setAllLeds(0);
  2686  0014C8  0E00               	movlw	0
  2687  0014CA  ECBD  F013         	call	_setAllLeds
  2688                           
  2689                           ;main.c: 283: LATAbits.LATA2 = 0;
  2690  0014CE  9489               	bcf	3977,2,c	;volatile
  2691                           
  2692                           ;main.c: 285: buzz(800,100);
  2693  0014D0  0E20               	movlw	32
  2694  0014D2  0100               	movlb	0	; () banked
  2695  0014D4  6FE0               	movwf	buzz@freq& (0+255),b
  2696  0014D6  0E03               	movlw	3
  2697  0014D8  6FE1               	movwf	(buzz@freq+1)& (0+255),b
  2698  0014DA  0E00               	movlw	0
  2699  0014DC  6FE2               	movwf	(buzz@freq+2)& (0+255),b
  2700  0014DE  0E00               	movlw	0
  2701  0014E0  6FE3               	movwf	(buzz@freq+3)& (0+255),b
  2702  0014E2  0E00               	movlw	0
  2703  0014E4  0100               	movlb	0	; () banked
  2704  0014E6  6FE5               	movwf	(buzz@duration+1)& (0+255),b
  2705  0014E8  0E64               	movlw	100
  2706  0014EA  6FE4               	movwf	buzz@duration& (0+255),b
  2707  0014EC  ECD0  F00B         	call	_buzz	;wreg free
  2708                           
  2709                           ;main.c: 286: buzz(500,100);
  2710  0014F0  0EF4               	movlw	244
  2711  0014F2  0100               	movlb	0	; () banked
  2712  0014F4  6FE0               	movwf	buzz@freq& (0+255),b
  2713  0014F6  0E01               	movlw	1
  2714  0014F8  6FE1               	movwf	(buzz@freq+1)& (0+255),b
  2715  0014FA  0E00               	movlw	0
  2716  0014FC  6FE2               	movwf	(buzz@freq+2)& (0+255),b
  2717  0014FE  0E00               	movlw	0
  2718  001500  6FE3               	movwf	(buzz@freq+3)& (0+255),b
  2719  001502  0E00               	movlw	0
  2720  001504  0100               	movlb	0	; () banked
  2721  001506  6FE5               	movwf	(buzz@duration+1)& (0+255),b
  2722  001508  0E64               	movlw	100
  2723  00150A  6FE4               	movwf	buzz@duration& (0+255),b
  2724  00150C  ECD0  F00B         	call	_buzz	;wreg free
  2725                           
  2726                           ;main.c: 287: buzz(300,100);
  2727  001510  0E2C               	movlw	44
  2728  001512  0100               	movlb	0	; () banked
  2729  001514  6FE0               	movwf	buzz@freq& (0+255),b
  2730  001516  0E01               	movlw	1
  2731  001518  6FE1               	movwf	(buzz@freq+1)& (0+255),b
  2732  00151A  0E00               	movlw	0
  2733  00151C  6FE2               	movwf	(buzz@freq+2)& (0+255),b
  2734  00151E  0E00               	movlw	0
  2735  001520  6FE3               	movwf	(buzz@freq+3)& (0+255),b
  2736  001522  0E00               	movlw	0
  2737  001524  0100               	movlb	0	; () banked
  2738  001526  6FE5               	movwf	(buzz@duration+1)& (0+255),b
  2739  001528  0E64               	movlw	100
  2740  00152A  6FE4               	movwf	buzz@duration& (0+255),b
  2741  00152C  ECD0  F00B         	call	_buzz	;wreg free
  2742                           
  2743                           ;main.c: 288: buzz(100,400);
  2744  001530  0E64               	movlw	100
  2745  001532  0100               	movlb	0	; () banked
  2746  001534  6FE0               	movwf	buzz@freq& (0+255),b
  2747  001536  0E00               	movlw	0
  2748  001538  6FE1               	movwf	(buzz@freq+1)& (0+255),b
  2749  00153A  0E00               	movlw	0
  2750  00153C  6FE2               	movwf	(buzz@freq+2)& (0+255),b
  2751  00153E  0E00               	movlw	0
  2752  001540  6FE3               	movwf	(buzz@freq+3)& (0+255),b
  2753  001542  0E01               	movlw	1
  2754  001544  0100               	movlb	0	; () banked
  2755  001546  6FE5               	movwf	(buzz@duration+1)& (0+255),b
  2756  001548  0E90               	movlw	144
  2757  00154A  6FE4               	movwf	buzz@duration& (0+255),b
  2758  00154C  ECD0  F00B         	call	_buzz	;wreg free
  2759                           
  2760                           ;main.c: 290: note_new = 0;
  2761  001550  0E00               	movlw	0
  2762  001552  0100               	movlb	0	; () banked
  2763  001554  6FD1               	movwf	(_note_new+1)& (0+255),b
  2764  001556  0E00               	movlw	0
  2765  001558  6FD0               	movwf	_note_new& (0+255),b
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 292: current_state = NEW_GAME;
  2769  00155A  0E01               	movlw	1
  2770  00155C  0100               	movlb	0	; () banked
  2771  00155E  6FD8               	movwf	_current_state& (0+255),b
  2772                           
  2773                           ;main.c: 293: break;
  2774  001560  0012               	return	
  2775  001562                     l3266:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;main.c: 296: note_new = 0;
  2779  001562  0E00               	movlw	0
  2780  001564  0100               	movlb	0	; () banked
  2781  001566  6FD1               	movwf	(_note_new+1)& (0+255),b
  2782  001568  0E00               	movlw	0
  2783  00156A  6FD0               	movwf	_note_new& (0+255),b
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;main.c: 297: superMario(note_win);
  2787  00156C  C0D2  F0F2         	movff	_note_win,superMario@index
  2788  001570  C0D3  F0F3         	movff	_note_win+1,superMario@index+1
  2789  001574  EC37  F011         	call	_superMario	;wreg free
  2790                           
  2791                           ;main.c: 298: note_win++;
  2792  001578  0100               	movlb	0	; () banked
  2793  00157A  4BD2               	infsnz	_note_win& (0+255),f,b
  2794  00157C  2BD3               	incf	(_note_win+1)& (0+255),f,b
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;main.c: 299: LATAbits.LATA1 = 0;
  2798  00157E  9289               	bcf	3977,1,c	;volatile
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 300: LATAbits.LATA2 = 0;
  2802  001580  9489               	bcf	3977,2,c	;volatile
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;main.c: 303: if (note_win == last_win_note) {
  2806  001582  0E1D               	movlw	low _last_win_note
  2807  001584  6EF6               	movwf	tblptrl,c
  2808  001586                     	if	1	;There is more than 1 active tblptr byte
  2809  001586  0E10               	movlw	high _last_win_note
  2810  001588  6EF7               	movwf	tblptrh,c
  2811  00158A                     	endif
  2812  00158A                     	if	0	;There are less than 3 active tblptr bytes
  2813  00158A                     	endif
  2814  00158A  0009               	tblrd		*+
  2815  00158C  50F5               	movf	tablat,w,c
  2816  00158E  0100               	movlb	0	; () banked
  2817  001590  19D2               	xorwf	_note_win& (0+255),w,b
  2818  001592  E12F               	bnz	l216
  2819  001594  0009               	tblrd		*+
  2820  001596  50F5               	movf	tablat,w,c
  2821  001598  0100               	movlb	0	; () banked
  2822  00159A  19D3               	xorwf	(_note_win+1)& (0+255),w,b
  2823  00159C  A4D8               	btfss	status,2,c
  2824  00159E  0012               	return	
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 304: current_state = NEW_GAME;
  2828  0015A0  0E01               	movlw	1
  2829  0015A2  0100               	movlb	0	; () banked
  2830  0015A4  6FD8               	movwf	_current_state& (0+255),b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 305: }
  2834                           ;main.c: 306: break;
  2835  0015A6  0012               	return	
  2836  0015A8                     l3280:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;main.c: 309: current_state = CALIBRATION;
  2840  0015A8  0E00               	movlw	0
  2841  0015AA  0100               	movlb	0	; () banked
  2842  0015AC  6FD8               	movwf	_current_state& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;main.c: 312: };
  2846                           
  2847                           ;main.c: 310: break;
  2848  0015AE  0012               	return	
  2849  0015B0                     l3284:
  2850  0015B0  0100               	movlb	0	; () banked
  2851  0015B2  51D8               	movf	_current_state& (0+255),w,b
  2852                           
  2853                           ; Switch size 1, requested type "space"
  2854                           ; Number of cases is 10, Range of values is 0 to 9
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte           31    16 (average)
  2858                           ;	Chosen strategy is simple_byte
  2859  0015B4  0A00               	xorlw	0	; case 0
  2860  0015B6  B4D8               	btfsc	status,2,c
  2861  0015B8  D535               	goto	l3100
  2862  0015BA  0A01               	xorlw	1	; case 1
  2863  0015BC  B4D8               	btfsc	status,2,c
  2864  0015BE  D55B               	goto	l173
  2865  0015C0  0A03               	xorlw	3	; case 2
  2866  0015C2  B4D8               	btfsc	status,2,c
  2867  0015C4  D5AB               	goto	l3144
  2868  0015C6  0A01               	xorlw	1	; case 3
  2869  0015C8  B4D8               	btfsc	status,2,c
  2870  0015CA  D5CB               	goto	l3160
  2871  0015CC  0A07               	xorlw	7	; case 4
  2872  0015CE  B4D8               	btfsc	status,2,c
  2873  0015D0  D601               	goto	l3184
  2874  0015D2  0A01               	xorlw	1	; case 5
  2875  0015D4  B4D8               	btfsc	status,2,c
  2876  0015D6  D6AD               	goto	l3228
  2877  0015D8  0A03               	xorlw	3	; case 6
  2878  0015DA  B4D8               	btfsc	status,2,c
  2879  0015DC  D63E               	goto	l3218
  2880  0015DE  0A01               	xorlw	1	; case 7
  2881  0015E0  B4D8               	btfsc	status,2,c
  2882  0015E2  D605               	goto	l3192
  2883  0015E4  0A0F               	xorlw	15	; case 8
  2884  0015E6  B4D8               	btfsc	status,2,c
  2885  0015E8  D7BC               	goto	l3266
  2886  0015EA  0A01               	xorlw	1	; case 9
  2887  0015EC  B4D8               	btfsc	status,2,c
  2888  0015EE  D76C               	goto	l3250
  2889  0015F0  D7DB               	goto	l3280
  2890  0015F2                     l216:
  2891  0015F2  0012               	return		;funcret
  2892  0015F4                     __end_of_fsm:
  2893                           	opt stack 0
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           indf2	equ	0xFDF
  2906                           postinc2	equ	0xFDE
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function _superMario *****************
  2912 ;; Defined at:
  2913 ;;		line 90 in file "songs.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  index           2   22[BANK0 ] unsigned int 
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2927 ;;      Params:         0       2       0       0       0       0       0       0       0
  2928 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2929 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2930 ;;      Totals:         0       2       2       0       0       0       0       0       0
  2931 ;;Total ram usage:        4 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    4
  2934 ;; This function calls:
  2935 ;;		___lwdiv
  2936 ;;		_buzz
  2937 ;; This function is called by:
  2938 ;;		_fsm
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text8
  2943  00226E                     __ptext8:
  2944                           	opt stack 0
  2945  00226E                     _superMario:
  2946                           	opt stack 25
  2947                           
  2948                           ;songs.c: 91: buzz(superMarioNotes[index], 1000/superMarioDurations[index]);
  2949                           
  2950                           ;incstack = 0
  2951  00226E  90D8               	bcf	status,0,c
  2952  002270  0100               	movlb	0	; () banked
  2953  002272  35F2               	rlcf	superMario@index& (0+255),w,b
  2954  002274  6ED9               	movwf	fsr2l,c
  2955  002276  0100               	movlb	0	; () banked
  2956  002278  35F3               	rlcf	(superMario@index+1)& (0+255),w,b
  2957  00227A  6EDA               	movwf	fsr2h,c
  2958  00227C  0E8E               	movlw	low _superMarioNotes
  2959  00227E  26D9               	addwf	fsr2l,f,c
  2960  002280  0E01               	movlw	high _superMarioNotes
  2961  002282  22DA               	addwfc	fsr2h,f,c
  2962  002284  CFDE F1EC          	movff	postinc2,??_superMario
  2963  002288  CFDD F1ED          	movff	postdec2,??_superMario+1
  2964  00228C  C1EC  F0E0         	movff	??_superMario,buzz@freq
  2965  002290  C1ED  F0E1         	movff	??_superMario+1,buzz@freq+1
  2966  002294  0100               	movlb	0	; () banked
  2967  002296  6BE2               	clrf	(buzz@freq+2)& (0+255),b
  2968  002298  6BE3               	clrf	(buzz@freq+3)& (0+255),b
  2969  00229A  0E03               	movlw	3
  2970  00229C  6E10               	movwf	___lwdiv@dividend+1,c
  2971  00229E  0EE8               	movlw	232
  2972  0022A0  6E0F               	movwf	___lwdiv@dividend,c
  2973  0022A2  90D8               	bcf	status,0,c
  2974  0022A4  0100               	movlb	0	; () banked
  2975  0022A6  35F2               	rlcf	superMario@index& (0+255),w,b
  2976  0022A8  6ED9               	movwf	fsr2l,c
  2977  0022AA  0100               	movlb	0	; () banked
  2978  0022AC  35F3               	rlcf	(superMario@index+1)& (0+255),w,b
  2979  0022AE  6EDA               	movwf	fsr2h,c
  2980  0022B0  0E46               	movlw	low _superMarioDurations
  2981  0022B2  26D9               	addwf	fsr2l,f,c
  2982  0022B4  0E02               	movlw	high _superMarioDurations
  2983  0022B6  22DA               	addwfc	fsr2h,f,c
  2984  0022B8  CFDE F011          	movff	postinc2,___lwdiv@divisor
  2985  0022BC  CFDD F012          	movff	postdec2,___lwdiv@divisor+1
  2986  0022C0  ECEB  F012         	call	___lwdiv	;wreg free
  2987  0022C4  C00F  F0E4         	movff	?___lwdiv,buzz@duration
  2988  0022C8  C010  F0E5         	movff	?___lwdiv+1,buzz@duration+1
  2989  0022CC  ECD0  F00B         	call	_buzz	;wreg free
  2990                           
  2991                           ;songs.c: 92: buzz(0, 20);
  2992  0022D0  0E00               	movlw	0
  2993  0022D2  0100               	movlb	0	; () banked
  2994  0022D4  6FE0               	movwf	buzz@freq& (0+255),b
  2995  0022D6  0E00               	movlw	0
  2996  0022D8  6FE1               	movwf	(buzz@freq+1)& (0+255),b
  2997  0022DA  0E00               	movlw	0
  2998  0022DC  6FE2               	movwf	(buzz@freq+2)& (0+255),b
  2999  0022DE  0E00               	movlw	0
  3000  0022E0  6FE3               	movwf	(buzz@freq+3)& (0+255),b
  3001  0022E2  0E00               	movlw	0
  3002  0022E4  0100               	movlb	0	; () banked
  3003  0022E6  6FE5               	movwf	(buzz@duration+1)& (0+255),b
  3004  0022E8  0E14               	movlw	20
  3005  0022EA  6FE4               	movwf	buzz@duration& (0+255),b
  3006  0022EC  ECD0  F00B         	call	_buzz	;wreg free
  3007  0022F0  0012               	return		;funcret
  3008  0022F2                     __end_of_superMario:
  3009                           	opt stack 0
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           wreg	equ	0xFE8
  3019                           postdec1	equ	0xFE5
  3020                           fsr1l	equ	0xFE1
  3021                           indf2	equ	0xFDF
  3022                           postinc2	equ	0xFDE
  3023                           postdec2	equ	0xFDD
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function ___lwdiv *****************
  3029 ;; Defined at:
  3030 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwdiv.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  dividend        2   14[COMRAM] unsigned int 
  3033 ;;  divisor         2   16[COMRAM] unsigned int 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  quotient        2   19[COMRAM] unsigned int 
  3036 ;;  counter         1   18[COMRAM] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  2   14[COMRAM] unsigned int 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3046 ;;      Params:         4       0       0       0       0       0       0       0       0
  3047 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3049 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3050 ;;Total ram usage:        7 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    1
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_superMario
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text9
  3061  0025D6                     __ptext9:
  3062                           	opt stack 0
  3063  0025D6                     ___lwdiv:
  3064                           	opt stack 27
  3065                           
  3066                           ;incstack = 0
  3067  0025D6  0E00               	movlw	0
  3068  0025D8  6E15               	movwf	___lwdiv@quotient+1,c
  3069  0025DA  0E00               	movlw	0
  3070  0025DC  6E14               	movwf	___lwdiv@quotient,c
  3071  0025DE  5011               	movf	___lwdiv@divisor,w,c
  3072  0025E0  1012               	iorwf	___lwdiv@divisor+1,w,c
  3073  0025E2  B4D8               	btfsc	status,2,c
  3074  0025E4  D01C               	goto	l697
  3075  0025E6  0E01               	movlw	1
  3076  0025E8  6E13               	movwf	___lwdiv@counter,c
  3077  0025EA  D004               	goto	l2794
  3078  0025EC                     l2792:
  3079  0025EC  90D8               	bcf	status,0,c
  3080  0025EE  3611               	rlcf	___lwdiv@divisor,f,c
  3081  0025F0  3612               	rlcf	___lwdiv@divisor+1,f,c
  3082  0025F2  2A13               	incf	___lwdiv@counter,f,c
  3083  0025F4                     l2794:
  3084  0025F4  AE12               	btfss	___lwdiv@divisor+1,7,c
  3085  0025F6  D7FA               	goto	l2792
  3086  0025F8                     l2796:
  3087  0025F8  90D8               	bcf	status,0,c
  3088  0025FA  3614               	rlcf	___lwdiv@quotient,f,c
  3089  0025FC  3615               	rlcf	___lwdiv@quotient+1,f,c
  3090  0025FE  5011               	movf	___lwdiv@divisor,w,c
  3091  002600  5C0F               	subwf	___lwdiv@dividend,w,c
  3092  002602  5012               	movf	___lwdiv@divisor+1,w,c
  3093  002604  5810               	subwfb	___lwdiv@dividend+1,w,c
  3094  002606  A0D8               	btfss	status,0,c
  3095  002608  D005               	goto	l2804
  3096  00260A  5011               	movf	___lwdiv@divisor,w,c
  3097  00260C  5E0F               	subwf	___lwdiv@dividend,f,c
  3098  00260E  5012               	movf	___lwdiv@divisor+1,w,c
  3099  002610  5A10               	subwfb	___lwdiv@dividend+1,f,c
  3100  002612  8014               	bsf	___lwdiv@quotient,0,c
  3101  002614                     l2804:
  3102  002614  90D8               	bcf	status,0,c
  3103  002616  3212               	rrcf	___lwdiv@divisor+1,f,c
  3104  002618  3211               	rrcf	___lwdiv@divisor,f,c
  3105  00261A  2E13               	decfsz	___lwdiv@counter,f,c
  3106  00261C  D7ED               	goto	l2796
  3107  00261E                     l697:
  3108  00261E  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  3109  002622  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3110  002626  0012               	return		;funcret
  3111  002628                     __end_of___lwdiv:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           postinc0	equ	0xFEE
  3121                           wreg	equ	0xFE8
  3122                           postdec1	equ	0xFE5
  3123                           fsr1l	equ	0xFE1
  3124                           indf2	equ	0xFDF
  3125                           postinc2	equ	0xFDE
  3126                           postdec2	equ	0xFDD
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _stepper_pulse *****************
  3132 ;; Defined at:
  3133 ;;		line 316 in file "main.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  speed           3    4[BANK0 ] float 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3142 ;; Tracked objects:
  3143 ;;		On entry : 0/0
  3144 ;;		On exit  : 0/0
  3145 ;;		Unchanged: 0/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3147 ;;      Params:         0       3       0       0       0       0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3149 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3150 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3151 ;;Total ram usage:        5 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    3
  3154 ;; This function calls:
  3155 ;;		___ftdiv
  3156 ;;		___fttol
  3157 ;;		___lwmod
  3158 ;;		_myDelay_us
  3159 ;; This function is called by:
  3160 ;;		_fsm
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text10
  3165  001AC2                     __ptext10:
  3166                           	opt stack 0
  3167  001AC2                     _stepper_pulse:
  3168                           	opt stack 26
  3169                           
  3170                           ;main.c: 317: if (stepper_direction > 0)
  3171                           
  3172                           ;incstack = 0
  3173  001AC2  0100               	movlb	0	; () banked
  3174  001AC4  BFFD               	btfsc	(_stepper_direction+1)& (0+255),7,b
  3175  001AC6  D009               	goto	l219
  3176  001AC8  0100               	movlb	0	; () banked
  3177  001ACA  51FD               	movf	(_stepper_direction+1)& (0+255),w,b
  3178  001ACC  E104               	bnz	u2850
  3179  001ACE  0100               	movlb	0	; () banked
  3180  001AD0  05FC               	decf	_stepper_direction& (0+255),w,b
  3181  001AD2  A0D8               	btfss	status,0,c
  3182  001AD4  D002               	goto	l219
  3183  001AD6                     u2850:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;main.c: 318: LATCbits.LATC7 = 0;
  3187  001AD6  9E8B               	bcf	3979,7,c	;volatile
  3188  001AD8  D001               	goto	l220
  3189  001ADA                     l219:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 319: else
  3193                           ;main.c: 320: LATCbits.LATC7 = 1;
  3194  001ADA  8E8B               	bsf	3979,7,c	;volatile
  3195  001ADC                     l220:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 322: LATCbits.LATC6 = 1;
  3199  001ADC  8C8B               	bsf	3979,6,c	;volatile
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;main.c: 323: myDelay_us((int)(75/speed));
  3203  001ADE  C0E0  F030         	movff	stepper_pulse@speed,___ftdiv@f2
  3204  001AE2  C0E1  F031         	movff	stepper_pulse@speed+1,___ftdiv@f2+1
  3205  001AE6  C0E2  F032         	movff	stepper_pulse@speed+2,___ftdiv@f2+2
  3206  001AEA  0E00               	movlw	0
  3207  001AEC  6E2D               	movwf	___ftdiv@f1,c
  3208  001AEE  0E96               	movlw	150
  3209  001AF0  6E2E               	movwf	___ftdiv@f1+1,c
  3210  001AF2  0E42               	movlw	66
  3211  001AF4  6E2F               	movwf	___ftdiv@f1+2,c
  3212  001AF6  EC4F  F00E         	call	___ftdiv	;wreg free
  3213  001AFA  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  3214  001AFE  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  3215  001B02  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  3216  001B06  EC6D  F00C         	call	___fttol	;wreg free
  3217  001B0A  C03C  F0DC         	movff	?___fttol,myDelay_us@us
  3218  001B0E  C03D  F0DD         	movff	?___fttol+1,myDelay_us@us+1
  3219  001B12  EC7A  F013         	call	_myDelay_us	;wreg free
  3220                           
  3221                           ;main.c: 324: LATCbits.LATC6 = 0;
  3222  001B16  9C8B               	bcf	3979,6,c	;volatile
  3223                           
  3224                           ;main.c: 325: myDelay_us((int)(75/speed));
  3225  001B18  C0E0  F030         	movff	stepper_pulse@speed,___ftdiv@f2
  3226  001B1C  C0E1  F031         	movff	stepper_pulse@speed+1,___ftdiv@f2+1
  3227  001B20  C0E2  F032         	movff	stepper_pulse@speed+2,___ftdiv@f2+2
  3228  001B24  0E00               	movlw	0
  3229  001B26  6E2D               	movwf	___ftdiv@f1,c
  3230  001B28  0E96               	movlw	150
  3231  001B2A  6E2E               	movwf	___ftdiv@f1+1,c
  3232  001B2C  0E42               	movlw	66
  3233  001B2E  6E2F               	movwf	___ftdiv@f1+2,c
  3234  001B30  EC4F  F00E         	call	___ftdiv	;wreg free
  3235  001B34  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  3236  001B38  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  3237  001B3C  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  3238  001B40  EC6D  F00C         	call	___fttol	;wreg free
  3239  001B44  C03C  F0DC         	movff	?___fttol,myDelay_us@us
  3240  001B48  C03D  F0DD         	movff	?___fttol+1,myDelay_us@us+1
  3241  001B4C  EC7A  F013         	call	_myDelay_us	;wreg free
  3242                           
  3243                           ;main.c: 327: position+= stepper_direction;
  3244  001B50  0100               	movlb	0	; () banked
  3245  001B52  51FC               	movf	_stepper_direction& (0+255),w,b
  3246  001B54  0100               	movlb	0	; () banked
  3247  001B56  27D4               	addwf	_position& (0+255),f,b
  3248  001B58  0100               	movlb	0	; () banked
  3249  001B5A  51FD               	movf	(_stepper_direction+1)& (0+255),w,b
  3250  001B5C  D010               	goto	L2
  3251  001B5E                     l2834:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;main.c: 329: position+=total_steps;
  3255  001B5E  0E1F               	movlw	low _total_steps
  3256  001B60  6EF6               	movwf	tblptrl,c
  3257  001B62                     	if	1	;There is more than 1 active tblptr byte
  3258  001B62  0E10               	movlw	high _total_steps
  3259  001B64  6EF7               	movwf	tblptrh,c
  3260  001B66                     	endif
  3261  001B66                     	if	0	;There are less than 3 active tblptr bytes
  3262  001B66                     	endif
  3263  001B66  0009               	tblrd		*+
  3264  001B68  CFF5 F0E3          	movff	tablat,??_stepper_pulse
  3265  001B6C  0009               	tblrd		*+
  3266  001B6E  CFF5 F0E4          	movff	tablat,??_stepper_pulse+1
  3267  001B72  0100               	movlb	0	; () banked
  3268  001B74  51E3               	movf	??_stepper_pulse& (0+255),w,b
  3269  001B76  0100               	movlb	0	; () banked
  3270  001B78  27D4               	addwf	_position& (0+255),f,b
  3271  001B7A  0100               	movlb	0	; () banked
  3272  001B7C  51E4               	movf	(??_stepper_pulse+1)& (0+255),w,b
  3273  001B7E                     L2:
  3274  001B7E  0100               	movlb	0	; () banked
  3275  001B80  23D5               	addwfc	(_position+1)& (0+255),f,b
  3276                           
  3277                           ; BSR set to: 0
  3278                           
  3279                           ; BSR set to: 0
  3280  001B82  0100               	movlb	0	; () banked
  3281  001B84  BFD5               	btfsc	(_position+1)& (0+255),7,b
  3282  001B86  D7EB               	goto	l2834
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;main.c: 332: position%=total_steps;
  3286                           
  3287                           ; BSR set to: 0
  3288  001B88  C0D4  F00F         	movff	_position,___lwmod@dividend
  3289  001B8C  C0D5  F010         	movff	_position+1,___lwmod@dividend+1
  3290  001B90  0E1F               	movlw	low _total_steps
  3291  001B92  6EF6               	movwf	tblptrl,c
  3292  001B94                     	if	1	;There is more than 1 active tblptr byte
  3293  001B94  0E10               	movlw	high _total_steps
  3294  001B96  6EF7               	movwf	tblptrh,c
  3295  001B98                     	endif
  3296  001B98                     	if	0	;There are less than 3 active tblptr bytes
  3297  001B98                     	endif
  3298  001B98  0009               	tblrd		*+
  3299  001B9A  CFF5 F011          	movff	tablat,___lwmod@divisor
  3300  001B9E  000A               	tblrd		*-
  3301  001BA0  CFF5 F012          	movff	tablat,___lwmod@divisor+1
  3302  001BA4  EC3D  F013         	call	___lwmod	;wreg free
  3303  001BA8  C00F  F0D4         	movff	?___lwmod,_position
  3304  001BAC  C010  F0D5         	movff	?___lwmod+1,_position+1
  3305  001BB0  0012               	return		;funcret
  3306  001BB2                     __end_of_stepper_pulse:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon	equ	0xFF2
  3315                           postinc0	equ	0xFEE
  3316                           wreg	equ	0xFE8
  3317                           postdec1	equ	0xFE5
  3318                           fsr1l	equ	0xFE1
  3319                           indf2	equ	0xFDF
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           fsr2h	equ	0xFDA
  3323                           fsr2l	equ	0xFD9
  3324                           status	equ	0xFD8
  3325                           
  3326 ;; *************** function ___lwmod *****************
  3327 ;; Defined at:
  3328 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/lwmod.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;  dividend        2   14[COMRAM] unsigned int 
  3331 ;;  divisor         2   16[COMRAM] unsigned int 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  counter         1   18[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  2   14[COMRAM] unsigned int 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3343 ;;      Params:         4       0       0       0       0       0       0       0       0
  3344 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3346 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3347 ;;Total ram usage:        5 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    1
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_fsm
  3354 ;;		_stepper_pulse
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text11
  3359  00267A                     __ptext11:
  3360                           	opt stack 0
  3361  00267A                     ___lwmod:
  3362                           	opt stack 27
  3363                           
  3364                           ;incstack = 0
  3365  00267A  5011               	movf	___lwmod@divisor,w,c
  3366  00267C  1012               	iorwf	___lwmod@divisor+1,w,c
  3367  00267E  B4D8               	btfsc	status,2,c
  3368  002680  D018               	goto	l707
  3369  002682  0E01               	movlw	1
  3370  002684  6E13               	movwf	___lwmod@counter,c
  3371  002686  D004               	goto	l2814
  3372  002688                     l2812:
  3373  002688  90D8               	bcf	status,0,c
  3374  00268A  3611               	rlcf	___lwmod@divisor,f,c
  3375  00268C  3612               	rlcf	___lwmod@divisor+1,f,c
  3376  00268E  2A13               	incf	___lwmod@counter,f,c
  3377  002690                     l2814:
  3378  002690  AE12               	btfss	___lwmod@divisor+1,7,c
  3379  002692  D7FA               	goto	l2812
  3380  002694                     l2816:
  3381  002694  5011               	movf	___lwmod@divisor,w,c
  3382  002696  5C0F               	subwf	___lwmod@dividend,w,c
  3383  002698  5012               	movf	___lwmod@divisor+1,w,c
  3384  00269A  5810               	subwfb	___lwmod@dividend+1,w,c
  3385  00269C  A0D8               	btfss	status,0,c
  3386  00269E  D004               	goto	l2820
  3387  0026A0  5011               	movf	___lwmod@divisor,w,c
  3388  0026A2  5E0F               	subwf	___lwmod@dividend,f,c
  3389  0026A4  5012               	movf	___lwmod@divisor+1,w,c
  3390  0026A6  5A10               	subwfb	___lwmod@dividend+1,f,c
  3391  0026A8                     l2820:
  3392  0026A8  90D8               	bcf	status,0,c
  3393  0026AA  3212               	rrcf	___lwmod@divisor+1,f,c
  3394  0026AC  3211               	rrcf	___lwmod@divisor,f,c
  3395  0026AE  2E13               	decfsz	___lwmod@counter,f,c
  3396  0026B0  D7F1               	goto	l2816
  3397  0026B2                     l707:
  3398  0026B2  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  3399  0026B6  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  3400  0026BA  0012               	return		;funcret
  3401  0026BC                     __end_of___lwmod:
  3402                           	opt stack 0
  3403                           tblptru	equ	0xFF8
  3404                           tblptrh	equ	0xFF7
  3405                           tblptrl	equ	0xFF6
  3406                           tablat	equ	0xFF5
  3407                           prodh	equ	0xFF4
  3408                           prodl	equ	0xFF3
  3409                           intcon	equ	0xFF2
  3410                           postinc0	equ	0xFEE
  3411                           wreg	equ	0xFE8
  3412                           postdec1	equ	0xFE5
  3413                           fsr1l	equ	0xFE1
  3414                           indf2	equ	0xFDF
  3415                           postinc2	equ	0xFDE
  3416                           postdec2	equ	0xFDD
  3417                           fsr2h	equ	0xFDA
  3418                           fsr2l	equ	0xFD9
  3419                           status	equ	0xFD8
  3420                           
  3421 ;; *************** function _srand *****************
  3422 ;; Defined at:
  3423 ;;		line 6 in file "/Applications/microchip/xc8/v1.36/sources/common/rand.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  x               2   14[COMRAM] unsigned int 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		status,2
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3437 ;;      Params:         2       0       0       0       0       0       0       0       0
  3438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3440 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3441 ;;Total ram usage:        2 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    1
  3444 ;; This function calls:
  3445 ;;		Nothing
  3446 ;; This function is called by:
  3447 ;;		_fsm
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text12
  3452  00281C                     __ptext12:
  3453                           	opt stack 0
  3454  00281C                     _srand:
  3455                           	opt stack 28
  3456                           
  3457                           ;incstack = 0
  3458  00281C  C00F  F04B         	movff	srand@x,_randx
  3459  002820  C010  F04C         	movff	srand@x+1,_randx+1
  3460  002824  6A4D               	clrf	_randx+2,c
  3461  002826  6A4E               	clrf	_randx+3,c
  3462  002828  0012               	return		;funcret
  3463  00282A                     __end_of_srand:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           intcon	equ	0xFF2
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           postdec1	equ	0xFE5
  3475                           fsr1l	equ	0xFE1
  3476                           indf2	equ	0xFDF
  3477                           postinc2	equ	0xFDE
  3478                           postdec2	equ	0xFDD
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _setAllLeds *****************
  3484 ;; Defined at:
  3485 ;;		line 367 in file "main.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  value           1    wreg     unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  value           1   14[COMRAM] unsigned char 
  3490 ;;  i               1   15[COMRAM] unsigned char 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3500 ;;      Params:         0       0       0       0       0       0       0       0       0
  3501 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3503 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3504 ;;Total ram usage:        2 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    1
  3507 ;; This function calls:
  3508 ;;		Nothing
  3509 ;; This function is called by:
  3510 ;;		_fsm
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text13
  3515  00277A                     __ptext13:
  3516                           	opt stack 0
  3517  00277A                     _setAllLeds:
  3518                           	opt stack 28
  3519                           
  3520                           ;incstack = 0
  3521                           ;setAllLeds@value stored from wreg
  3522  00277A  6E0F               	movwf	setAllLeds@value,c
  3523                           
  3524                           ;main.c: 368: for(char i = 0; i <= 15; i++)
  3525  00277C  0E00               	movlw	0
  3526  00277E  6E10               	movwf	setAllLeds@i,c
  3527  002780                     l2842:
  3528  002780  0E0F               	movlw	15
  3529  002782  6410               	cpfsgt	setAllLeds@i,c
  3530  002784  D001               	goto	l2846
  3531  002786  0012               	return	
  3532  002788                     l2846:
  3533                           
  3534                           ;main.c: 369: LEDs[i] = value;
  3535  002788  5010               	movf	setAllLeds@i,w,c
  3536  00278A  0D01               	mullw	1
  3537  00278C  0EC0               	movlw	low _LEDs
  3538  00278E  24F3               	addwf	prodl,w,c
  3539  002790  6ED9               	movwf	fsr2l,c
  3540  002792  0E00               	movlw	high _LEDs
  3541  002794  20F4               	addwfc	prodh,w,c
  3542  002796  6EDA               	movwf	fsr2h,c
  3543  002798  C00F  FFDF         	movff	setAllLeds@value,indf2
  3544  00279C  2A10               	incf	setAllLeds@i,f,c
  3545  00279E  D7F0               	goto	l2842
  3546  0027A0                     __end_of_setAllLeds:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           intcon	equ	0xFF2
  3555                           postinc0	equ	0xFEE
  3556                           wreg	equ	0xFE8
  3557                           postdec1	equ	0xFE5
  3558                           fsr1l	equ	0xFE1
  3559                           indf2	equ	0xFDF
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _rand *****************
  3567 ;; Defined at:
  3568 ;;		line 12 in file "/Applications/microchip/xc8/v1.36/sources/common/rand.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;		None
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;		None
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  2   26[COMRAM] int 
  3575 ;; Registers used:
  3576 ;;		wreg, status,2, status,0, cstack
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3582 ;;      Params:         2       0       0       0       0       0       0       0       0
  3583 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3585 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3586 ;;Total ram usage:        2 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    2
  3589 ;; This function calls:
  3590 ;;		___lmul
  3591 ;; This function is called by:
  3592 ;;		_fsm
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           	psect	text14
  3597  002628                     __ptext14:
  3598                           	opt stack 0
  3599  002628                     _rand:
  3600                           	opt stack 27
  3601                           
  3602                           ;incstack = 0
  3603  002628  C04B  F00F         	movff	_randx,___lmul@multiplier
  3604  00262C  C04C  F010         	movff	_randx+1,___lmul@multiplier+1
  3605  002630  C04D  F011         	movff	_randx+2,___lmul@multiplier+2
  3606  002634  C04E  F012         	movff	_randx+3,___lmul@multiplier+3
  3607  002638  0E6D               	movlw	109
  3608  00263A  6E13               	movwf	___lmul@multiplicand,c
  3609  00263C  0E4E               	movlw	78
  3610  00263E  6E14               	movwf	___lmul@multiplicand+1,c
  3611  002640  0EC6               	movlw	198
  3612  002642  6E15               	movwf	___lmul@multiplicand+2,c
  3613  002644  0E41               	movlw	65
  3614  002646  6E16               	movwf	___lmul@multiplicand+3,c
  3615  002648  EC96  F012         	call	___lmul	;wreg free
  3616  00264C  C00F  F04B         	movff	?___lmul,_randx
  3617  002650  C010  F04C         	movff	?___lmul+1,_randx+1
  3618  002654  C011  F04D         	movff	?___lmul+2,_randx+2
  3619  002658  C012  F04E         	movff	?___lmul+3,_randx+3
  3620  00265C  0E39               	movlw	57
  3621  00265E  264B               	addwf	_randx,f,c
  3622  002660  0E30               	movlw	48
  3623  002662  224C               	addwfc	_randx+1,f,c
  3624  002664  0E00               	movlw	0
  3625  002666  224D               	addwfc	_randx+2,f,c
  3626  002668  0E00               	movlw	0
  3627  00266A  224E               	addwfc	_randx+3,f,c
  3628  00266C  0EFF               	movlw	255
  3629  00266E  144D               	andwf	_randx+2,w,c
  3630  002670  6E1B               	movwf	?_rand,c
  3631  002672  0E7F               	movlw	127
  3632  002674  144E               	andwf	_randx+3,w,c
  3633  002676  6E1C               	movwf	?_rand+1,c
  3634  002678  0012               	return	
  3635  00267A                     __end_of_rand:
  3636                           	opt stack 0
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           postinc0	equ	0xFEE
  3645                           wreg	equ	0xFE8
  3646                           postdec1	equ	0xFE5
  3647                           fsr1l	equ	0xFE1
  3648                           indf2	equ	0xFDF
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _nothingElseMatters *****************
  3656 ;; Defined at:
  3657 ;;		line 77 in file "songs.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  index           2   22[BANK0 ] unsigned int 
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3671 ;;      Params:         0       2       0       0       0       0       0       0       0
  3672 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3673 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3674 ;;      Totals:         0       2       2       0       0       0       0       0       0
  3675 ;;Total ram usage:        4 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    4
  3678 ;; This function calls:
  3679 ;;		___wmul
  3680 ;;		_buzz
  3681 ;; This function is called by:
  3682 ;;		_fsm
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text15
  3687  0022F2                     __ptext15:
  3688                           	opt stack 0
  3689  0022F2                     _nothingElseMatters:
  3690                           	opt stack 25
  3691                           
  3692                           ;songs.c: 78: buzz(nothingElseMattersNotes[index], 70*nothingElseMattersDurations[index]
      +                          );
  3693                           
  3694                           ;incstack = 0
  3695  0022F2  90D8               	bcf	status,0,c
  3696  0022F4  0100               	movlb	0	; () banked
  3697  0022F6  35F2               	rlcf	nothingElseMatters@index& (0+255),w,b
  3698  0022F8  6ED9               	movwf	fsr2l,c
  3699  0022FA  0100               	movlb	0	; () banked
  3700  0022FC  35F3               	rlcf	(nothingElseMatters@index+1)& (0+255),w,b
  3701  0022FE  6EDA               	movwf	fsr2h,c
  3702  002300  0EB4               	movlw	low _nothingElseMattersNotes
  3703  002302  26D9               	addwf	fsr2l,f,c
  3704  002304  0E00               	movlw	high _nothingElseMattersNotes
  3705  002306  22DA               	addwfc	fsr2h,f,c
  3706  002308  CFDE F1EC          	movff	postinc2,??_nothingElseMatters
  3707  00230C  CFDD F1ED          	movff	postdec2,??_nothingElseMatters+1
  3708  002310  C1EC  F0E0         	movff	??_nothingElseMatters,buzz@freq
  3709  002314  C1ED  F0E1         	movff	??_nothingElseMatters+1,buzz@freq+1
  3710  002318  0100               	movlb	0	; () banked
  3711  00231A  6BE2               	clrf	(buzz@freq+2)& (0+255),b
  3712  00231C  6BE3               	clrf	(buzz@freq+3)& (0+255),b
  3713  00231E  90D8               	bcf	status,0,c
  3714  002320  0100               	movlb	0	; () banked
  3715  002322  35F2               	rlcf	nothingElseMatters@index& (0+255),w,b
  3716  002324  6ED9               	movwf	fsr2l,c
  3717  002326  0100               	movlb	0	; () banked
  3718  002328  35F3               	rlcf	(nothingElseMatters@index+1)& (0+255),w,b
  3719  00232A  6EDA               	movwf	fsr2h,c
  3720  00232C  0EA8               	movlw	low _nothingElseMattersDurations
  3721  00232E  26D9               	addwf	fsr2l,f,c
  3722  002330  0E00               	movlw	high _nothingElseMattersDurations
  3723  002332  22DA               	addwfc	fsr2h,f,c
  3724  002334  CFDE F023          	movff	postinc2,___wmul@multiplier
  3725  002338  CFDD F024          	movff	postdec2,___wmul@multiplier+1
  3726  00233C  0E00               	movlw	0
  3727  00233E  6E26               	movwf	___wmul@multiplicand+1,c
  3728  002340  0E46               	movlw	70
  3729  002342  6E25               	movwf	___wmul@multiplicand,c
  3730  002344  ECD0  F013         	call	___wmul	;wreg free
  3731  002348  C023  F0E4         	movff	?___wmul,buzz@duration
  3732  00234C  C024  F0E5         	movff	?___wmul+1,buzz@duration+1
  3733  002350  ECD0  F00B         	call	_buzz	;wreg free
  3734                           
  3735                           ;songs.c: 79: buzz(0, 20);
  3736  002354  0E00               	movlw	0
  3737  002356  0100               	movlb	0	; () banked
  3738  002358  6FE0               	movwf	buzz@freq& (0+255),b
  3739  00235A  0E00               	movlw	0
  3740  00235C  6FE1               	movwf	(buzz@freq+1)& (0+255),b
  3741  00235E  0E00               	movlw	0
  3742  002360  6FE2               	movwf	(buzz@freq+2)& (0+255),b
  3743  002362  0E00               	movlw	0
  3744  002364  6FE3               	movwf	(buzz@freq+3)& (0+255),b
  3745  002366  0E00               	movlw	0
  3746  002368  0100               	movlb	0	; () banked
  3747  00236A  6FE5               	movwf	(buzz@duration+1)& (0+255),b
  3748  00236C  0E14               	movlw	20
  3749  00236E  6FE4               	movwf	buzz@duration& (0+255),b
  3750  002370  ECD0  F00B         	call	_buzz	;wreg free
  3751  002374  0012               	return		;funcret
  3752  002376                     __end_of_nothingElseMatters:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           postdec1	equ	0xFE5
  3764                           fsr1l	equ	0xFE1
  3765                           indf2	equ	0xFDF
  3766                           postinc2	equ	0xFDE
  3767                           postdec2	equ	0xFDD
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _buzz *****************
  3773 ;; Defined at:
  3774 ;;		line 26 in file "songs.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  freq            4    4[BANK0 ] long 
  3777 ;;  duration        2    8[BANK0 ] unsigned int 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  i               4   16[BANK0 ] long 
  3780 ;;  repeats         4   12[BANK0 ] long 
  3781 ;;  halfPeriod      2   20[BANK0 ] unsigned int 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3791 ;;      Params:         0       6       0       0       0       0       0       0       0
  3792 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3793 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3794 ;;      Totals:         0      18       0       0       0       0       0       0       0
  3795 ;;Total ram usage:       18 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    3
  3798 ;; This function calls:
  3799 ;;		___aldiv
  3800 ;;		___altoft
  3801 ;;		___ftdiv
  3802 ;;		___fttol
  3803 ;;		___lmul
  3804 ;;		_myDelay_ms
  3805 ;;		_myDelay_us
  3806 ;; This function is called by:
  3807 ;;		_fsm
  3808 ;;		_nothingElseMatters
  3809 ;;		_superMario
  3810 ;;		_starWars
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           	psect	text16
  3815  0017A0                     __ptext16:
  3816                           	opt stack 0
  3817  0017A0                     _buzz:
  3818                           	opt stack 25
  3819                           
  3820                           ;songs.c: 28: if (freq==0) {
  3821                           
  3822                           ;incstack = 0
  3823  0017A0  0100               	movlb	0	; () banked
  3824  0017A2  51E0               	movf	buzz@freq& (0+255),w,b
  3825  0017A4  0100               	movlb	0	; () banked
  3826  0017A6  11E1               	iorwf	(buzz@freq+1)& (0+255),w,b
  3827  0017A8  0100               	movlb	0	; () banked
  3828  0017AA  11E2               	iorwf	(buzz@freq+2)& (0+255),w,b
  3829  0017AC  0100               	movlb	0	; () banked
  3830  0017AE  11E3               	iorwf	(buzz@freq+3)& (0+255),w,b
  3831  0017B0  A4D8               	btfss	status,2,c
  3832  0017B2  D007               	goto	l2768
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;songs.c: 29: myDelay_ms(duration);
  3836  0017B4  C0E4  F00F         	movff	buzz@duration,myDelay_ms@ms
  3837  0017B8  C0E5  F010         	movff	buzz@duration+1,myDelay_ms@ms+1
  3838  0017BC  EC92  F013         	call	_myDelay_ms	;wreg free
  3839                           
  3840                           ;songs.c: 30: return;
  3841  0017C0  0012               	return	
  3842  0017C2                     l2768:
  3843                           
  3844                           ;songs.c: 31: }
  3845                           ;songs.c: 32: unsigned int halfPeriod = 1e6 / 2 / freq;
  3846  0017C2  C0E0  F017         	movff	buzz@freq,___altoft@c
  3847  0017C6  C0E1  F018         	movff	buzz@freq+1,___altoft@c+1
  3848  0017CA  C0E2  F019         	movff	buzz@freq+2,___altoft@c+2
  3849  0017CE  C0E3  F01A         	movff	buzz@freq+3,___altoft@c+3
  3850  0017D2  ECBB  F011         	call	___altoft	;wreg free
  3851  0017D6  C017  F030         	movff	?___altoft,___ftdiv@f2
  3852  0017DA  C018  F031         	movff	?___altoft+1,___ftdiv@f2+1
  3853  0017DE  C019  F032         	movff	?___altoft+2,___ftdiv@f2+2
  3854  0017E2  0E24               	movlw	36
  3855  0017E4  6E2D               	movwf	___ftdiv@f1,c
  3856  0017E6  0EF4               	movlw	244
  3857  0017E8  6E2E               	movwf	___ftdiv@f1+1,c
  3858  0017EA  0E48               	movlw	72
  3859  0017EC  6E2F               	movwf	___ftdiv@f1+2,c
  3860  0017EE  EC4F  F00E         	call	___ftdiv	;wreg free
  3861  0017F2  C02D  F03C         	movff	?___ftdiv,___fttol@f1
  3862  0017F6  C02E  F03D         	movff	?___ftdiv+1,___fttol@f1+1
  3863  0017FA  C02F  F03E         	movff	?___ftdiv+2,___fttol@f1+2
  3864  0017FE  EC6D  F00C         	call	___fttol	;wreg free
  3865  001802  C03C  F0F0         	movff	?___fttol,buzz@halfPeriod
  3866  001806  C03D  F0F1         	movff	?___fttol+1,buzz@halfPeriod+1
  3867                           
  3868                           ;songs.c: 33: long repeats = (long)duration *1000 / (2 * halfPeriod);
  3869  00180A  C0E4  F00F         	movff	buzz@duration,___lmul@multiplier
  3870  00180E  C0E5  F010         	movff	buzz@duration+1,___lmul@multiplier+1
  3871  001812  6A11               	clrf	___lmul@multiplier+2,c
  3872  001814  6A12               	clrf	___lmul@multiplier+3,c
  3873  001816  0EE8               	movlw	232
  3874  001818  6E13               	movwf	___lmul@multiplicand,c
  3875  00181A  0E03               	movlw	3
  3876  00181C  6E14               	movwf	___lmul@multiplicand+1,c
  3877  00181E  0E00               	movlw	0
  3878  001820  6E15               	movwf	___lmul@multiplicand+2,c
  3879  001822  0E00               	movlw	0
  3880  001824  6E16               	movwf	___lmul@multiplicand+3,c
  3881  001826  EC96  F012         	call	___lmul	;wreg free
  3882  00182A  C00F  F01B         	movff	?___lmul,___aldiv@dividend
  3883  00182E  C010  F01C         	movff	?___lmul+1,___aldiv@dividend+1
  3884  001832  C011  F01D         	movff	?___lmul+2,___aldiv@dividend+2
  3885  001836  C012  F01E         	movff	?___lmul+3,___aldiv@dividend+3
  3886  00183A  C0F0  F0E6         	movff	buzz@halfPeriod,??_buzz
  3887  00183E  C0F1  F0E7         	movff	buzz@halfPeriod+1,??_buzz+1
  3888  001842  90D8               	bcf	status,0,c
  3889  001844  0100               	movlb	0	; () banked
  3890  001846  37E6               	rlcf	??_buzz& (0+255),f,b
  3891  001848  37E7               	rlcf	(??_buzz+1)& (0+255),f,b
  3892  00184A  C0E6  F01F         	movff	??_buzz,___aldiv@divisor
  3893  00184E  C0E7  F020         	movff	??_buzz+1,___aldiv@divisor+1
  3894  001852  6A21               	clrf	___aldiv@divisor+2,c
  3895  001854  6A22               	clrf	___aldiv@divisor+3,c
  3896  001856  ECC2  F00E         	call	___aldiv	;wreg free
  3897  00185A  C01B  F0E8         	movff	?___aldiv,buzz@repeats
  3898  00185E  C01C  F0E9         	movff	?___aldiv+1,buzz@repeats+1
  3899  001862  C01D  F0EA         	movff	?___aldiv+2,buzz@repeats+2
  3900  001866  C01E  F0EB         	movff	?___aldiv+3,buzz@repeats+3
  3901                           
  3902                           ;songs.c: 34: for (long i=0; i<repeats; i++) {
  3903  00186A  0E00               	movlw	0
  3904  00186C  0100               	movlb	0	; () banked
  3905  00186E  6FEC               	movwf	buzz@i& (0+255),b
  3906  001870  0E00               	movlw	0
  3907  001872  6FED               	movwf	(buzz@i+1)& (0+255),b
  3908  001874  0E00               	movlw	0
  3909  001876  6FEE               	movwf	(buzz@i+2)& (0+255),b
  3910  001878  0E00               	movlw	0
  3911  00187A  6FEF               	movwf	(buzz@i+3)& (0+255),b
  3912  00187C  D015               	goto	l2778
  3913  00187E                     l281:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;songs.c: 35: LATAbits.LATA3 = 1;
  3917  00187E  8689               	bsf	3977,3,c	;volatile
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;songs.c: 36: myDelay_us(halfPeriod);
  3921  001880  C0F0  F0DC         	movff	buzz@halfPeriod,myDelay_us@us
  3922  001884  C0F1  F0DD         	movff	buzz@halfPeriod+1,myDelay_us@us+1
  3923  001888  EC7A  F013         	call	_myDelay_us	;wreg free
  3924                           
  3925                           ;songs.c: 38: LATAbits.LATA3 = 0;
  3926  00188C  9689               	bcf	3977,3,c	;volatile
  3927                           
  3928                           ;songs.c: 39: myDelay_us(halfPeriod);
  3929  00188E  C0F0  F0DC         	movff	buzz@halfPeriod,myDelay_us@us
  3930  001892  C0F1  F0DD         	movff	buzz@halfPeriod+1,myDelay_us@us+1
  3931  001896  EC7A  F013         	call	_myDelay_us	;wreg free
  3932  00189A  0E01               	movlw	1
  3933  00189C  0100               	movlb	0	; () banked
  3934  00189E  27EC               	addwf	buzz@i& (0+255),f,b
  3935  0018A0  0E00               	movlw	0
  3936  0018A2  23ED               	addwfc	(buzz@i+1)& (0+255),f,b
  3937  0018A4  23EE               	addwfc	(buzz@i+2)& (0+255),f,b
  3938  0018A6  23EF               	addwfc	(buzz@i+3)& (0+255),f,b
  3939  0018A8                     l2778:
  3940                           
  3941                           ; BSR set to: 0
  3942  0018A8  0100               	movlb	0	; () banked
  3943  0018AA  51E8               	movf	buzz@repeats& (0+255),w,b
  3944  0018AC  0100               	movlb	0	; () banked
  3945  0018AE  5DEC               	subwf	buzz@i& (0+255),w,b
  3946  0018B0  0100               	movlb	0	; () banked
  3947  0018B2  51E9               	movf	(buzz@repeats+1)& (0+255),w,b
  3948  0018B4  0100               	movlb	0	; () banked
  3949  0018B6  59ED               	subwfb	(buzz@i+1)& (0+255),w,b
  3950  0018B8  0100               	movlb	0	; () banked
  3951  0018BA  51EA               	movf	(buzz@repeats+2)& (0+255),w,b
  3952  0018BC  0100               	movlb	0	; () banked
  3953  0018BE  59EE               	subwfb	(buzz@i+2)& (0+255),w,b
  3954  0018C0  0100               	movlb	0	; () banked
  3955  0018C2  51EF               	movf	(buzz@i+3)& (0+255),w,b
  3956  0018C4  0A80               	xorlw	128
  3957  0018C6  0100               	movlb	0	; () banked
  3958  0018C8  6FE6               	movwf	??_buzz& (0+255),b
  3959  0018CA  0100               	movlb	0	; () banked
  3960  0018CC  51EB               	movf	(buzz@repeats+3)& (0+255),w,b
  3961  0018CE  0A80               	xorlw	128
  3962  0018D0  0100               	movlb	0	; () banked
  3963  0018D2  59E6               	subwfb	??_buzz& (0+255),w,b
  3964  0018D4  B0D8               	btfsc	status,0,c
  3965  0018D6  0012               	return	
  3966  0018D8  D7D2               	goto	l281
  3967  0018DA                     __end_of_buzz:
  3968                           	opt stack 0
  3969                           tblptru	equ	0xFF8
  3970                           tblptrh	equ	0xFF7
  3971                           tblptrl	equ	0xFF6
  3972                           tablat	equ	0xFF5
  3973                           prodh	equ	0xFF4
  3974                           prodl	equ	0xFF3
  3975                           intcon	equ	0xFF2
  3976                           postinc0	equ	0xFEE
  3977                           wreg	equ	0xFE8
  3978                           postdec1	equ	0xFE5
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _myDelay_us *****************
  3988 ;; Defined at:
  3989 ;;		line 13 in file "songs.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  us              2    0[BANK0 ] unsigned int 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  i               2    2[BANK0 ] unsigned int 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  1    wreg      void 
  3996 ;; Registers used:
  3997 ;;		wreg, status,2, status,0
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4003 ;;      Params:         0       2       0       0       0       0       0       0       0
  4004 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4005 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4006 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4007 ;;Total ram usage:        4 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    1
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		_stepper_pulse
  4014 ;;		_go_through_cols
  4015 ;;		_buzz
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           	psect	text17
  4020  0026F4                     __ptext17:
  4021                           	opt stack 0
  4022  0026F4                     _myDelay_us:
  4023                           	opt stack 27
  4024                           
  4025                           ;songs.c: 15: for (unsigned int i=0; i<us; i++)
  4026                           
  4027                           ;incstack = 0
  4028  0026F4  0E00               	movlw	0
  4029  0026F6  0100               	movlb	0	; () banked
  4030  0026F8  6FDF               	movwf	(myDelay_us@i+1)& (0+255),b
  4031  0026FA  0E00               	movlw	0
  4032  0026FC  6FDE               	movwf	myDelay_us@i& (0+255),b
  4033  0026FE  D007               	goto	l266
  4034  002700                     l2590:
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;songs.c: 16: _delay((unsigned long)((1)*(47000000/4000000.0)));
  4038  002700  0E03               	movlw	3
  4039  002702                     u3627:
  4040  002702  2EE8               	decfsz	wreg,f,c
  4041  002704  D7FE               	goto	u3627
  4042  002706  D000               	nop2		;nop
  4043  002708  0100               	movlb	0	; () banked
  4044  00270A  4BDE               	infsnz	myDelay_us@i& (0+255),f,b
  4045  00270C  2BDF               	incf	(myDelay_us@i+1)& (0+255),f,b
  4046  00270E                     l266:
  4047                           
  4048                           ; BSR set to: 0
  4049  00270E  0100               	movlb	0	; () banked
  4050  002710  51DC               	movf	myDelay_us@us& (0+255),w,b
  4051  002712  0100               	movlb	0	; () banked
  4052  002714  5DDE               	subwf	myDelay_us@i& (0+255),w,b
  4053  002716  0100               	movlb	0	; () banked
  4054  002718  51DD               	movf	(myDelay_us@us+1)& (0+255),w,b
  4055  00271A  0100               	movlb	0	; () banked
  4056  00271C  59DF               	subwfb	(myDelay_us@i+1)& (0+255),w,b
  4057  00271E  B0D8               	btfsc	status,0,c
  4058  002720  0012               	return	
  4059  002722  D7EE               	goto	l2590
  4060  002724                     __end_of_myDelay_us:
  4061                           	opt stack 0
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _myDelay_ms *****************
  4081 ;; Defined at:
  4082 ;;		line 19 in file "songs.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  ms              2   14[COMRAM] unsigned int 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  i               2   17[COMRAM] unsigned int 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4096 ;;      Params:         2       0       0       0       0       0       0       0       0
  4097 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4098 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4099 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4100 ;;Total ram usage:        5 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    1
  4103 ;; This function calls:
  4104 ;;		Nothing
  4105 ;; This function is called by:
  4106 ;;		_buzz
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text18
  4111  002724                     __ptext18:
  4112                           	opt stack 0
  4113  002724                     _myDelay_ms:
  4114                           	opt stack 26
  4115                           
  4116                           ;songs.c: 21: for (unsigned int i=0; i<ms; i++)
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;incstack = 0
  4120  002724  0E00               	movlw	0
  4121  002726  6E13               	movwf	myDelay_ms@i+1,c
  4122  002728  0E00               	movlw	0
  4123  00272A  6E12               	movwf	myDelay_ms@i,c
  4124  00272C  D00A               	goto	l272
  4125  00272E                     l2596:
  4126                           
  4127                           ;songs.c: 22: _delay((unsigned long)((1)*(47000000/4000.0)));
  4128  00272E  0E10               	movlw	16
  4129  002730  6E11               	movwf	??_myDelay_ms& (0+255),c
  4130  002732  0E41               	movlw	65
  4131  002734                     u3637:
  4132  002734  2EE8               	decfsz	wreg,f,c
  4133  002736  D7FE               	goto	u3637
  4134  002738  2E11               	decfsz	??_myDelay_ms& (0+255),f,c
  4135  00273A  D7FC               	goto	u3637
  4136  00273C  F000               	nop	
  4137  00273E  4A12               	infsnz	myDelay_ms@i,f,c
  4138  002740  2A13               	incf	myDelay_ms@i+1,f,c
  4139  002742                     l272:
  4140  002742  500F               	movf	myDelay_ms@ms,w,c
  4141  002744  5C12               	subwf	myDelay_ms@i,w,c
  4142  002746  5010               	movf	myDelay_ms@ms+1,w,c
  4143  002748  5813               	subwfb	myDelay_ms@i+1,w,c
  4144  00274A  B0D8               	btfsc	status,0,c
  4145  00274C  0012               	return	
  4146  00274E  D7EF               	goto	l2596
  4147  002750                     __end_of_myDelay_ms:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           postdec1	equ	0xFE5
  4159                           fsr1l	equ	0xFE1
  4160                           indf2	equ	0xFDF
  4161                           postinc2	equ	0xFDE
  4162                           postdec2	equ	0xFDD
  4163                           fsr2h	equ	0xFDA
  4164                           fsr2l	equ	0xFD9
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function ___lmul *****************
  4168 ;; Defined at:
  4169 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul32.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  multiplier      4   14[COMRAM] unsigned long 
  4172 ;;  multiplicand    4   18[COMRAM] unsigned long 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  product         4   22[COMRAM] unsigned long 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  4   14[COMRAM] unsigned long 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4184 ;;      Params:         8       0       0       0       0       0       0       0       0
  4185 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4187 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4188 ;;Total ram usage:       12 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    1
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_buzz
  4195 ;;		_rand
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text19
  4200  00252C                     __ptext19:
  4201                           	opt stack 0
  4202  00252C                     ___lmul:
  4203                           	opt stack 26
  4204                           
  4205                           ;incstack = 0
  4206  00252C  0E00               	movlw	0
  4207  00252E  6E17               	movwf	___lmul@product,c
  4208  002530  0E00               	movlw	0
  4209  002532  6E18               	movwf	___lmul@product+1,c
  4210  002534  0E00               	movlw	0
  4211  002536  6E19               	movwf	___lmul@product+2,c
  4212  002538  0E00               	movlw	0
  4213  00253A  6E1A               	movwf	___lmul@product+3,c
  4214  00253C                     l2602:
  4215  00253C  A00F               	btfss	___lmul@multiplier,0,c
  4216  00253E  D008               	goto	l2606
  4217  002540  5013               	movf	___lmul@multiplicand,w,c
  4218  002542  2617               	addwf	___lmul@product,f,c
  4219  002544  5014               	movf	___lmul@multiplicand+1,w,c
  4220  002546  2218               	addwfc	___lmul@product+1,f,c
  4221  002548  5015               	movf	___lmul@multiplicand+2,w,c
  4222  00254A  2219               	addwfc	___lmul@product+2,f,c
  4223  00254C  5016               	movf	___lmul@multiplicand+3,w,c
  4224  00254E  221A               	addwfc	___lmul@product+3,f,c
  4225  002550                     l2606:
  4226  002550  90D8               	bcf	status,0,c
  4227  002552  3613               	rlcf	___lmul@multiplicand,f,c
  4228  002554  3614               	rlcf	___lmul@multiplicand+1,f,c
  4229  002556  3615               	rlcf	___lmul@multiplicand+2,f,c
  4230  002558  3616               	rlcf	___lmul@multiplicand+3,f,c
  4231  00255A  90D8               	bcf	status,0,c
  4232  00255C  3212               	rrcf	___lmul@multiplier+3,f,c
  4233  00255E  3211               	rrcf	___lmul@multiplier+2,f,c
  4234  002560  3210               	rrcf	___lmul@multiplier+1,f,c
  4235  002562  320F               	rrcf	___lmul@multiplier,f,c
  4236  002564  500F               	movf	___lmul@multiplier,w,c
  4237  002566  1010               	iorwf	___lmul@multiplier+1,w,c
  4238  002568  1011               	iorwf	___lmul@multiplier+2,w,c
  4239  00256A  1012               	iorwf	___lmul@multiplier+3,w,c
  4240  00256C  A4D8               	btfss	status,2,c
  4241  00256E  D7E6               	goto	l2602
  4242  002570  C017  F00F         	movff	___lmul@product,?___lmul
  4243  002574  C018  F010         	movff	___lmul@product+1,?___lmul+1
  4244  002578  C019  F011         	movff	___lmul@product+2,?___lmul+2
  4245  00257C  C01A  F012         	movff	___lmul@product+3,?___lmul+3
  4246  002580  0012               	return		;funcret
  4247  002582                     __end_of___lmul:
  4248                           	opt stack 0
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon	equ	0xFF2
  4256                           postinc0	equ	0xFEE
  4257                           wreg	equ	0xFE8
  4258                           postdec1	equ	0xFE5
  4259                           fsr1l	equ	0xFE1
  4260                           indf2	equ	0xFDF
  4261                           postinc2	equ	0xFDE
  4262                           postdec2	equ	0xFDD
  4263                           fsr2h	equ	0xFDA
  4264                           fsr2l	equ	0xFD9
  4265                           status	equ	0xFD8
  4266                           
  4267 ;; *************** function ___fttol *****************
  4268 ;; Defined at:
  4269 ;;		line 44 in file "/Applications/microchip/xc8/v1.36/sources/common/fttol.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  f1              3   59[COMRAM] float 
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;  lval            4   69[COMRAM] unsigned long 
  4274 ;;  exp1            1   73[COMRAM] unsigned char 
  4275 ;;  sign1           1   68[COMRAM] unsigned char 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  4   59[COMRAM] long 
  4278 ;; Registers used:
  4279 ;;		wreg, status,2, status,0
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4285 ;;      Params:         4       0       0       0       0       0       0       0       0
  4286 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4287 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4288 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4289 ;;Total ram usage:       15 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_stepper_pulse
  4296 ;;		_buzz
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text20
  4301  0018DA                     __ptext20:
  4302                           	opt stack 0
  4303  0018DA                     ___fttol:
  4304                           	opt stack 26
  4305                           
  4306                           ;incstack = 0
  4307  0018DA  C03E  F040         	movff	___fttol@f1+2,??___fttol
  4308  0018DE  6A41               	clrf	(??___fttol+1)& (0+255),c
  4309  0018E0  6A42               	clrf	(??___fttol+2)& (0+255),c
  4310  0018E2  343D               	rlcf	___fttol@f1+1,w,c
  4311  0018E4  3640               	rlcf	??___fttol& (0+255),f,c
  4312  0018E6  E301               	bnc	u2691
  4313  0018E8  8041               	bsf	(??___fttol+1)& (0+255),0,c
  4314  0018EA                     u2691:
  4315  0018EA  5040               	movf	??___fttol,w,c
  4316  0018EC  6E4A               	movwf	___fttol@exp1,c
  4317  0018EE  504A               	movf	___fttol@exp1,w,c
  4318  0018F0  A4D8               	btfss	status,2,c
  4319  0018F2  D009               	goto	l2722
  4320  0018F4  0E00               	movlw	0
  4321  0018F6  6E3C               	movwf	?___fttol,c
  4322  0018F8  0E00               	movlw	0
  4323  0018FA  6E3D               	movwf	?___fttol+1,c
  4324  0018FC  0E00               	movlw	0
  4325  0018FE  6E3E               	movwf	?___fttol+2,c
  4326  001900  0E00               	movlw	0
  4327  001902  6E3F               	movwf	?___fttol+3,c
  4328  001904  0012               	return	
  4329  001906                     l2722:
  4330  001906  0E17               	movlw	23
  4331  001908  6E40               	movwf	??___fttol& (0+255),c
  4332  00190A  C03C  F041         	movff	___fttol@f1,??___fttol+1
  4333  00190E  C03D  F042         	movff	___fttol@f1+1,??___fttol+2
  4334  001912  C03E  F043         	movff	___fttol@f1+2,??___fttol+3
  4335  001916  2840               	incf	??___fttol,w,c
  4336  001918  6E44               	movwf	(??___fttol+4)& (0+255),c
  4337  00191A  D004               	goto	u2710
  4338  00191C                     u2715:
  4339  00191C  90D8               	bcf	status,0,c
  4340  00191E  3243               	rrcf	??___fttol+3,f,c
  4341  001920  3242               	rrcf	??___fttol+2,f,c
  4342  001922  3241               	rrcf	??___fttol+1,f,c
  4343  001924                     u2710:
  4344  001924  2E44               	decfsz	(??___fttol+4)& (0+255),f,c
  4345  001926  D7FA               	goto	u2715
  4346  001928  5041               	movf	??___fttol+1,w,c
  4347  00192A  6E45               	movwf	___fttol@sign1,c
  4348  00192C  8E3D               	bsf	___fttol@f1+1,7,c
  4349  00192E  0EFF               	movlw	255
  4350  001930  163C               	andwf	___fttol@f1,f,c
  4351  001932  0EFF               	movlw	255
  4352  001934  163D               	andwf	___fttol@f1+1,f,c
  4353  001936  0E00               	movlw	0
  4354  001938  163E               	andwf	___fttol@f1+2,f,c
  4355  00193A  503C               	movf	___fttol@f1,w,c
  4356  00193C  6E46               	movwf	___fttol@lval,c
  4357  00193E  503D               	movf	___fttol@f1+1,w,c
  4358  001940  6E47               	movwf	___fttol@lval+1,c
  4359  001942  503E               	movf	___fttol@f1+2,w,c
  4360  001944  6E48               	movwf	___fttol@lval+2,c
  4361  001946  6A49               	clrf	___fttol@lval+3,c
  4362  001948  0E8E               	movlw	142
  4363  00194A  5E4A               	subwf	___fttol@exp1,f,c
  4364  00194C  AE4A               	btfss	___fttol@exp1,7,c
  4365  00194E  D016               	goto	l2744
  4366  001950  504A               	movf	___fttol@exp1,w,c
  4367  001952  0A80               	xorlw	128
  4368  001954  0F8F               	addlw	143
  4369  001956  B0D8               	btfsc	status,0,c
  4370  001958  D009               	goto	l2740
  4371  00195A  0E00               	movlw	0
  4372  00195C  6E3C               	movwf	?___fttol,c
  4373  00195E  0E00               	movlw	0
  4374  001960  6E3D               	movwf	?___fttol+1,c
  4375  001962  0E00               	movlw	0
  4376  001964  6E3E               	movwf	?___fttol+2,c
  4377  001966  0E00               	movlw	0
  4378  001968  6E3F               	movwf	?___fttol+3,c
  4379  00196A  0012               	return	
  4380  00196C                     l2740:
  4381  00196C  90D8               	bcf	status,0,c
  4382  00196E  3249               	rrcf	___fttol@lval+3,f,c
  4383  001970  3248               	rrcf	___fttol@lval+2,f,c
  4384  001972  3247               	rrcf	___fttol@lval+1,f,c
  4385  001974  3246               	rrcf	___fttol@lval,f,c
  4386  001976  3E4A               	incfsz	___fttol@exp1,f,c
  4387  001978  D7F9               	goto	l2740
  4388  00197A  D015               	goto	l2754
  4389  00197C                     l2744:
  4390  00197C  0E17               	movlw	23
  4391  00197E  644A               	cpfsgt	___fttol@exp1,c
  4392  001980  D00F               	goto	l2752
  4393  001982  0E00               	movlw	0
  4394  001984  6E3C               	movwf	?___fttol,c
  4395  001986  0E00               	movlw	0
  4396  001988  6E3D               	movwf	?___fttol+1,c
  4397  00198A  0E00               	movlw	0
  4398  00198C  6E3E               	movwf	?___fttol+2,c
  4399  00198E  0E00               	movlw	0
  4400  001990  6E3F               	movwf	?___fttol+3,c
  4401  001992  0012               	return	
  4402  001994                     l2750:
  4403  001994  90D8               	bcf	status,0,c
  4404  001996  3646               	rlcf	___fttol@lval,f,c
  4405  001998  3647               	rlcf	___fttol@lval+1,f,c
  4406  00199A  3648               	rlcf	___fttol@lval+2,f,c
  4407  00199C  3649               	rlcf	___fttol@lval+3,f,c
  4408  00199E  064A               	decf	___fttol@exp1,f,c
  4409  0019A0                     l2752:
  4410  0019A0  504A               	movf	___fttol@exp1,w,c
  4411  0019A2  A4D8               	btfss	status,2,c
  4412  0019A4  D7F7               	goto	l2750
  4413  0019A6                     l2754:
  4414  0019A6  5045               	movf	___fttol@sign1,w,c
  4415  0019A8  B4D8               	btfsc	status,2,c
  4416  0019AA  D008               	goto	l2758
  4417  0019AC  1E49               	comf	___fttol@lval+3,f,c
  4418  0019AE  1E48               	comf	___fttol@lval+2,f,c
  4419  0019B0  1E47               	comf	___fttol@lval+1,f,c
  4420  0019B2  6C46               	negf	___fttol@lval,c
  4421  0019B4  0E00               	movlw	0
  4422  0019B6  2247               	addwfc	___fttol@lval+1,f,c
  4423  0019B8  2248               	addwfc	___fttol@lval+2,f,c
  4424  0019BA  2249               	addwfc	___fttol@lval+3,f,c
  4425  0019BC                     l2758:
  4426  0019BC  C046  F03C         	movff	___fttol@lval,?___fttol
  4427  0019C0  C047  F03D         	movff	___fttol@lval+1,?___fttol+1
  4428  0019C4  C048  F03E         	movff	___fttol@lval+2,?___fttol+2
  4429  0019C8  C049  F03F         	movff	___fttol@lval+3,?___fttol+3
  4430  0019CC  0012               	return	
  4431  0019CE                     __end_of___fttol:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           intcon	equ	0xFF2
  4440                           postinc0	equ	0xFEE
  4441                           wreg	equ	0xFE8
  4442                           postdec1	equ	0xFE5
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function ___ftdiv *****************
  4452 ;; Defined at:
  4453 ;;		line 54 in file "/Applications/microchip/xc8/v1.36/sources/common/ftdiv.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  f1              3   44[COMRAM] float 
  4456 ;;  f2              3   47[COMRAM] float 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  f3              3   54[COMRAM] float 
  4459 ;;  sign            1   58[COMRAM] unsigned char 
  4460 ;;  exp             1   57[COMRAM] unsigned char 
  4461 ;;  cntr            1   53[COMRAM] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  3   44[COMRAM] float 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4471 ;;      Params:         6       0       0       0       0       0       0       0       0
  4472 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4473 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4474 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4475 ;;Total ram usage:       15 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		___ftpack
  4480 ;; This function is called by:
  4481 ;;		_fsm
  4482 ;;		_stepper_pulse
  4483 ;;		_buzz
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text21
  4488  001C9E                     __ptext21:
  4489                           	opt stack 0
  4490  001C9E                     ___ftdiv:
  4491                           	opt stack 25
  4492                           
  4493                           ;incstack = 0
  4494  001C9E  C02F  F033         	movff	___ftdiv@f1+2,??___ftdiv
  4495  001CA2  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  4496  001CA4  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  4497  001CA6  342E               	rlcf	___ftdiv@f1+1,w,c
  4498  001CA8  3633               	rlcf	??___ftdiv& (0+255),f,c
  4499  001CAA  E301               	bnc	u2641
  4500  001CAC  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  4501  001CAE                     u2641:
  4502  001CAE  5033               	movf	??___ftdiv,w,c
  4503  001CB0  6E3A               	movwf	___ftdiv@exp,c
  4504  001CB2  503A               	movf	___ftdiv@exp,w,c
  4505  001CB4  A4D8               	btfss	status,2,c
  4506  001CB6  D007               	goto	l2676
  4507  001CB8  0E00               	movlw	0
  4508  001CBA  6E2D               	movwf	?___ftdiv,c
  4509  001CBC  0E00               	movlw	0
  4510  001CBE  6E2E               	movwf	?___ftdiv+1,c
  4511  001CC0  0E00               	movlw	0
  4512  001CC2  6E2F               	movwf	?___ftdiv+2,c
  4513  001CC4  0012               	return	
  4514  001CC6                     l2676:
  4515  001CC6  C032  F033         	movff	___ftdiv@f2+2,??___ftdiv
  4516  001CCA  6A34               	clrf	(??___ftdiv+1)& (0+255),c
  4517  001CCC  6A35               	clrf	(??___ftdiv+2)& (0+255),c
  4518  001CCE  3431               	rlcf	___ftdiv@f2+1,w,c
  4519  001CD0  3633               	rlcf	??___ftdiv& (0+255),f,c
  4520  001CD2  E301               	bnc	u2661
  4521  001CD4  8034               	bsf	(??___ftdiv+1)& (0+255),0,c
  4522  001CD6                     u2661:
  4523  001CD6  5033               	movf	??___ftdiv,w,c
  4524  001CD8  6E3B               	movwf	___ftdiv@sign,c
  4525  001CDA  503B               	movf	___ftdiv@sign,w,c
  4526  001CDC  A4D8               	btfss	status,2,c
  4527  001CDE  D007               	goto	l2682
  4528  001CE0  0E00               	movlw	0
  4529  001CE2  6E2D               	movwf	?___ftdiv,c
  4530  001CE4  0E00               	movlw	0
  4531  001CE6  6E2E               	movwf	?___ftdiv+1,c
  4532  001CE8  0E00               	movlw	0
  4533  001CEA  6E2F               	movwf	?___ftdiv+2,c
  4534  001CEC  0012               	return	
  4535  001CEE                     l2682:
  4536  001CEE  0E00               	movlw	0
  4537  001CF0  6E37               	movwf	___ftdiv@f3,c
  4538  001CF2  0E00               	movlw	0
  4539  001CF4  6E38               	movwf	___ftdiv@f3+1,c
  4540  001CF6  0E00               	movlw	0
  4541  001CF8  6E39               	movwf	___ftdiv@f3+2,c
  4542  001CFA  503B               	movf	___ftdiv@sign,w,c
  4543  001CFC  0F89               	addlw	137
  4544  001CFE  5E3A               	subwf	___ftdiv@exp,f,c
  4545  001D00  C02F  F03B         	movff	___ftdiv@f1+2,___ftdiv@sign
  4546  001D04  5032               	movf	___ftdiv@f2+2,w,c
  4547  001D06  1A3B               	xorwf	___ftdiv@sign,f,c
  4548  001D08  0E80               	movlw	128
  4549  001D0A  163B               	andwf	___ftdiv@sign,f,c
  4550  001D0C  8E2E               	bsf	___ftdiv@f1+1,7,c
  4551  001D0E  0EFF               	movlw	255
  4552  001D10  162D               	andwf	___ftdiv@f1,f,c
  4553  001D12  0EFF               	movlw	255
  4554  001D14  162E               	andwf	___ftdiv@f1+1,f,c
  4555  001D16  0E00               	movlw	0
  4556  001D18  162F               	andwf	___ftdiv@f1+2,f,c
  4557  001D1A  8E31               	bsf	___ftdiv@f2+1,7,c
  4558  001D1C  0EFF               	movlw	255
  4559  001D1E  1630               	andwf	___ftdiv@f2,f,c
  4560  001D20  0EFF               	movlw	255
  4561  001D22  1631               	andwf	___ftdiv@f2+1,f,c
  4562  001D24  0E00               	movlw	0
  4563  001D26  1632               	andwf	___ftdiv@f2+2,f,c
  4564  001D28  0E18               	movlw	24
  4565  001D2A  6E36               	movwf	___ftdiv@cntr,c
  4566  001D2C                     l2702:
  4567  001D2C  90D8               	bcf	status,0,c
  4568  001D2E  3637               	rlcf	___ftdiv@f3,f,c
  4569  001D30  3638               	rlcf	___ftdiv@f3+1,f,c
  4570  001D32  3639               	rlcf	___ftdiv@f3+2,f,c
  4571  001D34  5030               	movf	___ftdiv@f2,w,c
  4572  001D36  5C2D               	subwf	___ftdiv@f1,w,c
  4573  001D38  5031               	movf	___ftdiv@f2+1,w,c
  4574  001D3A  582E               	subwfb	___ftdiv@f1+1,w,c
  4575  001D3C  5032               	movf	___ftdiv@f2+2,w,c
  4576  001D3E  582F               	subwfb	___ftdiv@f1+2,w,c
  4577  001D40  A0D8               	btfss	status,0,c
  4578  001D42  D007               	goto	l577
  4579  001D44  5030               	movf	___ftdiv@f2,w,c
  4580  001D46  5E2D               	subwf	___ftdiv@f1,f,c
  4581  001D48  5031               	movf	___ftdiv@f2+1,w,c
  4582  001D4A  5A2E               	subwfb	___ftdiv@f1+1,f,c
  4583  001D4C  5032               	movf	___ftdiv@f2+2,w,c
  4584  001D4E  5A2F               	subwfb	___ftdiv@f1+2,f,c
  4585  001D50  8037               	bsf	___ftdiv@f3,0,c
  4586  001D52                     l577:
  4587  001D52  90D8               	bcf	status,0,c
  4588  001D54  362D               	rlcf	___ftdiv@f1,f,c
  4589  001D56  362E               	rlcf	___ftdiv@f1+1,f,c
  4590  001D58  362F               	rlcf	___ftdiv@f1+2,f,c
  4591  001D5A  2E36               	decfsz	___ftdiv@cntr,f,c
  4592  001D5C  D7E7               	goto	l2702
  4593  001D5E  C037  F00F         	movff	___ftdiv@f3,___ftpack@arg
  4594  001D62  C038  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4595  001D66  C039  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4596  001D6A  C03A  F012         	movff	___ftdiv@exp,___ftpack@exp
  4597  001D6E  C03B  F013         	movff	___ftdiv@sign,___ftpack@sign
  4598  001D72  EC3F  F010         	call	___ftpack	;wreg free
  4599  001D76  C00F  F02D         	movff	?___ftpack,?___ftdiv
  4600  001D7A  C010  F02E         	movff	?___ftpack+1,?___ftdiv+1
  4601  001D7E  C011  F02F         	movff	?___ftpack+2,?___ftdiv+2
  4602  001D82  0012               	return	
  4603  001D84                     __end_of___ftdiv:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           intcon	equ	0xFF2
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1l	equ	0xFE1
  4616                           indf2	equ	0xFDF
  4617                           postinc2	equ	0xFDE
  4618                           postdec2	equ	0xFDD
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function ___altoft *****************
  4624 ;; Defined at:
  4625 ;;		line 42 in file "/Applications/microchip/xc8/v1.36/sources/common/altoft.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  c               4   22[COMRAM] long 
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;  sign            1   31[COMRAM] unsigned char 
  4630 ;;  exp             1   30[COMRAM] unsigned char 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  3   22[COMRAM] float 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4640 ;;      Params:         4       0       0       0       0       0       0       0       0
  4641 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4642 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4643 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4644 ;;Total ram usage:       10 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    2
  4647 ;; This function calls:
  4648 ;;		___ftpack
  4649 ;; This function is called by:
  4650 ;;		_buzz
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text22
  4655  002376                     __ptext22:
  4656                           	opt stack 0
  4657  002376                     ___altoft:
  4658                           	opt stack 25
  4659                           
  4660                           ;incstack = 0
  4661  002376  0E00               	movlw	0
  4662  002378  6E20               	movwf	___altoft@sign,c
  4663  00237A  0E8E               	movlw	142
  4664  00237C  6E1F               	movwf	___altoft@exp,c
  4665  00237E  AE1A               	btfss	___altoft@c+3,7,c
  4666  002380  D011               	goto	l2664
  4667  002382  1E1A               	comf	___altoft@c+3,f,c
  4668  002384  1E19               	comf	___altoft@c+2,f,c
  4669  002386  1E18               	comf	___altoft@c+1,f,c
  4670  002388  6C17               	negf	___altoft@c,c
  4671  00238A  0E00               	movlw	0
  4672  00238C  2218               	addwfc	___altoft@c+1,f,c
  4673  00238E  2219               	addwfc	___altoft@c+2,f,c
  4674  002390  221A               	addwfc	___altoft@c+3,f,c
  4675  002392  0E01               	movlw	1
  4676  002394  6E20               	movwf	___altoft@sign,c
  4677  002396  D006               	goto	l2664
  4678  002398                     l2662:
  4679  002398  90D8               	bcf	status,0,c
  4680  00239A  321A               	rrcf	___altoft@c+3,f,c
  4681  00239C  3219               	rrcf	___altoft@c+2,f,c
  4682  00239E  3218               	rrcf	___altoft@c+1,f,c
  4683  0023A0  3217               	rrcf	___altoft@c,f,c
  4684  0023A2  2A1F               	incf	___altoft@exp,f,c
  4685  0023A4                     l2664:
  4686  0023A4  0E00               	movlw	0
  4687  0023A6  1417               	andwf	___altoft@c,w,c
  4688  0023A8  6E1B               	movwf	??___altoft& (0+255),c
  4689  0023AA  0E00               	movlw	0
  4690  0023AC  1418               	andwf	___altoft@c+1,w,c
  4691  0023AE  6E1C               	movwf	(??___altoft+1)& (0+255),c
  4692  0023B0  0E00               	movlw	0
  4693  0023B2  1419               	andwf	___altoft@c+2,w,c
  4694  0023B4  6E1D               	movwf	(??___altoft+2)& (0+255),c
  4695  0023B6  0EFF               	movlw	255
  4696  0023B8  141A               	andwf	___altoft@c+3,w,c
  4697  0023BA  6E1E               	movwf	(??___altoft+3)& (0+255),c
  4698  0023BC  501B               	movf	??___altoft,w,c
  4699  0023BE  101C               	iorwf	??___altoft+1,w,c
  4700  0023C0  101D               	iorwf	??___altoft+2,w,c
  4701  0023C2  101E               	iorwf	??___altoft+3,w,c
  4702  0023C4  A4D8               	btfss	status,2,c
  4703  0023C6  D7E8               	goto	l2662
  4704  0023C8  C017  F00F         	movff	___altoft@c,___ftpack@arg
  4705  0023CC  C018  F010         	movff	___altoft@c+1,___ftpack@arg+1
  4706  0023D0  C019  F011         	movff	___altoft@c+2,___ftpack@arg+2
  4707  0023D4  C01F  F012         	movff	___altoft@exp,___ftpack@exp
  4708  0023D8  C020  F013         	movff	___altoft@sign,___ftpack@sign
  4709  0023DC  EC3F  F010         	call	___ftpack	;wreg free
  4710  0023E0  C00F  F017         	movff	?___ftpack,?___altoft
  4711  0023E4  C010  F018         	movff	?___ftpack+1,?___altoft+1
  4712  0023E8  C011  F019         	movff	?___ftpack+2,?___altoft+2
  4713  0023EC  0012               	return	
  4714  0023EE                     __end_of___altoft:
  4715                           	opt stack 0
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           intcon	equ	0xFF2
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           postdec1	equ	0xFE5
  4726                           fsr1l	equ	0xFE1
  4727                           indf2	equ	0xFDF
  4728                           postinc2	equ	0xFDE
  4729                           postdec2	equ	0xFDD
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function ___aldiv *****************
  4735 ;; Defined at:
  4736 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/aldiv.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  dividend        4   26[COMRAM] long 
  4739 ;;  divisor         4   30[COMRAM] long 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  quotient        4   36[COMRAM] long 
  4742 ;;  sign            1   35[COMRAM] unsigned char 
  4743 ;;  counter         1   34[COMRAM] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  4   26[COMRAM] long 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4753 ;;      Params:         8       0       0       0       0       0       0       0       0
  4754 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4756 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4757 ;;Total ram usage:       14 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    1
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_buzz
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text23
  4768  001D84                     __ptext23:
  4769                           	opt stack 0
  4770  001D84                     ___aldiv:
  4771                           	opt stack 26
  4772                           
  4773                           ;incstack = 0
  4774  001D84  0E00               	movlw	0
  4775  001D86  6E24               	movwf	___aldiv@sign,c
  4776  001D88  AE22               	btfss	___aldiv@divisor+3,7,c
  4777  001D8A  D00A               	goto	l2618
  4778  001D8C  1E22               	comf	___aldiv@divisor+3,f,c
  4779  001D8E  1E21               	comf	___aldiv@divisor+2,f,c
  4780  001D90  1E20               	comf	___aldiv@divisor+1,f,c
  4781  001D92  6C1F               	negf	___aldiv@divisor,c
  4782  001D94  0E00               	movlw	0
  4783  001D96  2220               	addwfc	___aldiv@divisor+1,f,c
  4784  001D98  2221               	addwfc	___aldiv@divisor+2,f,c
  4785  001D9A  2222               	addwfc	___aldiv@divisor+3,f,c
  4786  001D9C  0E01               	movlw	1
  4787  001D9E  6E24               	movwf	___aldiv@sign,c
  4788  001DA0                     l2618:
  4789  001DA0  AE1E               	btfss	___aldiv@dividend+3,7,c
  4790  001DA2  D00A               	goto	l2624
  4791  001DA4  1E1E               	comf	___aldiv@dividend+3,f,c
  4792  001DA6  1E1D               	comf	___aldiv@dividend+2,f,c
  4793  001DA8  1E1C               	comf	___aldiv@dividend+1,f,c
  4794  001DAA  6C1B               	negf	___aldiv@dividend,c
  4795  001DAC  0E00               	movlw	0
  4796  001DAE  221C               	addwfc	___aldiv@dividend+1,f,c
  4797  001DB0  221D               	addwfc	___aldiv@dividend+2,f,c
  4798  001DB2  221E               	addwfc	___aldiv@dividend+3,f,c
  4799  001DB4  0E01               	movlw	1
  4800  001DB6  1A24               	xorwf	___aldiv@sign,f,c
  4801  001DB8                     l2624:
  4802  001DB8  0E00               	movlw	0
  4803  001DBA  6E25               	movwf	___aldiv@quotient,c
  4804  001DBC  0E00               	movlw	0
  4805  001DBE  6E26               	movwf	___aldiv@quotient+1,c
  4806  001DC0  0E00               	movlw	0
  4807  001DC2  6E27               	movwf	___aldiv@quotient+2,c
  4808  001DC4  0E00               	movlw	0
  4809  001DC6  6E28               	movwf	___aldiv@quotient+3,c
  4810  001DC8  501F               	movf	___aldiv@divisor,w,c
  4811  001DCA  1020               	iorwf	___aldiv@divisor+1,w,c
  4812  001DCC  1021               	iorwf	___aldiv@divisor+2,w,c
  4813  001DCE  1022               	iorwf	___aldiv@divisor+3,w,c
  4814  001DD0  B4D8               	btfsc	status,2,c
  4815  001DD2  D02A               	goto	l2646
  4816  001DD4  0E01               	movlw	1
  4817  001DD6  6E23               	movwf	___aldiv@counter,c
  4818  001DD8  D006               	goto	l2632
  4819  001DDA                     l2630:
  4820  001DDA  90D8               	bcf	status,0,c
  4821  001DDC  361F               	rlcf	___aldiv@divisor,f,c
  4822  001DDE  3620               	rlcf	___aldiv@divisor+1,f,c
  4823  001DE0  3621               	rlcf	___aldiv@divisor+2,f,c
  4824  001DE2  3622               	rlcf	___aldiv@divisor+3,f,c
  4825  001DE4  2A23               	incf	___aldiv@counter,f,c
  4826  001DE6                     l2632:
  4827  001DE6  AE22               	btfss	___aldiv@divisor+3,7,c
  4828  001DE8  D7F8               	goto	l2630
  4829  001DEA                     l2634:
  4830  001DEA  90D8               	bcf	status,0,c
  4831  001DEC  3625               	rlcf	___aldiv@quotient,f,c
  4832  001DEE  3626               	rlcf	___aldiv@quotient+1,f,c
  4833  001DF0  3627               	rlcf	___aldiv@quotient+2,f,c
  4834  001DF2  3628               	rlcf	___aldiv@quotient+3,f,c
  4835  001DF4  501F               	movf	___aldiv@divisor,w,c
  4836  001DF6  5C1B               	subwf	___aldiv@dividend,w,c
  4837  001DF8  5020               	movf	___aldiv@divisor+1,w,c
  4838  001DFA  581C               	subwfb	___aldiv@dividend+1,w,c
  4839  001DFC  5021               	movf	___aldiv@divisor+2,w,c
  4840  001DFE  581D               	subwfb	___aldiv@dividend+2,w,c
  4841  001E00  5022               	movf	___aldiv@divisor+3,w,c
  4842  001E02  581E               	subwfb	___aldiv@dividend+3,w,c
  4843  001E04  A0D8               	btfss	status,0,c
  4844  001E06  D009               	goto	l2642
  4845  001E08  501F               	movf	___aldiv@divisor,w,c
  4846  001E0A  5E1B               	subwf	___aldiv@dividend,f,c
  4847  001E0C  5020               	movf	___aldiv@divisor+1,w,c
  4848  001E0E  5A1C               	subwfb	___aldiv@dividend+1,f,c
  4849  001E10  5021               	movf	___aldiv@divisor+2,w,c
  4850  001E12  5A1D               	subwfb	___aldiv@dividend+2,f,c
  4851  001E14  5022               	movf	___aldiv@divisor+3,w,c
  4852  001E16  5A1E               	subwfb	___aldiv@dividend+3,f,c
  4853  001E18  8025               	bsf	___aldiv@quotient,0,c
  4854  001E1A                     l2642:
  4855  001E1A  90D8               	bcf	status,0,c
  4856  001E1C  3222               	rrcf	___aldiv@divisor+3,f,c
  4857  001E1E  3221               	rrcf	___aldiv@divisor+2,f,c
  4858  001E20  3220               	rrcf	___aldiv@divisor+1,f,c
  4859  001E22  321F               	rrcf	___aldiv@divisor,f,c
  4860  001E24  2E23               	decfsz	___aldiv@counter,f,c
  4861  001E26  D7E1               	goto	l2634
  4862  001E28                     l2646:
  4863  001E28  5024               	movf	___aldiv@sign,w,c
  4864  001E2A  B4D8               	btfsc	status,2,c
  4865  001E2C  D008               	goto	l2650
  4866  001E2E  1E28               	comf	___aldiv@quotient+3,f,c
  4867  001E30  1E27               	comf	___aldiv@quotient+2,f,c
  4868  001E32  1E26               	comf	___aldiv@quotient+1,f,c
  4869  001E34  6C25               	negf	___aldiv@quotient,c
  4870  001E36  0E00               	movlw	0
  4871  001E38  2226               	addwfc	___aldiv@quotient+1,f,c
  4872  001E3A  2227               	addwfc	___aldiv@quotient+2,f,c
  4873  001E3C  2228               	addwfc	___aldiv@quotient+3,f,c
  4874  001E3E                     l2650:
  4875  001E3E  C025  F01B         	movff	___aldiv@quotient,?___aldiv
  4876  001E42  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
  4877  001E46  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
  4878  001E4A  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
  4879  001E4E  0012               	return	
  4880  001E50                     __end_of___aldiv:
  4881                           	opt stack 0
  4882                           tblptru	equ	0xFF8
  4883                           tblptrh	equ	0xFF7
  4884                           tblptrl	equ	0xFF6
  4885                           tablat	equ	0xFF5
  4886                           prodh	equ	0xFF4
  4887                           prodl	equ	0xFF3
  4888                           intcon	equ	0xFF2
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function ___wmul *****************
  4901 ;; Defined at:
  4902 ;;		line 15 in file "/Applications/microchip/xc8/v1.36/sources/common/Umul16.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  multiplier      2   34[COMRAM] unsigned int 
  4905 ;;  multiplicand    2   36[COMRAM] unsigned int 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  product         2   38[COMRAM] unsigned int 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  2   34[COMRAM] unsigned int 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, prodl, prodh
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4917 ;;      Params:         4       0       0       0       0       0       0       0       0
  4918 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4920 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4921 ;;Total ram usage:        6 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    1
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_fsm
  4928 ;;		_nothingElseMatters
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           	psect	text24
  4933  0027A0                     __ptext24:
  4934                           	opt stack 0
  4935  0027A0                     ___wmul:
  4936                           	opt stack 27
  4937                           
  4938                           ;incstack = 0
  4939  0027A0  5023               	movf	___wmul@multiplier,w,c
  4940  0027A2  0225               	mulwf	___wmul@multiplicand,c
  4941  0027A4  CFF3 F027          	movff	prodl,___wmul@product
  4942  0027A8  CFF4 F028          	movff	prodh,___wmul@product+1
  4943  0027AC  5023               	movf	___wmul@multiplier,w,c
  4944  0027AE  0226               	mulwf	___wmul@multiplicand+1,c
  4945  0027B0  50F3               	movf	prodl,w,c
  4946  0027B2  2628               	addwf	___wmul@product+1,f,c
  4947  0027B4  5024               	movf	___wmul@multiplier+1,w,c
  4948  0027B6  0225               	mulwf	___wmul@multiplicand,c
  4949  0027B8  50F3               	movf	prodl,w,c
  4950  0027BA  2628               	addwf	___wmul@product+1,f,c
  4951  0027BC  C027  F023         	movff	___wmul@product,?___wmul
  4952  0027C0  C028  F024         	movff	___wmul@product+1,?___wmul+1
  4953  0027C4  0012               	return	
  4954  0027C6                     __end_of___wmul:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           postinc0	equ	0xFEE
  4964                           wreg	equ	0xFE8
  4965                           postdec1	equ	0xFE5
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           postinc2	equ	0xFDE
  4969                           postdec2	equ	0xFDD
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function ___lbtoft *****************
  4975 ;; Defined at:
  4976 ;;		line 27 in file "/Applications/microchip/xc8/v1.36/sources/common/lbtoft.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  c               1    wreg     unsigned char 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  c               1   25[COMRAM] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  3   22[COMRAM] float 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4990 ;;      Params:         3       0       0       0       0       0       0       0       0
  4991 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4993 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4994 ;;Total ram usage:        4 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    2
  4997 ;; This function calls:
  4998 ;;		___ftpack
  4999 ;; This function is called by:
  5000 ;;		_fsm
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text25
  5005  0027EA                     __ptext25:
  5006                           	opt stack 0
  5007  0027EA                     ___lbtoft:
  5008                           	opt stack 27
  5009                           
  5010                           ;incstack = 0
  5011                           ;___lbtoft@c stored from wreg
  5012  0027EA  6E1A               	movwf	___lbtoft@c,c
  5013  0027EC  501A               	movf	___lbtoft@c,w,c
  5014  0027EE  6E0F               	movwf	___ftpack@arg,c
  5015  0027F0  6A10               	clrf	___ftpack@arg+1,c
  5016  0027F2  6A11               	clrf	___ftpack@arg+2,c
  5017  0027F4  0E8E               	movlw	142
  5018  0027F6  6E12               	movwf	___ftpack@exp,c
  5019  0027F8  0E00               	movlw	0
  5020  0027FA  6E13               	movwf	___ftpack@sign,c
  5021  0027FC  EC3F  F010         	call	___ftpack	;wreg free
  5022  002800  C00F  F017         	movff	?___ftpack,?___lbtoft
  5023  002804  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  5024  002808  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  5025  00280C  0012               	return	
  5026  00280E                     __end_of___lbtoft:
  5027                           	opt stack 0
  5028                           tblptru	equ	0xFF8
  5029                           tblptrh	equ	0xFF7
  5030                           tblptrl	equ	0xFF6
  5031                           tablat	equ	0xFF5
  5032                           prodh	equ	0xFF4
  5033                           prodl	equ	0xFF3
  5034                           intcon	equ	0xFF2
  5035                           postinc0	equ	0xFEE
  5036                           wreg	equ	0xFE8
  5037                           postdec1	equ	0xFE5
  5038                           fsr1l	equ	0xFE1
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           postdec2	equ	0xFDD
  5042                           fsr2h	equ	0xFDA
  5043                           fsr2l	equ	0xFD9
  5044                           status	equ	0xFD8
  5045                           
  5046 ;; *************** function ___ftmul *****************
  5047 ;; Defined at:
  5048 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/ftmul.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  f1              3   44[COMRAM] float 
  5051 ;;  f2              3   47[COMRAM] float 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  f3_as_produc    3   54[COMRAM] unsigned um
  5054 ;;  sign            1   58[COMRAM] unsigned char 
  5055 ;;  cntr            1   57[COMRAM] unsigned char 
  5056 ;;  exp             1   53[COMRAM] unsigned char 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  3   44[COMRAM] float 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5066 ;;      Params:         6       0       0       0       0       0       0       0       0
  5067 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5068 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5069 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5070 ;;Total ram usage:       15 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    2
  5073 ;; This function calls:
  5074 ;;		___ftpack
  5075 ;; This function is called by:
  5076 ;;		_fsm
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text26
  5081  0019CE                     __ptext26:
  5082                           	opt stack 0
  5083  0019CE                     ___ftmul:
  5084                           	opt stack 27
  5085                           
  5086                           ;incstack = 0
  5087  0019CE  C02F  F033         	movff	___ftmul@f1+2,??___ftmul
  5088  0019D2  6A34               	clrf	(??___ftmul+1)& (0+255),c
  5089  0019D4  6A35               	clrf	(??___ftmul+2)& (0+255),c
  5090  0019D6  342E               	rlcf	___ftmul@f1+1,w,c
  5091  0019D8  3633               	rlcf	??___ftmul& (0+255),f,c
  5092  0019DA  E301               	bnc	u3141
  5093  0019DC  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  5094  0019DE                     u3141:
  5095  0019DE  5033               	movf	??___ftmul,w,c
  5096  0019E0  6E36               	movwf	___ftmul@exp,c
  5097  0019E2  5036               	movf	___ftmul@exp,w,c
  5098  0019E4  A4D8               	btfss	status,2,c
  5099  0019E6  D007               	goto	l2972
  5100  0019E8  0E00               	movlw	0
  5101  0019EA  6E2D               	movwf	?___ftmul,c
  5102  0019EC  0E00               	movlw	0
  5103  0019EE  6E2E               	movwf	?___ftmul+1,c
  5104  0019F0  0E00               	movlw	0
  5105  0019F2  6E2F               	movwf	?___ftmul+2,c
  5106  0019F4  0012               	return	
  5107  0019F6                     l2972:
  5108  0019F6  C032  F033         	movff	___ftmul@f2+2,??___ftmul
  5109  0019FA  6A34               	clrf	(??___ftmul+1)& (0+255),c
  5110  0019FC  6A35               	clrf	(??___ftmul+2)& (0+255),c
  5111  0019FE  3431               	rlcf	___ftmul@f2+1,w,c
  5112  001A00  3633               	rlcf	??___ftmul& (0+255),f,c
  5113  001A02  E301               	bnc	u3161
  5114  001A04  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  5115  001A06                     u3161:
  5116  001A06  5033               	movf	??___ftmul,w,c
  5117  001A08  6E3B               	movwf	___ftmul@sign,c
  5118  001A0A  503B               	movf	___ftmul@sign,w,c
  5119  001A0C  A4D8               	btfss	status,2,c
  5120  001A0E  D007               	goto	l2978
  5121  001A10  0E00               	movlw	0
  5122  001A12  6E2D               	movwf	?___ftmul,c
  5123  001A14  0E00               	movlw	0
  5124  001A16  6E2E               	movwf	?___ftmul+1,c
  5125  001A18  0E00               	movlw	0
  5126  001A1A  6E2F               	movwf	?___ftmul+2,c
  5127  001A1C  0012               	return	
  5128  001A1E                     l2978:
  5129  001A1E  503B               	movf	___ftmul@sign,w,c
  5130  001A20  0F7B               	addlw	123
  5131  001A22  2636               	addwf	___ftmul@exp,f,c
  5132  001A24  C02F  F03B         	movff	___ftmul@f1+2,___ftmul@sign
  5133  001A28  5032               	movf	___ftmul@f2+2,w,c
  5134  001A2A  1A3B               	xorwf	___ftmul@sign,f,c
  5135  001A2C  0E80               	movlw	128
  5136  001A2E  163B               	andwf	___ftmul@sign,f,c
  5137  001A30  8E2E               	bsf	___ftmul@f1+1,7,c
  5138  001A32  8E31               	bsf	___ftmul@f2+1,7,c
  5139  001A34  0EFF               	movlw	255
  5140  001A36  1630               	andwf	___ftmul@f2,f,c
  5141  001A38  0EFF               	movlw	255
  5142  001A3A  1631               	andwf	___ftmul@f2+1,f,c
  5143  001A3C  0E00               	movlw	0
  5144  001A3E  1632               	andwf	___ftmul@f2+2,f,c
  5145  001A40  0E00               	movlw	0
  5146  001A42  6E37               	movwf	___ftmul@f3_as_product,c
  5147  001A44  0E00               	movlw	0
  5148  001A46  6E38               	movwf	___ftmul@f3_as_product+1,c
  5149  001A48  0E00               	movlw	0
  5150  001A4A  6E39               	movwf	___ftmul@f3_as_product+2,c
  5151  001A4C  0E07               	movlw	7
  5152  001A4E  6E3A               	movwf	___ftmul@cntr,c
  5153  001A50                     l2992:
  5154  001A50  A02D               	btfss	___ftmul@f1,0,c
  5155  001A52  D006               	goto	l2996
  5156  001A54  5030               	movf	___ftmul@f2,w,c
  5157  001A56  2637               	addwf	___ftmul@f3_as_product,f,c
  5158  001A58  5031               	movf	___ftmul@f2+1,w,c
  5159  001A5A  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  5160  001A5C  5032               	movf	___ftmul@f2+2,w,c
  5161  001A5E  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  5162  001A60                     l2996:
  5163  001A60  90D8               	bcf	status,0,c
  5164  001A62  322F               	rrcf	___ftmul@f1+2,f,c
  5165  001A64  322E               	rrcf	___ftmul@f1+1,f,c
  5166  001A66  322D               	rrcf	___ftmul@f1,f,c
  5167  001A68  90D8               	bcf	status,0,c
  5168  001A6A  3630               	rlcf	___ftmul@f2,f,c
  5169  001A6C  3631               	rlcf	___ftmul@f2+1,f,c
  5170  001A6E  3632               	rlcf	___ftmul@f2+2,f,c
  5171  001A70  2E3A               	decfsz	___ftmul@cntr,f,c
  5172  001A72  D7EE               	goto	l2992
  5173  001A74  0E09               	movlw	9
  5174  001A76  6E3A               	movwf	___ftmul@cntr,c
  5175  001A78                     l3002:
  5176  001A78  A02D               	btfss	___ftmul@f1,0,c
  5177  001A7A  D006               	goto	l3006
  5178  001A7C  5030               	movf	___ftmul@f2,w,c
  5179  001A7E  2637               	addwf	___ftmul@f3_as_product,f,c
  5180  001A80  5031               	movf	___ftmul@f2+1,w,c
  5181  001A82  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  5182  001A84  5032               	movf	___ftmul@f2+2,w,c
  5183  001A86  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  5184  001A88                     l3006:
  5185  001A88  90D8               	bcf	status,0,c
  5186  001A8A  322F               	rrcf	___ftmul@f1+2,f,c
  5187  001A8C  322E               	rrcf	___ftmul@f1+1,f,c
  5188  001A8E  322D               	rrcf	___ftmul@f1,f,c
  5189  001A90  90D8               	bcf	status,0,c
  5190  001A92  3239               	rrcf	___ftmul@f3_as_product+2,f,c
  5191  001A94  3238               	rrcf	___ftmul@f3_as_product+1,f,c
  5192  001A96  3237               	rrcf	___ftmul@f3_as_product,f,c
  5193  001A98  2E3A               	decfsz	___ftmul@cntr,f,c
  5194  001A9A  D7EE               	goto	l3002
  5195  001A9C  C037  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  5196  001AA0  C038  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5197  001AA4  C039  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5198  001AA8  C036  F012         	movff	___ftmul@exp,___ftpack@exp
  5199  001AAC  C03B  F013         	movff	___ftmul@sign,___ftpack@sign
  5200  001AB0  EC3F  F010         	call	___ftpack	;wreg free
  5201  001AB4  C00F  F02D         	movff	?___ftpack,?___ftmul
  5202  001AB8  C010  F02E         	movff	?___ftpack+1,?___ftmul+1
  5203  001ABC  C011  F02F         	movff	?___ftpack+2,?___ftmul+2
  5204  001AC0  0012               	return	
  5205  001AC2                     __end_of___ftmul:
  5206                           	opt stack 0
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon	equ	0xFF2
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           postdec1	equ	0xFE5
  5217                           fsr1l	equ	0xFE1
  5218                           indf2	equ	0xFDF
  5219                           postinc2	equ	0xFDE
  5220                           postdec2	equ	0xFDD
  5221                           fsr2h	equ	0xFDA
  5222                           fsr2l	equ	0xFD9
  5223                           status	equ	0xFD8
  5224                           
  5225 ;; *************** function ___ftge *****************
  5226 ;; Defined at:
  5227 ;;		line 4 in file "/Applications/microchip/xc8/v1.36/sources/common/ftge.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  ff1             3    0[BANK0 ] float 
  5230 ;;  ff2             3    3[BANK0 ] float 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;		None
  5233 ;; Return value:  Size  Location     Type
  5234 ;;		None               void
  5235 ;; Registers used:
  5236 ;;		wreg, status,2, status,0
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5242 ;;      Params:         0       6       0       0       0       0       0       0       0
  5243 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5244 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5245 ;;      Totals:         3       6       0       0       0       0       0       0       0
  5246 ;;Total ram usage:        9 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    1
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_fsm
  5253 ;; This function uses a non-reentrant model
  5254 ;;
  5255                           
  5256                           	psect	text27
  5257  001F14                     __ptext27:
  5258                           	opt stack 0
  5259  001F14                     ___ftge:
  5260                           	opt stack 28
  5261                           
  5262                           ;incstack = 0
  5263  001F14  0100               	movlb	0	; () banked
  5264  001F16  AFDE               	btfss	(___ftge@ff1+2)& (0+255),7,b
  5265  001F18  D019               	goto	l3066
  5266                           
  5267                           ; BSR set to: 0
  5268  001F1A  C0DC  F048         	movff	___ftge@ff1,??___ftge
  5269  001F1E  C0DD  F049         	movff	___ftge@ff1+1,??___ftge+1
  5270  001F22  C0DE  F04A         	movff	___ftge@ff1+2,??___ftge+2
  5271  001F26  1E48               	comf	??___ftge,f,c
  5272  001F28  1E49               	comf	??___ftge+1,f,c
  5273  001F2A  1E4A               	comf	??___ftge+2,f,c
  5274  001F2C  2A48               	incf	??___ftge,f,c
  5275  001F2E  0E00               	movlw	0
  5276  001F30  2249               	addwfc	??___ftge+1,f,c
  5277  001F32  224A               	addwfc	??___ftge+2,f,c
  5278  001F34  0E00               	movlw	0
  5279  001F36  2448               	addwf	??___ftge,w,c
  5280  001F38  0100               	movlb	0	; () banked
  5281  001F3A  6FDC               	movwf	___ftge@ff1& (0+255),b
  5282  001F3C  0E00               	movlw	0
  5283  001F3E  2049               	addwfc	??___ftge+1,w,c
  5284  001F40  0100               	movlb	0	; () banked
  5285  001F42  6FDD               	movwf	(___ftge@ff1+1)& (0+255),b
  5286  001F44  0E80               	movlw	128
  5287  001F46  204A               	addwfc	??___ftge+2,w,c
  5288  001F48  0100               	movlb	0	; () banked
  5289  001F4A  6FDE               	movwf	(___ftge@ff1+2)& (0+255),b
  5290  001F4C                     l3066:
  5291                           
  5292                           ; BSR set to: 0
  5293  001F4C  0100               	movlb	0	; () banked
  5294  001F4E  AFE1               	btfss	(___ftge@ff2+2)& (0+255),7,b
  5295  001F50  D019               	goto	l3070
  5296                           
  5297                           ; BSR set to: 0
  5298  001F52  C0DF  F048         	movff	___ftge@ff2,??___ftge
  5299  001F56  C0E0  F049         	movff	___ftge@ff2+1,??___ftge+1
  5300  001F5A  C0E1  F04A         	movff	___ftge@ff2+2,??___ftge+2
  5301  001F5E  1E48               	comf	??___ftge,f,c
  5302  001F60  1E49               	comf	??___ftge+1,f,c
  5303  001F62  1E4A               	comf	??___ftge+2,f,c
  5304  001F64  2A48               	incf	??___ftge,f,c
  5305  001F66  0E00               	movlw	0
  5306  001F68  2249               	addwfc	??___ftge+1,f,c
  5307  001F6A  224A               	addwfc	??___ftge+2,f,c
  5308  001F6C  0E00               	movlw	0
  5309  001F6E  2448               	addwf	??___ftge,w,c
  5310  001F70  0100               	movlb	0	; () banked
  5311  001F72  6FDF               	movwf	___ftge@ff2& (0+255),b
  5312  001F74  0E00               	movlw	0
  5313  001F76  2049               	addwfc	??___ftge+1,w,c
  5314  001F78  0100               	movlb	0	; () banked
  5315  001F7A  6FE0               	movwf	(___ftge@ff2+1)& (0+255),b
  5316  001F7C  0E80               	movlw	128
  5317  001F7E  204A               	addwfc	??___ftge+2,w,c
  5318  001F80  0100               	movlb	0	; () banked
  5319  001F82  6FE1               	movwf	(___ftge@ff2+2)& (0+255),b
  5320  001F84                     l3070:
  5321                           
  5322                           ; BSR set to: 0
  5323  001F84  0E00               	movlw	0
  5324  001F86  0100               	movlb	0	; () banked
  5325  001F88  1BDC               	xorwf	___ftge@ff1& (0+255),f,b
  5326  001F8A  0E00               	movlw	0
  5327  001F8C  0100               	movlb	0	; () banked
  5328  001F8E  1BDD               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  5329  001F90  0E80               	movlw	128
  5330  001F92  0100               	movlb	0	; () banked
  5331  001F94  1BDE               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  5332                           
  5333                           ; BSR set to: 0
  5334  001F96  0E00               	movlw	0
  5335  001F98  0100               	movlb	0	; () banked
  5336  001F9A  1BDF               	xorwf	___ftge@ff2& (0+255),f,b
  5337  001F9C  0E00               	movlw	0
  5338  001F9E  0100               	movlb	0	; () banked
  5339  001FA0  1BE0               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  5340  001FA2  0E80               	movlw	128
  5341  001FA4  0100               	movlb	0	; () banked
  5342  001FA6  1BE1               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  5343  001FA8  0100               	movlb	0	; () banked
  5344  001FAA  51DF               	movf	___ftge@ff2& (0+255),w,b
  5345  001FAC  0100               	movlb	0	; () banked
  5346  001FAE  5DDC               	subwf	___ftge@ff1& (0+255),w,b
  5347  001FB0  0100               	movlb	0	; () banked
  5348  001FB2  51E0               	movf	(___ftge@ff2+1)& (0+255),w,b
  5349  001FB4  0100               	movlb	0	; () banked
  5350  001FB6  59DD               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  5351  001FB8  0100               	movlb	0	; () banked
  5352  001FBA  51E1               	movf	(___ftge@ff2+2)& (0+255),w,b
  5353  001FBC  0100               	movlb	0	; () banked
  5354  001FBE  59DE               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  5355  001FC0  B0D8               	btfsc	status,0,c
  5356  001FC2  D002               	goto	l3076
  5357                           
  5358                           ; BSR set to: 0
  5359  001FC4  90D8               	bcf	status,0,c
  5360  001FC6  0012               	return	
  5361  001FC8                     l3076:
  5362                           
  5363                           ; BSR set to: 0
  5364  001FC8  80D8               	bsf	status,0,c
  5365                           
  5366                           ; BSR set to: 0
  5367  001FCA  0012               	return	
  5368  001FCC                     __end_of___ftge:
  5369                           	opt stack 0
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           prodh	equ	0xFF4
  5375                           prodl	equ	0xFF3
  5376                           intcon	equ	0xFF2
  5377                           postinc0	equ	0xFEE
  5378                           wreg	equ	0xFE8
  5379                           postdec1	equ	0xFE5
  5380                           fsr1l	equ	0xFE1
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function ___ftadd *****************
  5389 ;; Defined at:
  5390 ;;		line 86 in file "/Applications/microchip/xc8/v1.36/sources/common/ftadd.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  f1              3   59[COMRAM] float 
  5393 ;;  f2              3   62[COMRAM] float 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  exp1            1   70[COMRAM] unsigned char 
  5396 ;;  exp2            1   69[COMRAM] unsigned char 
  5397 ;;  sign            1   68[COMRAM] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  3   59[COMRAM] float 
  5400 ;; Registers used:
  5401 ;;		wreg, status,2, status,0, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5407 ;;      Params:         6       0       0       0       0       0       0       0       0
  5408 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5409 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5410 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5411 ;;Total ram usage:       12 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    2
  5414 ;; This function calls:
  5415 ;;		___ftpack
  5416 ;; This function is called by:
  5417 ;;		_fsm
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text28
  5422  0015F4                     __ptext28:
  5423                           	opt stack 0
  5424  0015F4                     ___ftadd:
  5425                           	opt stack 27
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;incstack = 0
  5429  0015F4  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
  5430  0015F8  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5431  0015FA  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5432  0015FC  343D               	rlcf	___ftadd@f1+1,w,c
  5433  0015FE  3642               	rlcf	??___ftadd& (0+255),f,c
  5434  001600  E301               	bnc	u2931
  5435  001602  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5436  001604                     u2931:
  5437  001604  5042               	movf	??___ftadd,w,c
  5438  001606  6E47               	movwf	___ftadd@exp1,c
  5439  001608  C041  F042         	movff	___ftadd@f2+2,??___ftadd
  5440  00160C  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5441  00160E  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5442  001610  3440               	rlcf	___ftadd@f2+1,w,c
  5443  001612  3642               	rlcf	??___ftadd& (0+255),f,c
  5444  001614  E301               	bnc	u2941
  5445  001616  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5446  001618                     u2941:
  5447  001618  5042               	movf	??___ftadd,w,c
  5448  00161A  6E46               	movwf	___ftadd@exp2,c
  5449  00161C  5047               	movf	___ftadd@exp1,w,c
  5450  00161E  B4D8               	btfsc	status,2,c
  5451  001620  D00B               	goto	l542
  5452  001622  5046               	movf	___ftadd@exp2,w,c
  5453  001624  5C47               	subwf	___ftadd@exp1,w,c
  5454  001626  B0D8               	btfsc	status,0,c
  5455  001628  D00E               	goto	l2904
  5456  00162A  5047               	movf	___ftadd@exp1,w,c
  5457  00162C  0800               	sublw	0
  5458  00162E  2446               	addwf	___ftadd@exp2,w,c
  5459  001630  6E42               	movwf	??___ftadd& (0+255),c
  5460  001632  0E18               	movlw	24
  5461  001634  6442               	cpfsgt	??___ftadd,c
  5462  001636  D007               	goto	l2904
  5463  001638                     l542:
  5464  001638  C03F  F03C         	movff	___ftadd@f2,?___ftadd
  5465  00163C  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
  5466  001640  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
  5467  001644  0012               	return	
  5468  001646                     l2904:
  5469  001646  5046               	movf	___ftadd@exp2,w,c
  5470  001648  B4D8               	btfsc	status,2,c
  5471  00164A  D00B               	goto	l546
  5472  00164C  5047               	movf	___ftadd@exp1,w,c
  5473  00164E  5C46               	subwf	___ftadd@exp2,w,c
  5474  001650  B0D8               	btfsc	status,0,c
  5475  001652  D00E               	goto	l2910
  5476  001654  5046               	movf	___ftadd@exp2,w,c
  5477  001656  0800               	sublw	0
  5478  001658  2447               	addwf	___ftadd@exp1,w,c
  5479  00165A  6E42               	movwf	??___ftadd& (0+255),c
  5480  00165C  0E18               	movlw	24
  5481  00165E  6442               	cpfsgt	??___ftadd,c
  5482  001660  D007               	goto	l2910
  5483  001662                     l546:
  5484  001662  C03C  F03C         	movff	___ftadd@f1,?___ftadd
  5485  001666  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
  5486  00166A  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
  5487  00166E  0012               	return	
  5488  001670                     l2910:
  5489  001670  0E06               	movlw	6
  5490  001672  6E45               	movwf	___ftadd@sign,c
  5491  001674  BE3E               	btfsc	___ftadd@f1+2,7,c
  5492  001676  8E45               	bsf	___ftadd@sign,7,c
  5493  001678  BE41               	btfsc	___ftadd@f2+2,7,c
  5494  00167A  8C45               	bsf	___ftadd@sign,6,c
  5495  00167C  8E3D               	bsf	___ftadd@f1+1,7,c
  5496  00167E  0EFF               	movlw	255
  5497  001680  163C               	andwf	___ftadd@f1,f,c
  5498  001682  0EFF               	movlw	255
  5499  001684  163D               	andwf	___ftadd@f1+1,f,c
  5500  001686  0E00               	movlw	0
  5501  001688  163E               	andwf	___ftadd@f1+2,f,c
  5502  00168A  8E40               	bsf	___ftadd@f2+1,7,c
  5503  00168C  0EFF               	movlw	255
  5504  00168E  163F               	andwf	___ftadd@f2,f,c
  5505  001690  0EFF               	movlw	255
  5506  001692  1640               	andwf	___ftadd@f2+1,f,c
  5507  001694  0E00               	movlw	0
  5508  001696  1641               	andwf	___ftadd@f2+2,f,c
  5509  001698  5046               	movf	___ftadd@exp2,w,c
  5510  00169A  5C47               	subwf	___ftadd@exp1,w,c
  5511  00169C  B0D8               	btfsc	status,0,c
  5512  00169E  D01B               	goto	l2936
  5513  0016A0                     l2926:
  5514  0016A0  90D8               	bcf	status,0,c
  5515  0016A2  363F               	rlcf	___ftadd@f2,f,c
  5516  0016A4  3640               	rlcf	___ftadd@f2+1,f,c
  5517  0016A6  3641               	rlcf	___ftadd@f2+2,f,c
  5518  0016A8  0646               	decf	___ftadd@exp2,f,c
  5519  0016AA  5047               	movf	___ftadd@exp1,w,c
  5520  0016AC  1846               	xorwf	___ftadd@exp2,w,c
  5521  0016AE  B4D8               	btfsc	status,2,c
  5522  0016B0  D00D               	goto	l2934
  5523  0016B2  0645               	decf	___ftadd@sign,f,c
  5524  0016B4  C045  F042         	movff	___ftadd@sign,??___ftadd
  5525  0016B8  0E07               	movlw	7
  5526  0016BA  1642               	andwf	??___ftadd,f,c
  5527  0016BC  B4D8               	btfsc	status,2,c
  5528  0016BE  D006               	goto	l2934
  5529  0016C0  D7EF               	goto	l2926
  5530  0016C2                     l2932:
  5531  0016C2  90D8               	bcf	status,0,c
  5532  0016C4  323E               	rrcf	___ftadd@f1+2,f,c
  5533  0016C6  323D               	rrcf	___ftadd@f1+1,f,c
  5534  0016C8  323C               	rrcf	___ftadd@f1,f,c
  5535  0016CA  2A47               	incf	___ftadd@exp1,f,c
  5536  0016CC                     l2934:
  5537  0016CC  5046               	movf	___ftadd@exp2,w,c
  5538  0016CE  1847               	xorwf	___ftadd@exp1,w,c
  5539  0016D0  B4D8               	btfsc	status,2,c
  5540  0016D2  D01F               	goto	l557
  5541  0016D4  D7F6               	goto	l2932
  5542  0016D6                     l2936:
  5543  0016D6  5047               	movf	___ftadd@exp1,w,c
  5544  0016D8  5C46               	subwf	___ftadd@exp2,w,c
  5545  0016DA  B0D8               	btfsc	status,0,c
  5546  0016DC  D01A               	goto	l557
  5547  0016DE                     l2938:
  5548  0016DE  90D8               	bcf	status,0,c
  5549  0016E0  363C               	rlcf	___ftadd@f1,f,c
  5550  0016E2  363D               	rlcf	___ftadd@f1+1,f,c
  5551  0016E4  363E               	rlcf	___ftadd@f1+2,f,c
  5552  0016E6  0647               	decf	___ftadd@exp1,f,c
  5553  0016E8  5047               	movf	___ftadd@exp1,w,c
  5554  0016EA  1846               	xorwf	___ftadd@exp2,w,c
  5555  0016EC  B4D8               	btfsc	status,2,c
  5556  0016EE  D00D               	goto	l2946
  5557  0016F0  0645               	decf	___ftadd@sign,f,c
  5558  0016F2  C045  F042         	movff	___ftadd@sign,??___ftadd
  5559  0016F6  0E07               	movlw	7
  5560  0016F8  1642               	andwf	??___ftadd,f,c
  5561  0016FA  B4D8               	btfsc	status,2,c
  5562  0016FC  D006               	goto	l2946
  5563  0016FE  D7EF               	goto	l2938
  5564  001700                     l2944:
  5565  001700  90D8               	bcf	status,0,c
  5566  001702  3241               	rrcf	___ftadd@f2+2,f,c
  5567  001704  3240               	rrcf	___ftadd@f2+1,f,c
  5568  001706  323F               	rrcf	___ftadd@f2,f,c
  5569  001708  2A46               	incf	___ftadd@exp2,f,c
  5570  00170A                     l2946:
  5571  00170A  5046               	movf	___ftadd@exp2,w,c
  5572  00170C  1847               	xorwf	___ftadd@exp1,w,c
  5573  00170E  A4D8               	btfss	status,2,c
  5574  001710  D7F7               	goto	l2944
  5575  001712                     l557:
  5576  001712  AE45               	btfss	___ftadd@sign,7,c
  5577  001714  D00C               	goto	l566
  5578  001716  0EFF               	movlw	255
  5579  001718  1A3C               	xorwf	___ftadd@f1,f,c
  5580  00171A  0EFF               	movlw	255
  5581  00171C  1A3D               	xorwf	___ftadd@f1+1,f,c
  5582  00171E  0EFF               	movlw	255
  5583  001720  1A3E               	xorwf	___ftadd@f1+2,f,c
  5584  001722  0E01               	movlw	1
  5585  001724  263C               	addwf	___ftadd@f1,f,c
  5586  001726  0E00               	movlw	0
  5587  001728  223D               	addwfc	___ftadd@f1+1,f,c
  5588  00172A  0E00               	movlw	0
  5589  00172C  223E               	addwfc	___ftadd@f1+2,f,c
  5590  00172E                     l566:
  5591  00172E  AC45               	btfss	___ftadd@sign,6,c
  5592  001730  D00C               	goto	l2952
  5593  001732  0EFF               	movlw	255
  5594  001734  1A3F               	xorwf	___ftadd@f2,f,c
  5595  001736  0EFF               	movlw	255
  5596  001738  1A40               	xorwf	___ftadd@f2+1,f,c
  5597  00173A  0EFF               	movlw	255
  5598  00173C  1A41               	xorwf	___ftadd@f2+2,f,c
  5599  00173E  0E01               	movlw	1
  5600  001740  263F               	addwf	___ftadd@f2,f,c
  5601  001742  0E00               	movlw	0
  5602  001744  2240               	addwfc	___ftadd@f2+1,f,c
  5603  001746  0E00               	movlw	0
  5604  001748  2241               	addwfc	___ftadd@f2+2,f,c
  5605  00174A                     l2952:
  5606  00174A  0E00               	movlw	0
  5607  00174C  6E45               	movwf	___ftadd@sign,c
  5608  00174E  503C               	movf	___ftadd@f1,w,c
  5609  001750  263F               	addwf	___ftadd@f2,f,c
  5610  001752  503D               	movf	___ftadd@f1+1,w,c
  5611  001754  2240               	addwfc	___ftadd@f2+1,f,c
  5612  001756  503E               	movf	___ftadd@f1+2,w,c
  5613  001758  2241               	addwfc	___ftadd@f2+2,f,c
  5614  00175A  AE41               	btfss	___ftadd@f2+2,7,c
  5615  00175C  D00E               	goto	l2962
  5616  00175E  0EFF               	movlw	255
  5617  001760  1A3F               	xorwf	___ftadd@f2,f,c
  5618  001762  0EFF               	movlw	255
  5619  001764  1A40               	xorwf	___ftadd@f2+1,f,c
  5620  001766  0EFF               	movlw	255
  5621  001768  1A41               	xorwf	___ftadd@f2+2,f,c
  5622  00176A  0E01               	movlw	1
  5623  00176C  263F               	addwf	___ftadd@f2,f,c
  5624  00176E  0E00               	movlw	0
  5625  001770  2240               	addwfc	___ftadd@f2+1,f,c
  5626  001772  0E00               	movlw	0
  5627  001774  2241               	addwfc	___ftadd@f2+2,f,c
  5628  001776  0E01               	movlw	1
  5629  001778  6E45               	movwf	___ftadd@sign,c
  5630  00177A                     l2962:
  5631  00177A  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
  5632  00177E  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  5633  001782  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  5634  001786  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
  5635  00178A  C045  F013         	movff	___ftadd@sign,___ftpack@sign
  5636  00178E  EC3F  F010         	call	___ftpack	;wreg free
  5637  001792  C00F  F03C         	movff	?___ftpack,?___ftadd
  5638  001796  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
  5639  00179A  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
  5640  00179E  0012               	return	
  5641  0017A0                     __end_of___ftadd:
  5642                           	opt stack 0
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           postinc0	equ	0xFEE
  5651                           wreg	equ	0xFE8
  5652                           postdec1	equ	0xFE5
  5653                           fsr1l	equ	0xFE1
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           postdec2	equ	0xFDD
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function ___awtoft *****************
  5662 ;; Defined at:
  5663 ;;		line 32 in file "/Applications/microchip/xc8/v1.36/sources/common/awtoft.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  c               2   40[COMRAM] int 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  sign            1   43[COMRAM] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  3   40[COMRAM] float 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2, status,0, cstack
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5677 ;;      Params:         3       0       0       0       0       0       0       0       0
  5678 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5680 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5681 ;;Total ram usage:        4 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    2
  5684 ;; This function calls:
  5685 ;;		___ftpack
  5686 ;; This function is called by:
  5687 ;;		_fsm
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text29
  5692  0026BC                     __ptext29:
  5693                           	opt stack 0
  5694  0026BC                     ___awtoft:
  5695                           	opt stack 27
  5696                           
  5697                           ;incstack = 0
  5698  0026BC  0E00               	movlw	0
  5699  0026BE  6E2C               	movwf	___awtoft@sign,c
  5700  0026C0  AE2A               	btfss	___awtoft@c+1,7,c
  5701  0026C2  D006               	goto	l3058
  5702  0026C4  6C29               	negf	___awtoft@c,c
  5703  0026C6  1E2A               	comf	___awtoft@c+1,f,c
  5704  0026C8  B0D8               	btfsc	status,0,c
  5705  0026CA  2A2A               	incf	___awtoft@c+1,f,c
  5706  0026CC  0E01               	movlw	1
  5707  0026CE  6E2C               	movwf	___awtoft@sign,c
  5708  0026D0                     l3058:
  5709  0026D0  C029  F00F         	movff	___awtoft@c,___ftpack@arg
  5710  0026D4  C02A  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  5711  0026D8  6A11               	clrf	___ftpack@arg+2,c
  5712  0026DA  0E8E               	movlw	142
  5713  0026DC  6E12               	movwf	___ftpack@exp,c
  5714  0026DE  C02C  F013         	movff	___awtoft@sign,___ftpack@sign
  5715  0026E2  EC3F  F010         	call	___ftpack	;wreg free
  5716  0026E6  C00F  F029         	movff	?___ftpack,?___awtoft
  5717  0026EA  C010  F02A         	movff	?___ftpack+1,?___awtoft+1
  5718  0026EE  C011  F02B         	movff	?___ftpack+2,?___awtoft+2
  5719  0026F2  0012               	return	
  5720  0026F4                     __end_of___awtoft:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           prodh	equ	0xFF4
  5727                           prodl	equ	0xFF3
  5728                           intcon	equ	0xFF2
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1l	equ	0xFE1
  5733                           indf2	equ	0xFDF
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function ___ftpack *****************
  5741 ;; Defined at:
  5742 ;;		line 62 in file "/Applications/microchip/xc8/v1.36/sources/common/float.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  arg             3   14[COMRAM] unsigned um
  5745 ;;  exp             1   17[COMRAM] unsigned char 
  5746 ;;  sign            1   18[COMRAM] unsigned char 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  3   14[COMRAM] float 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2, status,0
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5758 ;;      Params:         5       0       0       0       0       0       0       0       0
  5759 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5760 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5761 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5762 ;;Total ram usage:        8 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    1
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		___altoft
  5769 ;;		___awtoft
  5770 ;;		___ftadd
  5771 ;;		___ftdiv
  5772 ;;		___ftmul
  5773 ;;		___lbtoft
  5774 ;;		___lwtoft
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text30
  5779  00207E                     __ptext30:
  5780                           	opt stack 0
  5781  00207E                     ___ftpack:
  5782                           	opt stack 27
  5783                           
  5784                           ;incstack = 0
  5785  00207E  5012               	movf	___ftpack@exp,w,c
  5786  002080  B4D8               	btfsc	status,2,c
  5787  002082  D005               	goto	l2556
  5788  002084  500F               	movf	___ftpack@arg,w,c
  5789  002086  1010               	iorwf	___ftpack@arg+1,w,c
  5790  002088  1011               	iorwf	___ftpack@arg+2,w,c
  5791  00208A  A4D8               	btfss	status,2,c
  5792  00208C  D00C               	goto	l2562
  5793  00208E                     l2556:
  5794  00208E  0E00               	movlw	0
  5795  002090  6E0F               	movwf	?___ftpack,c
  5796  002092  0E00               	movlw	0
  5797  002094  6E10               	movwf	?___ftpack+1,c
  5798  002096  0E00               	movlw	0
  5799  002098  6E11               	movwf	?___ftpack+2,c
  5800  00209A  0012               	return	
  5801  00209C                     l2560:
  5802  00209C  2A12               	incf	___ftpack@exp,f,c
  5803  00209E  90D8               	bcf	status,0,c
  5804  0020A0  3211               	rrcf	___ftpack@arg+2,f,c
  5805  0020A2  3210               	rrcf	___ftpack@arg+1,f,c
  5806  0020A4  320F               	rrcf	___ftpack@arg,f,c
  5807  0020A6                     l2562:
  5808  0020A6  0E00               	movlw	0
  5809  0020A8  140F               	andwf	___ftpack@arg,w,c
  5810  0020AA  6E14               	movwf	??___ftpack& (0+255),c
  5811  0020AC  0E00               	movlw	0
  5812  0020AE  1410               	andwf	___ftpack@arg+1,w,c
  5813  0020B0  6E15               	movwf	(??___ftpack+1)& (0+255),c
  5814  0020B2  0EFE               	movlw	254
  5815  0020B4  1411               	andwf	___ftpack@arg+2,w,c
  5816  0020B6  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5817  0020B8  5014               	movf	??___ftpack,w,c
  5818  0020BA  1015               	iorwf	??___ftpack+1,w,c
  5819  0020BC  1016               	iorwf	??___ftpack+2,w,c
  5820  0020BE  B4D8               	btfsc	status,2,c
  5821  0020C0  D00C               	goto	l2568
  5822  0020C2  D7EC               	goto	l2560
  5823  0020C4                     l2564:
  5824  0020C4  2A12               	incf	___ftpack@exp,f,c
  5825  0020C6  0E01               	movlw	1
  5826  0020C8  260F               	addwf	___ftpack@arg,f,c
  5827  0020CA  0E00               	movlw	0
  5828  0020CC  2210               	addwfc	___ftpack@arg+1,f,c
  5829  0020CE  0E00               	movlw	0
  5830  0020D0  2211               	addwfc	___ftpack@arg+2,f,c
  5831  0020D2  90D8               	bcf	status,0,c
  5832  0020D4  3211               	rrcf	___ftpack@arg+2,f,c
  5833  0020D6  3210               	rrcf	___ftpack@arg+1,f,c
  5834  0020D8  320F               	rrcf	___ftpack@arg,f,c
  5835  0020DA                     l2568:
  5836  0020DA  0E00               	movlw	0
  5837  0020DC  140F               	andwf	___ftpack@arg,w,c
  5838  0020DE  6E14               	movwf	??___ftpack& (0+255),c
  5839  0020E0  0E00               	movlw	0
  5840  0020E2  1410               	andwf	___ftpack@arg+1,w,c
  5841  0020E4  6E15               	movwf	(??___ftpack+1)& (0+255),c
  5842  0020E6  0EFF               	movlw	255
  5843  0020E8  1411               	andwf	___ftpack@arg+2,w,c
  5844  0020EA  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5845  0020EC  5014               	movf	??___ftpack,w,c
  5846  0020EE  1015               	iorwf	??___ftpack+1,w,c
  5847  0020F0  1016               	iorwf	??___ftpack+2,w,c
  5848  0020F2  B4D8               	btfsc	status,2,c
  5849  0020F4  D006               	goto	l2572
  5850  0020F6  D7E6               	goto	l2564
  5851  0020F8                     l2570:
  5852  0020F8  0612               	decf	___ftpack@exp,f,c
  5853  0020FA  90D8               	bcf	status,0,c
  5854  0020FC  360F               	rlcf	___ftpack@arg,f,c
  5855  0020FE  3610               	rlcf	___ftpack@arg+1,f,c
  5856  002100  3611               	rlcf	___ftpack@arg+2,f,c
  5857  002102                     l2572:
  5858  002102  BE10               	btfsc	___ftpack@arg+1,7,c
  5859  002104  D003               	goto	l519
  5860  002106  0E02               	movlw	2
  5861  002108  6012               	cpfslt	___ftpack@exp,c
  5862  00210A  D7F6               	goto	l2570
  5863  00210C                     l519:
  5864  00210C  A012               	btfss	___ftpack@exp,0,c
  5865  00210E  9E10               	bcf	___ftpack@arg+1,7,c
  5866  002110  90D8               	bcf	status,0,c
  5867  002112  3212               	rrcf	___ftpack@exp,f,c
  5868  002114  5012               	movf	___ftpack@exp,w,c
  5869  002116  1211               	iorwf	___ftpack@arg+2,f,c
  5870  002118  5013               	movf	___ftpack@sign,w,c
  5871  00211A  A4D8               	btfss	status,2,c
  5872  00211C  8E11               	bsf	___ftpack@arg+2,7,c
  5873  00211E  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  5874  002122  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  5875  002126  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  5876  00212A  0012               	return	
  5877  00212C                     __end_of___ftpack:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           postdec1	equ	0xFE5
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function ___awmod *****************
  5898 ;; Defined at:
  5899 ;;		line 8 in file "/Applications/microchip/xc8/v1.36/sources/common/awmod.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  dividend        2   28[COMRAM] int 
  5902 ;;  divisor         2   30[COMRAM] int 
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  sign            1   33[COMRAM] unsigned char 
  5905 ;;  counter         1   32[COMRAM] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  2   28[COMRAM] int 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5915 ;;      Params:         4       0       0       0       0       0       0       0       0
  5916 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5918 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5919 ;;Total ram usage:        6 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    1
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		_fsm
  5926 ;;		_PWM_ISR
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text31
  5931  0023EE                     __ptext31:
  5932                           	opt stack 0
  5933  0023EE                     ___awmod:
  5934                           	opt stack 28
  5935                           
  5936                           ;incstack = 0
  5937  0023EE  0E00               	movlw	0
  5938  0023F0  6E22               	movwf	___awmod@sign,c
  5939  0023F2  AE1E               	btfss	___awmod@dividend+1,7,c
  5940  0023F4  D006               	goto	l3022
  5941  0023F6  6C1D               	negf	___awmod@dividend,c
  5942  0023F8  1E1E               	comf	___awmod@dividend+1,f,c
  5943  0023FA  B0D8               	btfsc	status,0,c
  5944  0023FC  2A1E               	incf	___awmod@dividend+1,f,c
  5945  0023FE  0E01               	movlw	1
  5946  002400  6E22               	movwf	___awmod@sign,c
  5947  002402                     l3022:
  5948  002402  AE20               	btfss	___awmod@divisor+1,7,c
  5949  002404  D004               	goto	l3026
  5950  002406  6C1F               	negf	___awmod@divisor,c
  5951  002408  1E20               	comf	___awmod@divisor+1,f,c
  5952  00240A  B0D8               	btfsc	status,0,c
  5953  00240C  2A20               	incf	___awmod@divisor+1,f,c
  5954  00240E                     l3026:
  5955  00240E  501F               	movf	___awmod@divisor,w,c
  5956  002410  1020               	iorwf	___awmod@divisor+1,w,c
  5957  002412  B4D8               	btfsc	status,2,c
  5958  002414  D018               	goto	l3042
  5959  002416  0E01               	movlw	1
  5960  002418  6E21               	movwf	___awmod@counter,c
  5961  00241A  D004               	goto	l3032
  5962  00241C                     l3030:
  5963  00241C  90D8               	bcf	status,0,c
  5964  00241E  361F               	rlcf	___awmod@divisor,f,c
  5965  002420  3620               	rlcf	___awmod@divisor+1,f,c
  5966  002422  2A21               	incf	___awmod@counter,f,c
  5967  002424                     l3032:
  5968  002424  AE20               	btfss	___awmod@divisor+1,7,c
  5969  002426  D7FA               	goto	l3030
  5970  002428                     l3034:
  5971  002428  501F               	movf	___awmod@divisor,w,c
  5972  00242A  5C1D               	subwf	___awmod@dividend,w,c
  5973  00242C  5020               	movf	___awmod@divisor+1,w,c
  5974  00242E  581E               	subwfb	___awmod@dividend+1,w,c
  5975  002430  A0D8               	btfss	status,0,c
  5976  002432  D004               	goto	l3038
  5977  002434  501F               	movf	___awmod@divisor,w,c
  5978  002436  5E1D               	subwf	___awmod@dividend,f,c
  5979  002438  5020               	movf	___awmod@divisor+1,w,c
  5980  00243A  5A1E               	subwfb	___awmod@dividend+1,f,c
  5981  00243C                     l3038:
  5982  00243C  90D8               	bcf	status,0,c
  5983  00243E  3220               	rrcf	___awmod@divisor+1,f,c
  5984  002440  321F               	rrcf	___awmod@divisor,f,c
  5985  002442  2E21               	decfsz	___awmod@counter,f,c
  5986  002444  D7F1               	goto	l3034
  5987  002446                     l3042:
  5988  002446  5022               	movf	___awmod@sign,w,c
  5989  002448  B4D8               	btfsc	status,2,c
  5990  00244A  D004               	goto	l3046
  5991  00244C  6C1D               	negf	___awmod@dividend,c
  5992  00244E  1E1E               	comf	___awmod@dividend+1,f,c
  5993  002450  B0D8               	btfsc	status,0,c
  5994  002452  2A1E               	incf	___awmod@dividend+1,f,c
  5995  002454                     l3046:
  5996  002454  C01D  F01D         	movff	___awmod@dividend,?___awmod
  5997  002458  C01E  F01E         	movff	___awmod@dividend+1,?___awmod+1
  5998  00245C  0012               	return	
  5999  00245E                     __end_of___awmod:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           intcon	equ	0xFF2
  6008                           postinc0	equ	0xFEE
  6009                           wreg	equ	0xFE8
  6010                           postdec1	equ	0xFE5
  6011                           fsr1l	equ	0xFE1
  6012                           indf2	equ	0xFDF
  6013                           postinc2	equ	0xFDE
  6014                           postdec2	equ	0xFDD
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           
  6019 ;; *************** function _interrupt_handler *****************
  6020 ;; Defined at:
  6021 ;;		line 76 in file "config.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;		None
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  1    wreg      void 
  6028 ;; Registers used:
  6029 ;;		None
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6035 ;;      Params:         0       0       0       0       0       0       0       0       0
  6036 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6037 ;;      Temps:         14       0       0       0       0       0       0       0       0
  6038 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6039 ;;Total ram usage:       14 bytes
  6040 ;; Hardware stack levels used:    1
  6041 ;; This function calls:
  6042 ;;		Nothing
  6043 ;; This function is called by:
  6044 ;;		Interrupt level 2
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	intcode
  6049  001008                     __pintcode:
  6050                           	opt stack 0
  6051  001008                     _interrupt_handler:
  6052                           	opt stack 25
  6053                           
  6054                           ;incstack = 0
  6055  001008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6056  00100A  CFFA F001          	movff	pclath,??_interrupt_handler
  6057  00100E  CFFB F002          	movff	pclatu,??_interrupt_handler+1
  6058  001012  ED2F  F012         	call	int_func,f	;refresh shadow registers
  6059                           pclatu	equ	0xFFB
  6060                           pclath	equ	0xFFA
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           postinc0	equ	0xFEE
  6069                           wreg	equ	0xFE8
  6070                           postdec1	equ	0xFE5
  6071                           fsr1l	equ	0xFE1
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           
  6079                           	psect	intcode_body
  6080  00245E                     __pintcode_body:
  6081                           	opt stack 25
  6082  00245E                     int_func:
  6083                           	opt stack 25
  6084  00245E  0006               	pop		; remove dummy address from shadow register refresh
  6085  002460  CFE9 F003          	movff	fsr0l,??_interrupt_handler+2
  6086  002464  CFEA F004          	movff	fsr0h,??_interrupt_handler+3
  6087  002468  CFE1 F005          	movff	fsr1l,??_interrupt_handler+4
  6088  00246C  CFE2 F006          	movff	fsr1h,??_interrupt_handler+5
  6089  002470  CFD9 F007          	movff	fsr2l,??_interrupt_handler+6
  6090  002474  CFDA F008          	movff	fsr2h,??_interrupt_handler+7
  6091  002478  CFF3 F009          	movff	prodl,??_interrupt_handler+8
  6092  00247C  CFF4 F00A          	movff	prodh,??_interrupt_handler+9
  6093  002480  CFF6 F00B          	movff	tblptrl,??_interrupt_handler+10
  6094  002484  CFF7 F00C          	movff	tblptrh,??_interrupt_handler+11
  6095  002488  CFF8 F00D          	movff	tblptru,??_interrupt_handler+12
  6096  00248C  CFF5 F00E          	movff	tablat,??_interrupt_handler+13
  6097  002490  C00E  FFF5         	movff	??_interrupt_handler+13,tablat
  6098  002494  C00D  FFF8         	movff	??_interrupt_handler+12,tblptru
  6099  002498  C00C  FFF7         	movff	??_interrupt_handler+11,tblptrh
  6100  00249C  C00B  FFF6         	movff	??_interrupt_handler+10,tblptrl
  6101  0024A0  C00A  FFF4         	movff	??_interrupt_handler+9,prodh
  6102  0024A4  C009  FFF3         	movff	??_interrupt_handler+8,prodl
  6103  0024A8  C008  FFDA         	movff	??_interrupt_handler+7,fsr2h
  6104  0024AC  C007  FFD9         	movff	??_interrupt_handler+6,fsr2l
  6105  0024B0  C006  FFE2         	movff	??_interrupt_handler+5,fsr1h
  6106  0024B4  C005  FFE1         	movff	??_interrupt_handler+4,fsr1l
  6107  0024B8  C004  FFEA         	movff	??_interrupt_handler+3,fsr0h
  6108  0024BC  C003  FFE9         	movff	??_interrupt_handler+2,fsr0l
  6109  0024C0  C002  FFFB         	movff	??_interrupt_handler+1,pclatu
  6110  0024C4  C001  FFFA         	movff	??_interrupt_handler,pclath
  6111  0024C8  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6112  0024CA  0011               	retfie		f
  6113  0024CC                     __end_of_interrupt_handler:
  6114                           	opt stack 0
  6115                           pclatu	equ	0xFFB
  6116                           pclath	equ	0xFFA
  6117                           tblptru	equ	0xFF8
  6118                           tblptrh	equ	0xFF7
  6119                           tblptrl	equ	0xFF6
  6120                           tablat	equ	0xFF5
  6121                           prodh	equ	0xFF4
  6122                           prodl	equ	0xFF3
  6123                           intcon	equ	0xFF2
  6124                           postinc0	equ	0xFEE
  6125                           fsr0h	equ	0xFEA
  6126                           fsr0l	equ	0xFE9
  6127                           wreg	equ	0xFE8
  6128                           postdec1	equ	0xFE5
  6129                           fsr1h	equ	0xFE2
  6130                           fsr1l	equ	0xFE1
  6131                           indf2	equ	0xFDF
  6132                           postinc2	equ	0xFDE
  6133                           postdec2	equ	0xFDD
  6134                           fsr2h	equ	0xFDA
  6135                           fsr2l	equ	0xFD9
  6136                           status	equ	0xFD8
  6137                           pclatu	equ	0xFFB
  6138                           pclath	equ	0xFFA
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           intcon	equ	0xFF2
  6146                           postinc0	equ	0xFEE
  6147                           fsr0h	equ	0xFEA
  6148                           fsr0l	equ	0xFE9
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1h	equ	0xFE2
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160                           	psect	rparam
  6161  0000                     pclatu	equ	0xFFB
  6162                           pclath	equ	0xFFA
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           postinc0	equ	0xFEE
  6171                           fsr0h	equ	0xFEA
  6172                           fsr0l	equ	0xFE9
  6173                           wreg	equ	0xFE8
  6174                           postdec1	equ	0xFE5
  6175                           fsr1h	equ	0xFE2
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           postinc2	equ	0xFDE
  6179                           postdec2	equ	0xFDD
  6180                           fsr2h	equ	0xFDA
  6181                           fsr2l	equ	0xFD9
  6182                           status	equ	0xFD8
  6183                           
  6184                           	psect	temp
  6185  000051                     btemp:
  6186                           	opt stack 0
  6187  000051                     	ds	1
  6188  0000                     int$flags	set	btemp
  6189                           pclatu	equ	0xFFB
  6190                           pclath	equ	0xFFA
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           postinc0	equ	0xFEE
  6199                           fsr0h	equ	0xFEA
  6200                           fsr0l	equ	0xFE9
  6201                           wreg	equ	0xFE8
  6202                           postdec1	equ	0xFE5
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    6
    Data        500
    BSS         30
    Persistent  11
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      80
    BANK0           160     24     159
    BANK1           256      7     243
    BANK2           256      0     164
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _init->___lwtoft
    _hardware_init->_OpenTimer0
    ___lwtoft->___ftpack
    _fsm->___ftge
    _stepper_pulse->___fttol
    _rand->___lmul
    _buzz->___fttol
    _myDelay_us->___fttol
    ___fttol->___ftdiv
    ___ftdiv->___awtoft
    ___altoft->___ftpack
    ___aldiv->___lmul
    ___wmul->___awmod
    ___lbtoft->___ftpack
    ___ftmul->___awtoft
    ___ftge->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    ___awtoft->___wmul
    ___awmod->_rand

Critical Paths under _interrupt_handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _multiplex->_go_through_cols
    _go_through_cols->_myDelay_us
    _fsm->_nothingElseMatters
    _fsm->_superMario
    _superMario->_buzz
    _stepper_pulse->_myDelay_us
    _nothingElseMatters->_buzz
    _buzz->_myDelay_us

Critical Paths under _interrupt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_fsm
    _fsm->_nothingElseMatters
    _fsm->_superMario

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_handler in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   65801
                                _fsm
                               _init
                          _multiplex
 ---------------------------------------------------------------------------------
 (1) _multiplex                                            0     0      0     577
                    _go_through_cols
 ---------------------------------------------------------------------------------
 (2) _go_through_cols                                      4     4      0     577
                                              4 BANK0      4     4      0
                         _myDelay_us
 ---------------------------------------------------------------------------------
 (1) _init                                                 3     3      0    2796
                                             25 COMRAM     3     3      0
                           ___lwtoft
                      _hardware_init
 ---------------------------------------------------------------------------------
 (2) _hardware_init                                        0     0      0      44
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (3) _OpenTimer0                                           3     3      0      44
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2752
                                             22 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _fsm                                                  5     5      0   62428
                                              2 BANK1      5     5      0
                            ___awmod
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lbtoft
                            ___lwmod
                             ___wmul
                               _buzz
                 _nothingElseMatters
                               _rand
                         _setAllLeds
                              _srand
                      _stepper_pulse
                         _superMario
 ---------------------------------------------------------------------------------
 (2) _superMario                                           4     2      2   11595
                                             22 BANK0      2     0      2
                                              0 BANK1      2     2      0
                            ___lwdiv
                               _buzz
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _stepper_pulse                                        5     2      3    6144
                                              4 BANK0      5     2      3
                            ___ftdiv
                            ___fttol
                            ___lwmod
                         _myDelay_us
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     694
                                             14 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     108
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setAllLeds                                           2     2      0     130
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     558
                                             26 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _nothingElseMatters                                   4     2      2   11740
                                             22 BANK0      2     0      2
                                              0 BANK1      2     2      0
                             ___wmul
                               _buzz
 ---------------------------------------------------------------------------------
 (3) _buzz                                                18    12      6   11061
                                              4 BANK0     18    12      6
                            ___aldiv
                           ___altoft
                            ___ftdiv
                            ___fttol
                             ___lmul
                            ___lwdiv (ARG)
                             ___wmul (ARG)
                         _myDelay_ms
                         _myDelay_us
 ---------------------------------------------------------------------------------
 (3) _myDelay_us                                           4     2      2     453
                                              0 BANK0      4     2      2
                            ___ftdiv (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _myDelay_ms                                           5     3      2     145
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                             14 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     602
                                             59 COMRAM    15    11      4
                           ___altoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4102
                                             44 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2925
                                             22 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                             26 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     540
                                             34 COMRAM     6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2675
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3554
                                             44 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     506
                                             71 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4713
                                             59 COMRAM    12     6      6
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3085
                                             40 COMRAM     4     1      3
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2644
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     895
                                             28 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                   14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fsm
     ___awmod
       _rand (ARG)
         ___lmul
     ___awtoft
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     ___ftadd
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___awtoft (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       ___awtoft (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     ___ftge
       ___awtoft (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftadd (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
     ___lwmod
     ___wmul
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     _buzz
       ___aldiv
         ___lmul (ARG)
       ___altoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
       ___lmul
       ___lwdiv (ARG)
       ___wmul (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _myDelay_ms (ARG)
       _myDelay_us (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
     _nothingElseMatters
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _buzz
         ___aldiv
           ___lmul (ARG)
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
         ___lmul
         ___lwdiv (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _myDelay_ms (ARG)
         _myDelay_us (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___awtoft (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awmod (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
     _rand
       ___lmul
     _setAllLeds
     _srand
     _stepper_pulse
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         ___awtoft (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
       ___lwmod
       _myDelay_us
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
     _superMario
       ___lwdiv
       _buzz
         ___aldiv
           ___lmul (ARG)
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
         ___lmul
         ___lwdiv (ARG)
         ___wmul (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _myDelay_ms (ARG)
         _myDelay_us (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___fttol (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___awtoft (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awmod (ARG)
                     _rand (ARG)
                       ___lmul
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
   _init
     ___lwtoft
       ___ftpack
     _hardware_init
       _OpenTimer0
   _multiplex
     _go_through_cols
       _myDelay_us
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           ___awtoft (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         ___fttol (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             ___awtoft (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awmod (ARG)
                   _rand (ARG)
                     ___lmul
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _rand (ARG)
                 ___lmul
             _rand (ARG)
               ___lmul

 _interrupt_handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      A4       9       64.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      7      F3       7       94.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      50       1       85.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     286      20        0.0%
DATA                 0      0     286       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Apr 26 16:27:07 2016

                   ___altoft@exp 001F                    ___altoft@sign 0020  
       __size_of_go_through_cols 00B2              ___wmul@multiplicand 0025  
                   ___ftadd@exp1 0047                     ___ftadd@exp2 0046  
                   ___ftadd@sign 0045                              l220 1ADC  
                            l204 1280                              l216 15F2  
                            l219 1ADA                              l173 1076  
                            l272 2742                              l281 187E  
                            l185 11B0                              l266 270E  
                            l542 1638                              l519 210C  
                            l546 1662                              l707 26B2  
                            l557 1712                              l566 172E  
                            l577 1D52                              l697 261E  
                            _fsm 1022                     ___awmod@sign 0022  
                            prod 000FF3                              wreg 000FE8  
                    _total_steps 101F                     ___ftdiv@cntr 0036  
                   ___ftdiv@sign 003B                             l3002 1A78  
                           l3100 1024                             l3030 241C  
                           l3022 2402                             l3006 1A88  
                           l3110 1070                             l3032 2424  
                           l3034 2428                             l3042 2446  
                           l3026 240E                             l3210 1242  
                           l3202 121A                             l3140 110E  
                           l3046 2454                             l3038 243C  
                           l3070 1F84                             l3230 133E  
                           l3222 1286                             l3214 1248  
                           l3150 113C                             l3240 149A  
                           l3208 123A                             l3160 1162  
                           l3144 111C                             l3058 26D0  
                           l3066 1F4C                             l2602 253C  
                           l3250 14C8                             l3234 1348  
                           l3218 125A                             l3076 1FC8  
                           l3244 14A0                             l3228 1332  
                           l3156 1150                             l3316 2812  
                           l2630 1DDA                             l2702 1D2C  
                           l2606 2550                             l3190 11E6  
                           l3182 11CC                             l3174 1198  
                           l2560 209C                             l2632 1DE6  
                           l2624 1DB8                             l3280 15A8  
                           l3248 14C0                             l3192 11EE  
                           l3184 11D4                             l3168 1184  
                           l2570 20F8                             l2562 20A6  
                           l2650 1E3E                             l2642 1E1A  
                           l2634 1DEA                             l2618 1DA0  
                           l2722 1906                             l3266 1562  
                           l2572 2102                             l2564 20C4  
                           l2556 208E                             l2740 196C  
                           l2820 26A8                             l2812 2688  
                           l2804 2614                             l3284 15B0  
                           l2910 1670                             l2646 1E28  
                           l2662 2398                             l2750 1994  
                           l2590 2700                             l2814 2690  
                           l3198 1210                             l2568 20DA  
                           l2904 1646                             l2664 23A4  
                           l2752 19A0                             l2744 197C  
                           l2816 2694                             l2682 1CEE  
                           l2754 19A6                             l2842 2780  
                           l2834 1B5E                             l2932 16C2  
                           l2676 1CC6                             l2596 272E  
                           l2934 16CC                             l2926 16A0  
                           l2758 19BC                             l2846 2788  
                           l2952 174A                             l2944 1700  
                           l2936 16D6                             l2768 17C2  
                           l2792 25EC                             l2962 177A  
                           l2946 170A                             l2938 16DE  
                           l2778 18A8                             l2794 25F4  
                           ?_fsm 0001                             l2972 19F6  
                           l2796 25F8                             l2992 1A50  
                           l2978 1A1E                             l2996 1A60  
                           u3141 19DE                             u3310 1042  
                           u3161 1A06                             u3305 1EE2  
                           u3316 1044                             u1580 25BA  
                           u2710 1924                             u3431 11A6  
                           u3520 1274                             u2641 1CAE  
                           u2715 191C                             u3451 11C2  
                           u1588 25BC                             u2661 1CD6  
                           u2850 1AD6                             u2931 1604  
                           u2691 18EA                             u3627 2702  
                           u2941 1618                             u3637 2734  
                           _LEDs 00C0                             _main 280E  
                   ___ftpack@arg 000F                             _init 1E50  
                           _buzz 17A0                             _rand 2628  
                   ___ftpack@exp 0012                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           fsm@i 01F1                             btemp 0051  
         __size_of_stepper_pulse 00F0                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 1016                     ___ftmul@cntr 003A  
                   ___param_bank 000010                     ___ftmul@sign 003B  
                   ___fttol@exp1 004A                            ??_fsm 004B  
                   ___fttol@lval 0046                  __end_of___aldiv 1E50  
                          ?_main 0001                            ?_init 0001  
                          ?_buzz 00E0                            ?_rand 001B  
                __end_of___ftadd 17A0                  __end_of___awmod 245E  
                __end_of___ftdiv 1D84                  __end_of___ftmul 1AC2  
                __end_of___fttol 19CE                  __end_of___lwdiv 2628  
                __end_of___lwmod 26BC                  ??_hardware_init 0012  
                          _TMR0H 000FD7                            _TMR1H 000FCF  
                          _TMR0L 000FD6                            _TMR1L 000FCE  
            ___lmul@multiplicand 0013                    ___awtoft@sign 002C  
                          _randx 004B                    ___ftpack@sign 0013  
                          _srand 281C       __end_of_nothingElseMatters 2376  
                          buzz@i 00EC                            tablat 000FF5  
                          status 000FD8                  __initialization 21D0  
                   __end_of_main 281C                     __end_of_init 1F14  
                   __end_of_buzz 18DA                     __end_of_rand 267A  
                  _steps_per_led 00F7                           ??_main 004B  
                  ___fttol@sign1 0045                           ??_init 001A  
                         ??_buzz 00E6                           ??_rand 001D  
                  _stepper_pulse 1AC2                    __activetblptr 000002  
              ??_go_through_cols 00E0                           _ADCON1 000FC1  
               __end_of___altoft 23EE                           ?_srand 000F  
               __end_of___awtoft 26F4                 __end_of___ftpack 212C  
               __end_of___lbtoft 280E                       _OpenTimer0 2582  
               __end_of___lwtoft 27EA                      myDelay_ms@i 0012  
                    myDelay_us@i 00DE                           ___ftge 1F14  
                         ___lmul 252C                        ??___aldiv 0023  
                         ___wmul 27A0                        ??___ftadd 0042  
                      ??___awmod 0021                        ??___ftdiv 0033  
                      ??___ftmul 0033                        ??___fttol 0040  
                      ??___lwdiv 0013                        ??___lwmod 0013  
                    buzz@repeats 00E8                           clear_0 21D6  
                ___awmod@divisor 001F                           _target 00DA  
                 ?_stepper_pulse 00E0                  ___awmod@counter 0021  
          ___ftmul@f3_as_product 0037                     __pdataCOMRAM 004B  
          go_through_cols@offset 00E3                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                           srand@x 000F  
                  _last_new_note 101B                       __accesstop 0060  
        __end_of__initialization 2260                       ___altoft@c 0017  
                     ___ftadd@f1 003C                       ___ftadd@f2 003F  
                     ___ftge@ff1 00DC                       ___ftge@ff2 00DF  
                  ___rparam_used 000001                       ___ftdiv@f1 002D  
                     ___ftdiv@f2 0030                       ___ftdiv@f3 0037  
                     ___awtoft@c 0029                       ___lbtoft@c 001A  
                     ___ftmul@f1 002D                       ___ftmul@f2 0030  
                  _last_win_note 101D                       ___fttol@f1 003C  
                 __pcstackCOMRAM 0001                     __pidataBANK0 24CC  
                   __pidataBANK1 1BB2                     __pidataBANK2 212C  
                  __end_of_srand 282A                       ___lwtoft@c 0017  
                    setAllLeds@i 0010                          ??_srand 0011  
                     __pbssBANK0 00C0                      ?_OpenTimer0 0001  
                  _current_state 00D8  _nothingElseMattersFullDurations 0200  
                        ?___ftge 00DC                          ?___lmul 000F  
                        ?___wmul 0023                  ??_stepper_pulse 00E3  
                      ?___altoft 0017                   ___lmul@product 0017  
                      ?___awtoft 0029                        ?___ftpack 000F  
                      ?___lbtoft 0017                       _hard_speed 00F4  
                      ?___lwtoft 0017               __size_of_multiplex 002A  
                   myDelay_ms@ms 000F                     myDelay_us@us 00DC  
              _stepper_direction 00FC                          __Hparam 0000  
                        __Lparam 0000               _nothingElseMatters 22F2  
                        ___aldiv 1D84                       _myDelay_ms 2724  
                     _myDelay_us 26F4                  __size_of___ftge 00B8  
                __size_of___lmul 0056                          ___ftadd 15F4  
                _go_through_cols 1FCC                          ___awmod 23EE  
                        ___ftdiv 1C9E                  __size_of___wmul 0026  
                        ___ftmul 19CE                          ___fttol 18DA  
                        ___lwdiv 25D6                          ___lwmod 267A  
                   __psmallconst 101A                       ??___altoft 001B  
                        __pcinit 21D0                       ??___awtoft 002C  
                     ??___ftpack 0014                       ??___lbtoft 001A  
                   buzz@duration 00E4                          __ramtop 0800  
            __size_of_OpenTimer0 0054                          __ptext0 280E  
                        __ptext1 2750                          __ptext2 1FCC  
                        __ptext3 1E50                          __ptext4 282A  
                        __ptext5 2582                          __ptext6 27C6  
                        __ptext7 1022                          __ptext8 226E  
                        __ptext9 25D6              ?_nothingElseMatters 00F2  
                     ??___lwtoft 001A                        _T0CONbits 000FD5  
                      _T1CONbits 000FCD                          _counter 0050  
                   __size_of_fsm 05D2                 ___awmod@dividend 001D  
                        _seed_nr 00D6                 ___aldiv@dividend 001B  
          __end_of_hardware_init 2836                       _setAllLeds 277A  
                 __pintcode_body 245E             end_of_initialization 2260  
                  __Lmediumconst 0000             ??_nothingElseMatters 01EC  
                        int_func 245E          nothingElseMatters@index 00F2  
                     _nr_toggles 00D9           _imperialMarchDurations 0100  
              __end_of_multiplex 277A               _imperialMarchNotes 0060  
               ___aldiv@quotient 0025                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE              _superMarioDurations 0246  
                      _PORTAbits 000F80                        _PORTBbits 000F81  
                      _TRISAbits 000F92                        _TRISBbits 000F93  
                      _TRISCbits 000F94               stepper_pulse@speed 00E0  
                    ___ftdiv@exp 003A          __end_of_go_through_cols 207E  
                     _superMario 226E                      ___ftmul@exp 0036  
                    ?_myDelay_ms 000F                      ?_myDelay_us 00DC  
                 __end_of___ftge 1FCC                   __end_of___lmul 2582  
                 __end_of___wmul 27C6                    __pidataCOMRAM 2836  
            start_initialization 21D0                      ?_setAllLeds 0001  
                    __end_of_fsm 15F4                     ??_OpenTimer0 000F  
                 buzz@halfPeriod 00F0                         ??___ftge 0048  
                       ??___lmul 0017                         ??___wmul 0027  
                    __pdataBANK0 0060                      __pdataBANK1 0100  
                    __pdataBANK2 0200               __end_of_OpenTimer0 25D6  
              __size_of___altoft 0078                __size_of___awtoft 0038  
              __size_of___ftpack 00AE                __size_of___lbtoft 0024  
                    __pbssCOMRAM 004F                __size_of___lwtoft 0024  
                  __pcstackBANK0 00DC                    __pcstackBANK1 01EC  
            __size_of_myDelay_ms 002C              __size_of_myDelay_us 0030  
                      __pnvBANK0 00F4                 ?_go_through_cols 0001  
                    ?_superMario 00F2                 ___lwdiv@dividend 000F  
            __size_of_setAllLeds 0026                        __pintcode 1008  
                       ?___aldiv 001B                         ?___ftadd 003C  
                       ?___awmod 001D                         ?___ftdiv 002D  
                       ?___ftmul 002D                         ?___fttol 003C  
                       ?___lwdiv 000F                         ?___lwmod 000F  
          __end_of_stepper_pulse 1BB2              OpenTimer0@intEnable 0011  
              _interrupt_handler 1008                      __smallconst 101A  
             ?_interrupt_handler 0001                 _hard_speed_timer 00FA  
               ___lwdiv@quotient 0014                   __size_of_srand 000E  
            ??_interrupt_handler 0001                  ___aldiv@divisor 001F  
                ___aldiv@counter 0023                   ___wmul@product 0027  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                       _LATCbits 000F8B                         _IPR1bits 000F9F  
                       _PIE1bits 000F9D                         _PIR1bits 000F9E  
    _nothingElseMattersFullNotes 0148                  setAllLeds@value 000F  
    _nothingElseMattersDurations 00A8                        _prev_hall 00FE  
                      _multiplex 2750        __end_of_interrupt_handler 24CC  
              ___wmul@multiplier 0023                         _PWM_duty 004F  
            __size_of_superMario 0084                ___lmul@multiplier 000F  
                      copy_data0 21F4                        copy_data1 2214  
                      copy_data2 2234                        copy_data3 2254  
          __end_of_last_new_note 101D      __size_of_nothingElseMatters 0084  
                       __Hrparam 0000            __end_of_last_win_note 101F  
                       __Lrparam 0000                     ??_myDelay_ms 0011  
         __size_of_hardware_init 000C                     ??_myDelay_us 004B  
               __size_of___aldiv 00CC                       ?_multiplex 0001  
               __size_of___ftadd 01AC                 __size_of___awmod 0070  
               __size_of___ftdiv 00E6                         ___altoft 2376  
               __size_of___ftmul 00F4                 __size_of___fttol 00F4  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
                       ___awtoft 26BC                         ___ftpack 207E  
                       ___lbtoft 27EA                         _fsm$1630 01EE  
                       ___lwtoft 27C6                     ??_setAllLeds 000F  
                ___lwdiv@divisor 0011                  ___lwdiv@counter 0013  
                       __ptext10 1AC2                         __ptext11 267A  
                       __ptext20 18DA                         __ptext12 281C  
                       __ptext21 1C9E                         __ptext13 277A  
                       __ptext30 207E                         __ptext22 2376  
                       __ptext14 2628                         __ptext31 23EE  
                       __ptext23 1D84                         __ptext15 22F2  
                       __ptext24 27A0                         __ptext16 17A0  
                       __ptext25 27EA                         __ptext17 26F4  
                       __ptext26 19CE                         __ptext18 2724  
                       __ptext27 1F14                         __ptext19 252C  
                       __ptext28 15F4                         __ptext29 26BC  
             __end_of_myDelay_ms 2750               __end_of_myDelay_us 2724  
                  __size_of_main 000E                    __size_of_init 00C4  
                  __size_of_buzz 013A                    __size_of_rand 0052  
                       _note_new 00D0                         _note_win 00D2  
                       fsm@i_978 01F2                         int$flags 0051  
             __end_of_setAllLeds 27A0                         _position 00D4  
     __size_of_interrupt_handler 14C4                  superMario@index 00F2  
                     _INTCONbits 000FF2                         buzz@freq 00E0  
                  _hardware_init 282A                  _superMarioNotes 018E  
                       intlevel2 0000                 ___lwmod@dividend 000F  
            __end_of_total_steps 1021                     ??_superMario 01EC  
                   _was_released 00DB                      ??_multiplex 004B  
        _nothingElseMattersNotes 00B4                  ___lwmod@divisor 0011  
                ___lwmod@counter 0013                     ___aldiv@sign 0024  
                 ?_hardware_init 0001               __end_of_superMario 22F2  
